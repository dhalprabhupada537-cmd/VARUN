import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from PIL import Image, ImageDraw
import time
from datetime import datetime, timedelta
import os

# Page configuration
st.set_page_config(
    page_title="VARUN AI Crop Recommendation",
    page_icon="ЁЯМ╛",
    layout="wide",
    initial_sidebar_state="expanded"
)

# ===== EMBEDDED LANGUAGE DATA =====
LANGUAGES = {
    'en': {
        'name': 'English',
        'direction': 'ltr',
        'states': {
            'Punjab': 'Punjab',
            'Haryana': 'Haryana', 
            'Uttar Pradesh': 'Uttar Pradesh',
            'Maharashtra': 'Maharashtra',
            'Karnataka': 'Karnataka',
            'Tamil Nadu': 'Tamil Nadu',
            'Andhra Pradesh': 'Andhra Pradesh',
            'Gujarat': 'Gujarat',
            'Odisha': 'Odisha',
            'Jharkhand': 'Jharkhand',
            'West Bengal': 'West Bengal',
            'Bihar': 'Bihar'
        },
        'ui': {
            'app_name': 'VARUN AI',
            'tagline': 'Vikasit Adhunik Roopantaran ke liye Uttam Nirdesh',
            'farmer_details': 'Farmer Details',
            'full_name': 'Full Name',
            'region': 'Region',
            'farm_size': 'Farm Size (acres)',
            'soil_properties': 'Soil Properties',
            'soil_type': 'Soil Type',
            'soil_ph': 'Soil pH',
            'soil_moisture': 'Soil Moisture (%)',
            'nitrogen': 'Nitrogen (kg/ha)',
            'phosphorus': 'Phosphorus (kg/ha)',
            'potassium': 'Potassium (kg/ha)',
            'environmental_factors': 'Environmental Factors',
            'temperature': 'Temperature (┬░C)',
            'rainfall': 'Annual Rainfall (mm)',
            'humidity': 'Humidity (%)',
            'analyze_button': 'Analyze & Recommend',
            'dashboard': 'Dashboard',
            'crop_recommendation': 'Crop Recommendation',
            'soil_analysis': 'Soil Analysis',
            'weather_forecast': 'Weather Forecast',
            'farm_overview': 'Farm Overview',
            'soil_nutrient_levels': 'Soil Nutrient Levels',
            'recommended_crop': 'Recommended Crop',
            'expected_yield': 'Expected Yield',
            'success_probability': 'Success Probability',
            'why_this_crop': 'Why this crop?',
            'planting_guide': 'Planting Guide',
            'best_planting_time': 'Best Planting Time',
            'water_requirements': 'Water Requirements',
            'fertilizer_recommendations': 'Fertilizer Recommendations',
            'harvest_timeline': 'Harvest Timeline',
            'market_insights': 'Market Insights',
            'current_market_price': 'Current market price',
            'demand_trend': 'Demand trend',
            'click_to_analyze': 'Click the button to get crop recommendations',
            'ph_level': 'pH Level',
            'moisture': 'Moisture',
            'organic_matter': 'Organic Matter',
            'wind_speed': 'Wind Speed',
            'created_by': 'Created with love by',
            'team_name': 'Team AgroNova',
            'for_sih': 'for SIH 2025',
            'language': 'Language',
            'select_language': 'Select Language'
        },
        'crops': {
            'Wheat': 'Wheat',
            'Rice': 'Rice',
            'Maize': 'Maize',
            'Cotton': 'Cotton',
            'Soybean': 'Soybean',
            'Pulses': 'Pulses'
        }
    },
    'hi': {
        'name': 'рд╣рд┐рдВрджреА',
        'direction': 'ltr',
        'states': {
            'Punjab': 'рдкрдВрдЬрд╛рдм',
            'Haryana': 'рд╣рд░рд┐рдпрд╛рдгрд╛',
            'Uttar Pradesh': 'рдЙрддреНрддрд░ рдкреНрд░рджреЗрд╢',
            'Maharashtra': 'рдорд╣рд╛рд░рд╛рд╖реНрдЯреНрд░',
            'Karnataka': 'рдХрд░реНрдирд╛рдЯрдХ',
            'Tamil Nadu': 'рддрдорд┐рд▓рдирд╛рдбреБ',
            'Andhra Pradesh': 'рдЖрдВрдзреНрд░ рдкреНрд░рджреЗрд╢',
            'Gujarat': 'рдЧреБрдЬрд░рд╛рдд',
            'Odisha': 'рдУрдбрд┐рд╢рд╛',
            'Jharkhand': 'рдЭрд╛рд░рдЦрдВрдб',
            'West Bengal': 'рдкрд╢реНрдЪрд┐рдо рдмрдВрдЧрд╛рд▓',
            'Bihar': 'рдмрд┐рд╣рд╛рд░'
        },
        'ui': {
            'app_name': 'VARUN AI',
            'tagline': 'рд╡рд┐рдХрд╕рд┐рдд рдЖрдзреБрдирд┐рдХ рд░реВрдкрд╛рдВрддрд░рдг рдХреЗ рд▓рд┐рдП рдЙрддреНрддрдо рдирд┐рд░реНрджреЗрд╢',
            'farmer_details': 'рдХрд┐рд╕рд╛рди рд╡рд┐рд╡рд░рдг',
            'full_name': 'рдкреВрд░рд╛ рдирд╛рдо',
            'region': 'рдХреНрд╖реЗрддреНрд░',
            'farm_size': 'рдЦреЗрдд рдХрд╛ рдЖрдХрд╛рд░ (рдПрдХрдбрд╝)',
            'soil_properties': 'рдорд┐рдЯреНрдЯреА рдХреЗ рдЧреБрдг',
            'soil_type': 'рдорд┐рдЯреНрдЯреА рдХрд╛ рдкреНрд░рдХрд╛рд░',
            'soil_ph': 'рдорд┐рдЯреНрдЯреА рдХрд╛ pH',
            'soil_moisture': 'рдорд┐рдЯреНрдЯреА рдХреА рдирдореА (%)',
            'nitrogen': 'рдирд╛рдЗрдЯреНрд░реЛрдЬрди (kg/ha)',
            'phosphorus': 'рдлреЙрд╕реНрдлреЛрд░рд╕ (kg/ha)',
            'potassium': 'рдкреЛрдЯреИрд╢рд┐рдпрдо (kg/ha)',
            'environmental_factors': 'рдкрд░реНрдпрд╛рд╡рд░рдгреАрдп рдХрд╛рд░рдХ',
            'temperature': 'рддрд╛рдкрдорд╛рди (┬░C)',
            'rainfall': 'рд╡рд╛рд░реНрд╖рд┐рдХ рд╡рд░реНрд╖рд╛ (mm)',
            'humidity': 'рдЖрд░реНрджреНрд░рддрд╛ (%)',
            'analyze_button': 'рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд░реЗрдВ рдФрд░ рд╕рд┐рдлрд╛рд░рд┐рд╢ рдХрд░реЗрдВ',
            'dashboard': 'рдбреИрд╢рдмреЛрд░реНрдб',
            'crop_recommendation': 'рдлрд╕рд▓ рд╕рд┐рдлрд╛рд░рд┐рд╢',
            'soil_analysis': 'рдорд┐рдЯреНрдЯреА рд╡рд┐рд╢реНрд▓реЗрд╖рдг',
            'weather_forecast': 'рдореМрд╕рдо рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди',
            'farm_overview': 'рдЦреЗрдд рдХрд╛ рдЕрд╡рд▓реЛрдХрди',
            'soil_nutrient_levels': 'рдорд┐рдЯреНрдЯреА рдХреЗ рдкреЛрд╖рдХ рддрддреНрд╡реЛрдВ рдХреЗ рд╕реНрддрд░',
            'recommended_crop': 'рд╕рд┐рдлрд╛рд░рд┐рд╢ рдХреА рдЧрдИ рдлрд╕рд▓',
            'expected_yield': 'рдЕрдиреБрдорд╛рдирд┐рдд рдЙрдкрдЬ',
            'success_probability': 'рд╕рдлрд▓рддрд╛ рдХреА рд╕рдВрднрд╛рд╡рдирд╛',
            'why_this_crop': 'рдпрд╣ рдлрд╕рд▓ рдХреНрдпреЛрдВ?',
            'planting_guide': 'рд░реЛрдкрдг рдорд╛рд░реНрдЧрджрд░реНрд╢рд┐рдХрд╛',
            'best_planting_time': 'рд╕рд░реНрд╡реЛрддреНрддрдо рд░реЛрдкрдг рд╕рдордп',
            'water_requirements': 'рдкрд╛рдиреА рдХреА рдЖрд╡рд╢реНрдпрдХрддрд╛рдПрдВ',
            'fertilizer_recommendations': 'рдЙрд░реНрд╡рд░рдХ рд╕рд┐рдлрд╛рд░рд┐рд╢реЗрдВ',
            'harvest_timeline': 'рдлрд╕рд▓ рдХрдЯрд╛рдИ рдХреА рд╕рдордпрд╕реАрдорд╛',
            'market_insights': 'рдмрд╛рдЬрд╛рд░ рдХреА рдЬрд╛рдирдХрд╛рд░реА',
            'current_market_price': 'рд╡рд░реНрддрдорд╛рди рдмрд╛рдЬрд╛рд░ рдореВрд▓реНрдп',
            'demand_trend': 'рдорд╛рдВрдЧ рдХреА рдкреНрд░рд╡реГрддреНрддрд┐',
            'click_to_analyze': 'рдлрд╕рд▓ рд╕рд┐рдлрд╛рд░рд┐рд╢реЗрдВ рдкреНрд░рд╛рдкреНрдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдмрдЯрди рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВ',
            'ph_level': 'pH рд╕реНрддрд░',
            'moisture': 'рдирдореА',
            'organic_matter': 'рдХрд╛рд░реНрдмрдирд┐рдХ рдкрджрд╛рд░реНрде',
            'wind_speed': 'рд╣рд╡рд╛ рдХреА рдЧрддрд┐',
            'created_by': 'рдкреНрдпрд╛рд░ рд╕реЗ рдмрдирд╛рдпрд╛ рдЧрдпрд╛',
            'team_name': 'рдЯреАрдо рдПрдЧреНрд░реЛрдиреЛрд╡рд╛',
            'for_sih': 'рдПрд╕рдЖрдИрдПрдЪ 2025 рдХреЗ рд▓рд┐рдП',
            'language': 'рднрд╛рд╖рд╛',
            'select_language': 'рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ'
        },
        'crops': {
            'Wheat': 'рдЧреЗрд╣реВрдВ',
            'Rice': 'рдЪрд╛рд╡рд▓',
            'Maize': 'рдордХреНрдХрд╛',
            'Cotton': 'рдХрдкрд╛рд╕',
            'Soybean': 'рд╕реЛрдпрд╛рдмреАрди',
            'Pulses': 'рджрд▓рд╣рди'
        }
    },
    'or': {
        'name': 'рмУрмбрм┐рмЖ',
        'direction': 'ltr',
        'states': {
            'Punjab': 'рмкрмЮрнНрмЬрм╛рмм',
            'Haryana': 'рм╣рм░рм┐рнЯрм╛рмгрм╛',
            'Uttar Pradesh': 'рмЙрмдрнНрмдрм░ рмкрнНрм░рмжрнЗрм╢',
            'Maharashtra': 'рморм╣рм╛рм░рм╛рм╖рнНрмЯрнНрм░',
            'Karnataka': 'рмХрм░рнНрмгрм╛рмЯрмХ',
            'Tamil Nadu': 'рмдрм╛рморм┐рм▓рмирм╛рмбрнБ',
            'Andhra Pradesh': 'рмЖрмирнНрмзрнНрм░ рмкрнНрм░рмжрнЗрм╢',
            'Gujarat': 'рмЧрнБрмЬрм░рм╛рмЯ',
            'Odisha': 'рмУрмбрм┐рм╢рм╛',
            'Jharkhand': 'рмЭрм╛рмбрмЦрмгрнНрмб',
            'West Bengal': 'рмкрм╢рнНрмЪрм┐рмо рммрмЩрнНрмЧ',
            'Bihar': 'рммрм┐рм╣рм╛рм░'
        },
        'ui': {
            'app_name': 'VARUN AI',
            'tagline': 'рммрм┐рмХрм╢рм┐рмд рмЖрмзрнБрмирм┐рмХ рм░рнВрмкрм╛рмирнНрмдрм░рмг рмкрм╛рмЗрмБ рмЙрмдрнНрмдрмо рмирм┐рм░рнНрмжрнЗрм╢',
            'farmer_details': 'рмХрнГрм╖рмХрм░ рммрм┐рммрм░рмгрнА',
            'full_name': 'рмкрнВрм░рм╛ рмирм╛рмо',
            'region': 'рмЕрмЮрнНрмЪрм│',
            'farm_size': 'рмЪрм╛рм╖ рмЬрморм┐рм░ рмЖрмХрм╛рм░ (рмПрмХрм░)',
            'soil_properties': 'рморнГрмдрнНрмдрм┐рмХрм╛рм░ рмЧрнБрмг',
            'soil_type': 'рморнГрмдрнНрмдрм┐рмХрм╛рм░ рмкрнНрм░рмХрм╛рм░',
            'soil_ph': 'рморнГрмдрнНрмдрм┐рмХрм╛рм░ pH',
            'soil_moisture': 'рморнГрмдрнНрмдрм┐рмХрм╛рм░ рмЖрм░рнНрмжрнНрм░рмдрм╛ (%)',
            'nitrogen': 'рмирм╛рмЗрмЯрнНрм░рнЛрмЬрнЗрмирнН (kg/ha)',
            'phosphorus': 'рмлрм╕рмлрм░рм╕рнН (kg/ha)',
            'potassium': 'рмкрмЯрм╛рм╕рм┐рмЕрморнН (kg/ha)',
            'environmental_factors': 'рмкрм░рм┐рммрнЗрм╢рмЧрмд рмХрм╛рм░рмХ',
            'temperature': 'рмдрм╛рмкрморм╛рмдрнНрм░рм╛ (┬░C)',
            'rainfall': 'рммрм╛рм░рнНрм╖рм┐рмХ рммрм░рнНрм╖рм╛ (mm)',
            'humidity': 'рмЖрм░рнНрмжрнНрм░рмдрм╛ (%)',
            'analyze_button': 'рммрм┐рм╢рнНрм│рнЗрм╖рмг рмХрм░ рмПрммрмВ рмкрм░рм╛рморм░рнНрм╢ рмжрм┐рмЕ',
            'dashboard': 'рмбрнНрнЯрм╛рм╕рммрнЛрм░рнНрмб',
            'crop_recommendation': 'рмлрм╕рм▓ рмкрм░рм╛рморм░рнНрм╢',
            'soil_analysis': 'рморнГрмдрнНрмдрм┐рмХрм╛ рммрм┐рм╢рнНрм│рнЗрм╖рмг',
            'weather_forecast': 'рмкрм╛рмгрм┐я┐╜рдкрм╛рмЧ рмкрнВрм░рнНрммрм╛рмирнБрморм╛рми',
            'farm_overview': 'рмЪрм╛рм╖ рмЬрморм┐рм░ рм╕рморнАрмХрнНрм╖рм╛',
            'soil_nutrient_levels': 'рморнГрмдрнНрмдрм┐рмХрм╛рм░ рмкрнЛрм╖рмХ рмдрмдрнНрмдрнНрн▒рм░ рм╕рнНрмдрм░',
            'recommended_crop': 'рмкрм░рм╛рморм░рнНрм╢рм┐рмд рмлрм╕рм▓',
            'expected_yield': 'рмЖрм╢рм╛рмХрнГрмд рмЙрмдрнНрмкрм╛рмжрми',
            'success_probability': 'рм╕рмлрм│рмдрм╛рм░ рм╕рморнНрмнрм╛рммрмирм╛',
            'why_this_crop': 'рмПрм╣рм┐ рмлрм╕рм▓ рмХрм╛рм╣рм┐рмБрмХрм┐?',
            'planting_guide': 'рм░рнЛрмкрмг рморм╛рм░рнНрмЧрмжрм░рнНрм╢рм┐рмХрм╛',
            'best_planting_time': 'рм╕рм░рнНрммрнЛрмдрнНрмдрмо рм░рнЛрмкрмг рм╕рморнЯ',
            'water_requirements': 'рмЬрм│ рмЖрммрм╢рнНрнЯрмХрмдрм╛',
            'fertilizer_recommendations': 'рм╕рм╛рм░ рмкрм░рм╛рморм░рнНрм╢',
            'harvest_timeline': 'рмлрм╕рм▓ рмХрмЯрм╛рмЗ рм╕рморнЯрм╕рнАрморм╛',
            'market_insights': 'рммрмЬрм╛рм░рм░ рмЕрмирнНрмдрм░рнНрмжрнГрм╖рнНрмЯрм┐',
            'current_market_price': 'рммрм░рнНрмдрнНрмдрморм╛рмирм░ рммрмЬрм╛рм░ рморнВрм▓рнНрнЯ',
            'demand_trend': 'рмЪрм╛рм╣рм┐рмжрм╛ рмкрнНрм░рммрнГрмдрнНрмдрм┐',
            'click_to_analyze': 'рмлрм╕рм▓ рмкрм░рм╛рморм░рнНрм╢ рмкрм╛рмЗрммрм╛ рмкрм╛рмЗрмБ рммрмЯрмирнН рмжрммрм╛рмирнНрмдрнБ',
            'ph_level': 'pH рм╕рнНрмдрм░',
            'moisture': 'рмЖрм░рнНрмжрнНрм░рмдрм╛',
            'organic_matter': 'рмЬрнИрммрм┐рмХ рмкрмжрм╛рм░рнНрме',
            'wind_speed': 'рмкрммрмирм░ рмЧрмдрм┐',
            'created_by': 'рмнрм╛рм▓рнЛрммрм╛рм╕рм╛ рмХрм░рм┐ рмдрм┐рмЖрм░рм┐ рмХрм░рм╛рмпрм╛рмЗрмЫрм┐',
            'team_name': 'рмжрм│ рмЖрмЧрнНрм░рнЛрмирнЛрмнрм╛',
            'for_sih': 'SIH 2025 рмкрм╛рмЗрмБ',
            'language': 'рмнрм╛рм╖рм╛',
            'select_language': 'рмнрм╛рм╖рм╛ рмЪрнЯрми рмХрм░рмирнНрмдрнБ'
        },
        'crops': {
            'Wheat': 'рмЧрм╣рмЮ',
            'Rice': 'рмЪрм╛рмЙрм│',
            'Maize': 'рмормХрм╛',
            'Cotton': 'рмХрмкрм╛рм╣',
            'Soybean': 'рм╕рнЛрнЯрм╛рммрм┐рми',
            'Pulses': 'рмбрм╛рм▓рм┐'
        }
    },
    'ta': {
        'name': 'родрооро┐ро┤рпН',
        'direction': 'ltr',
        'states': {
            'Punjab': 'рокроЮрпНроЪро╛рокрпН',
            'Haryana': 'ро╣ро░ро┐ропро╛ройро╛',
            'Uttar Pradesh': 'роЙродрпНродро░рокрпН рокро┐ро░родрпЗроЪроорпН',
            'Maharashtra': 'роороХро╛ро░ро╛ро╖рпНроЯро┐ро░ро╛',
            'Karnataka': 'роХро░рпНроиро╛роЯроХро╛',
            'Tamil Nadu': 'родрооро┐ро┤рпНроиро╛роЯрпБ',
            'Andhra Pradesh': 'роЖроирпНродро┐ро░рокрпН рокро┐ро░родрпЗроЪроорпН',
            'Gujarat': 'роХрпБроЬро░ро╛родрпН',
            'Odisha': 'роТроЯро┐роЪро╛',
            'Jharkhand': 'роЬро╛ро░рпНроХрогрпНроЯрпН',
            'West Bengal': 'роорпЗро▒рпНроХрпБ ро╡роЩрпНроХро╛ро│роорпН',
            'Bihar': 'рокрпАроХро╛ро░рпН'
        },
        'ui': {
            'app_name': 'VARUN AI',
            'tagline': 'роорпЗроорпНрокроЯрпНроЯ роиро╡рпАрой рооро╛ро▒рпНро▒родрпНродро┐ро▒рпНроХро╛рой роЪро┐ро▒роирпНрод ро╡ро┤ро┐роХро╛роЯрпНроЯро┐',
            'farmer_details': 'ро╡ро┐ро╡роЪро╛ропро┐ ро╡ро┐ро╡ро░роЩрпНроХро│рпН',
            'full_name': 'роорпБро┤рпБ рокрпЖропро░рпН',
            'region': 'рокро┐ро░ро╛роирпНродро┐ропроорпН',
            'farm_size': 'ро╡ро┐ро╡роЪро╛роп роиро┐ро▓ роЕро│ро╡рпБ (роПроХрпНроХро░рпН)',
            'soil_properties': 'роорогрпН рокрогрпНрокрпБроХро│рпН',
            'soil_type': 'роорогрпН ро╡роХрпИ',
            'soil_ph': 'роорогрпН pH',
            'soil_moisture': 'роорогрпН роИро░рокрпНрокродроорпН (%)',
            'nitrogen': 'роирпИроЯрпНро░роЬройрпН (kg/ha)',
            'phosphorus': 'рокро╛ро╕рпНрокро░ро╕рпН (kg/ha)',
            'potassium': 'рокрпКроЯрпНроЯро╛роЪро┐ропроорпН (kg/ha)',
            'environmental_factors': 'роЪрпБро▒рпНро▒рпБроЪрпНроЪрпВро┤ро▓рпН роХро╛ро░рогро┐роХро│рпН',
            'temperature': 'ро╡рпЖрокрпНрокроиро┐ро▓рпИ (┬░C)',
            'rainfall': 'роЖрогрпНроЯрпБ рооро┤рпИ (mm)',
            'humidity': 'роИро░рокрпНрокродроорпН (%)',
            'analyze_button': 'рокроХрпБрокрпНрокро╛ропрпНро╡рпБ роЪрпЖропрпНродрпБ рокро░ро┐роирпНродрпБро░рпИроХрпНроХро╡рпБроорпН',
            'dashboard': 'роЯро╛ро╖рпНрокрпЛро░рпНроЯрпБ',
            'crop_recommendation': 'рокропро┐ро░рпН рокро░ро┐роирпНродрпБро░рпИ',
            'soil_analysis': 'роорогрпН рокроХрпБрокрпНрокро╛ропрпНро╡рпБ',
            'weather_forecast': 'ро╡ро╛ройро┐ро▓рпИ роорпБройрпНройро▒ро┐ро╡ро┐рокрпНрокрпБ',
            'farm_overview': 'ро╡ро┐ро╡роЪро╛роп роиро┐ро▓рпИ роорпЗро▓рпЛроЯрпНроЯроорпН',
            'soil_nutrient_levels': 'роорогрпН роКроЯрпНроЯроЪрпНроЪродрпНродрпБ роЕро│ро╡рпБроХро│рпН',
            'recommended_crop': 'рокро░ро┐роирпНродрпБро░рпИроХрпНроХрокрпНрокроЯрпНроЯ рокропро┐ро░',
            'expected_yield': 'роОродро┐ро░рпНрокро╛ро░рпНроХрпНроХрокрпНрокроЯрпБроорпН ро╡ро┐ро│рпИроЪрпНроЪро▓рпН',
            'success_probability': 'ро╡рпЖро▒рпНро▒ро┐ роиро┐роХро┤рпНродроХро╡рпБ',
            'why_this_crop': 'роЗроирпНрод рокропро┐ро░рпН роПройрпН?',
            'planting_guide': 'роироЯро╡рпБ ро╡ро┤ро┐роХро╛роЯрпНроЯро┐',
            'best_planting_time': 'роЪро┐ро▒роирпНрод роироЯро╡рпБ роирпЗро░роорпН',
            'water_requirements': 'роирпАро░рпН родрпЗро╡рпИроХро│рпН',
            'fertilizer_recommendations': 'роЙро░ рокро░ро┐роирпНродрпБро░рпИроХро│рпН',
            'harvest_timeline': 'роЕро▒рпБро╡роЯрпИ роХро╛ро▓роХрпНроХрпЖроЯрпБ',
            'market_insights': 'роЪроирпНродрпИ роирпБрогрпНрогро▒ро┐ро╡рпБроХро│рпН',
            'current_market_price': 'родро▒рпНрокрпЛродрпИроп роЪроирпНродрпИ ро╡ро┐ро▓рпИ',
            'demand_trend': 'родрпЗро╡рпИрокрпН рокрпЛроХрпНроХрпБ',
            'click_to_analyze': 'рокропро┐ро░рпН рокро░ро┐роирпНродрпБро░рпИроХро│рпИрокрпН рокрпЖро▒ рокрпКродрпНродро╛ройрпИроХрпН роХро┐ро│ро┐роХрпН роЪрпЖропрпНропро╡рпБроорпН',
            'ph_level': 'pH роЕро│ро╡рпБ',
            'moisture': 'роИро░рокрпНрокродроорпН',
            'organic_matter': 'роХро░ро┐роорокрпН рокрпКро░рпБро│рпН',
            'wind_speed': 'роХро╛ро▒рпНро▒ро┐ройрпН ро╡рпЗроХроорпН',
            'created_by': 'роЕройрпНрокрпЛроЯрпБ роЙро░рпБро╡ро╛роХрпНроХрокрпНрокроЯрпНроЯродрпБ',
            'team_name': 'роЯрпАроорпН роЕроХрпНро░рпЛроирпЛро╡ро╛',
            'for_sih': 'SIH 2025роХрпНроХро╛роХ',
            'language': 'роорпКро┤ро┐',
            'select_language': 'роорпКро┤ро┐ропрпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН'
        },
        'crops': {
            'Wheat': 'роХрпЛродрпБроорпИ',
            'Rice': 'роирпЖро▓рпН',
            'Maize': 'роЪрпЛро│роорпН',
            'Cotton': 'рокро░рпБродрпНродро┐',
            'Soybean': 'роЪрпЛропро╛',
            'Pulses': 'рокро░рпБрокрпНрокрпБ ро╡роХрпИроХро│рпН'
        }
    },
    'bn': {
        'name': 'ржмрж╛ржВрж▓рж╛',
        'direction': 'ltr',
        'states': {
            'Punjab': 'ржкржЮрзНржЬрж╛ржм',
            'Haryana': 'рж╣рж░рж┐ржпрж╝рж╛ржирж╛',
            'Uttar Pradesh': 'ржЙрждрзНрждрж░ ржкрзНрж░ржжрзЗрж╢',
            'Maharashtra': 'ржорж╣рж╛рж░рж╛рж╖рзНржЯрзНрж░',
            'Karnataka': 'ржХрж░рзНржгрж╛ржЯрдХ',
            'Tamil Nadu': 'рждрж╛ржорж┐рж▓ржирж╛ржбрж╝рзБ',
            'Andhra Pradesh': 'ржЕржирзНржзрзНрж░ ржкрзНрж░ржжрзЗрж╢',
            'Gujarat': 'ржЧрзБржЬрж░рж╛ржЯ',
            'Odisha': 'ржУржбрж╝рж┐рж╢рж╛',
            'Jharkhand': 'ржЭрж╛ржбрж╝ржЦржгрзНржб',
            'West Bengal': 'ржкрж╢рзНржЪрж┐ржоржмржЩрзНржЧ',
            'Bihar': 'ржмрж┐рж╣рж╛рж░'
        },
        'ui': {
            'app_name': 'VARUN AI',
            'tagline': 'ржЙржирзНржиржд ржЖржзрзБржирж┐ржХ рж░рзВржкрж╛ржирзНрждрж░рзЗрж░ ржЬржирзНржп рж╕рзЗрж░рж╛ ржирж┐рж░рзНржжрзЗрж╢рж┐ржХрж╛',
            'farmer_details': 'ржХрзГрж╖ржХрзЗрж░ ржмрж┐ржмрж░ржг',
            'full_name': 'ржкрзБрж░рзЛ ржирж╛ржо',
            'region': 'ржЕржЮрзНржЪрж▓',
            'farm_size': 'ржЦрж╛ржорж╛рж░рзЗрж░ ржЖржХрж╛рж░ (ржПржХрж░)',
            'soil_properties': 'ржорж╛ржЯрж┐рж░ ржмрзИрж╢рж┐рж╖рзНржЯрзНржп',
            'soil_type': 'ржорж╛ржЯрж┐рж░ ржзрж░ржи',
            'soil_ph': 'ржорж╛ржЯрж┐рж░ pH',
            'soil_moisture': 'ржорж╛ржЯрж┐рж░ ржЖрж░рзНржжрзНрж░рждрж╛ (%)',
            'nitrogen': 'ржирж╛ржЗржЯрзНрж░рзЛржЬрзЗржи (kg/ha)',
            'phosphorus': 'ржлрж╕ржлрж░рж╛рж╕ (kg/ha)',
            'potassium': 'ржкржЯрж╛рж╕рж┐ржпрж╝рж╛ржо (kg/ha)',
            'environmental_factors': 'ржкрж░рж┐ржмрзЗрж╢ржЧржд ржХрж╛рж░ржг',
            'temperature': 'рждрж╛ржкржорж╛рждрзНрж░рж╛ (┬░C)',
            'rainfall': 'ржмрж╛рж░рзНрж╖рж┐ржХ ржмрзГрж╖рзНржЯрж┐ржкрж╛ржд (mm)',
            'humidity': 'ржЖрж░рзНржжрзНрж░рждрж╛ (%)',
            'analyze_button': 'ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржХрж░рзБржи ржПржмржВ рж╕рзБржкрж╛рж░рж┐рж╢ ржХрж░рзБржи',
            'dashboard': 'ржбрзНржпрж╛рж╢ржмрзЛрж░рзНржб',
            'crop_recommendation': 'ржлрж╕рж▓ рж╕рзБржкрж╛рж░рж┐рж╢',
            'soil_analysis': 'ржорж╛ржЯрж┐рж░ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг',
            'weather_forecast': 'ржЖржмрж╣рж╛ржУржпрж╝рж╛рж░ ржкрзВрж░рзНржмрж╛ржнрж╛рж╕',
            'farm_overview': 'ржЦрж╛ржорж╛рж░рзЗрж░ ржУржнрж╛рж░ржнрж┐ржЙ',
            'soil_nutrient_levels': 'ржорж╛ржЯрж┐рж░ ржкрзБрж╖рзНржЯрж┐рж░ ржорж╛рждрзНрж░рж╛',
            'recommended_crop': 'рж╕рзБржкрж╛рж░рж┐рж╢ржХрзГржд ржлрж╕рж▓',
            'expected_yield': 'ржкрзНрж░рждрзНржпрж╛рж╢рж┐ржд ржлрж▓ржи',
            'success_probability': 'рж╕рж╛ржлрж▓рзНржпрзЗрж░ рж╕ржорзНржнрж╛ржмржирж╛',
            'why_this_crop': 'ржПржЗ ржлрж╕рж▓ ржХрзЗржи?',
            'planting_guide': 'рж░рзЛржкржг ржЧрж╛ржЗржб',
            'best_planting_time': 'рж╕рзЗрж░рж╛ рж░рзЛржкржгрзЗрж░ рж╕ржоржпрж╝',
            'water_requirements': 'ржкрж╛ржирж┐рж░ ржкрзНрж░ржпрж╝рзЛржЬржирзАржпрж╝рждрж╛',
            'fertilizer_recommendations': 'рж╕рж╛рж░ рж╕рзБржкрж╛рж░рж┐рж╢',
            'harvest_timeline': 'рдлрд╕рд▓ ржХрж╛ржЯрж╛рж░ рж╕ржоржпрж╝рж╕рзАржорж╛',
            'market_insights': 'ржмрж╛ржЬрж╛рж░ ржЕржирзНрждрж░рзНржжрзГрж╖рзНржЯрж┐',
            'current_market_price': 'ржмрж░рзНрждржорж╛ржи ржмрж╛ржЬрж╛рж░ ржорзВрж▓рзНржп',
            'demand_trend': 'ржЪрж╛рж╣рж┐ржжрж╛рж░ ржкрзНрж░ржмржгрждрж╛',
            'click_to_analyze': 'ржлрж╕рж▓рзЗрж░ рж╕рзБржкрж╛рж░рж┐рж╢ ржкрзЗрждрзЗ ржмрж╛ржЯржи ржХрзНрж▓рж┐ржХ ржХрж░рзБржи',
            'ph_level': 'pH ржорж╛рждрзНрж░рж╛',
            'moisture': 'ржЖрж░рзНржжрзНрж░рждрж╛',
            'organic_matter': 'ржЬрзИржм ржкржжрж╛рж░рзНрже',
            'wind_speed': 'ржмрж╛рждрж╛рж╕рзЗрж░ ржЧрждрж┐',
            'created_by': 'ржнрж╛рж▓рзЛржмрж╛рж╕рж╛ рж╕рж╣ рждрзИрж░рж┐',
            'team_name': 'ржЯрж┐ржо ржПржЧрзНрж░рзЛржирзЛржнрж╛',
            'for_sih': 'SIH 2025 ржПрж░ ржЬржирзНржп',
            'language': 'ржнрж╛рж╖рж╛',
            'select_language': 'ржнрж╛рж╖рж╛ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи'
        },
        'crops': {
            'Wheat': 'ржЧржо',
            'Rice': 'ржзрж╛ржи',
            'Maize': 'ржнрзБржЯрзНржЯрж╛',
            'Cotton': 'рждрзБрж▓рж╛',
            'Soybean': 'рж╕ржпрж╝рж╛ржмрж┐ржи',
            'Pulses': 'ржбрж╛рж▓'
        }
    },
    'mr': {
        'name': 'рдорд░рд╛рдареА',
        'direction': 'ltr',
        'states': {
            'Punjab': 'рдкрдВрдЬрд╛рдм',
            'Haryana': 'рд╣рд░рд┐рдпрд╛рдгрд╛',
            'Uttar Pradesh': 'рдЙрддреНрддрд░ рдкреНрд░рджреЗрд╢',
            'Maharashtra': 'рдорд╣рд╛рд░рд╛рд╖реНрдЯреНрд░',
            'Karnataka': 'рдХрд░реНрдирд╛рдЯрдХ',
            'Tamil Nadu': 'рддрдорд┐рд│рдирд╛рдбреВ',
            'Andhra Pradesh': 'рдЖрдВрдзреНрд░ рдкреНрд░рджреЗрд╢',
            'Gujarat': 'рдЧреБрдЬрд░рд╛рдд',
            'Odisha': 'рдУрдбрд┐рд╢рд╛',
            'Jharkhand': 'рдЭрд╛рд░рдЦрдВрдб',
            'West Bengal': 'рдкрд╢реНрдЪрд┐рдо рдмрдВрдЧрд╛рд▓',
            'Bihar': 'рдмрд┐рд╣рд╛рд░'
        },
        'ui': {
            'app_name': 'VARUN AI',
            'tagline': 'рд╡рд┐рдХрд╕рд┐рдд рдЖрдзреБрдирд┐рдХ рд░реВрдкрд╛рдВрддрд░рдгрд╛рд╕рд╛рдареА рдЙрддреНрддрдо рдорд╛рд░реНрдЧрджрд░реНрд╢рди',
            'farmer_details': 'рд╢реЗрддрдХрд░реА рддрдкрд╢реАрд▓',
            'full_name': 'рдкреВрд░реНрдг рдирд╛рд╡',
            'region': 'рдкреНрд░рджреЗрд╢',
            'farm_size': 'рд╢реЗрддрд╛рдЪрд╛ рдЖрдХрд╛рд░ (рдПрдХрд░)',
            'soil_properties': 'рдорд╛рддреАрдЪреЗ рдЧреБрдгрдзрд░реНрдо',
            'soil_type': 'рдорд╛рддреАрдЪрд╛ рдкреНрд░рдХрд╛рд░',
            'soil_ph': 'рдорд╛рддреАрдЪрд╛ pH',
            'soil_moisture': 'рдорд╛рддреАрдЪреА рдЖрд░реНрджреНрд░рддрд╛ (%)',
            'nitrogen': 'рдирд╛рдпрдЯреНрд░реЛрдЬрди (kg/ha)',
            'phosphorus': 'рдлреЙрд╕реНрдлрд░рд╕ (kg/ha)',
            'potassium': 'рдкреЛрдЯреЕрд╢рд┐рдпрдо (kg/ha)',
            'environmental_factors': 'рдкрд░реНрдпрд╛рд╡рд░рдгреАрдп рдШрдЯрдХ',
            'temperature': 'рддрд╛рдкрдорд╛рди (┬░C)',
            'rainfall': 'рд╡рд╛рд░реНрд╖рд┐рдХ рдкрд╛рдКрд╕ (mm)',
            'humidity': 'рдЖрд░реНрджреНрд░рддрд╛ (%)',
            'analyze_button': 'рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд░рд╛ рдЖрдгрд┐ рд╢рд┐рдлрд╛рд░рд╕ рдХрд░рд╛',
            'dashboard': 'рдбреЕрд╢рдмреЛрд░реНрдб',
            'crop_recommendation': 'рдкреАрдХ рд╢рд┐рдлрд╛рд░рд╕',
            'soil_analysis': 'рдорд╛рддреА рд╡рд┐рд╢реНрд▓реЗрд╖рдг',
            'weather_forecast': 'рд╣рд╡рд╛рдорд╛рди рдЕрдВрджрд╛рдЬ',
            'farm_overview': 'рд╢реЗрддрд╛рдЪрд╛ рдЖрдврд╛рд╡рд╛',
            'soil_nutrient_levels': 'рдорд╛рддреАрддреАрд▓ рдкреЛрд╖рдХ рджреНрд░рд╡реНрдп рдкрд╛рддрд│реА',
            'recommended_crop': 'рд╢рд┐рдлрд╛рд░рд╕ рдХреЗрд▓реЗрд▓реА рдкреАрдХ',
            'expected_yield': 'рдЕрдкреЗрдХреНрд╖рд┐рдд рдЙрддреНрдкрд╛рджрди',
            'success_probability': 'рдпрд╢рд╛рдЪреА рд╢рдХреНрдпрддрд╛',
            'why_this_crop': 'рд╣реЗ рдкреАрдХ рдХрд╛?',
            'planting_guide': 'рд▓рд╛рдЧрд╡рдб рдорд╛рд░реНрдЧрджрд░реНрд╢рдХ',
            'best_planting_time': 'рдЙрддреНрддрдо рд▓рд╛рдЧрд╡рдбреАрдЪреА рд╡реЗрд│',
            'water_requirements': 'рдкрд╛рдгреНрдпрд╛рдЪреА рдЖрд╡рд╢реНрдпрдХрддрд╛',
            'fertilizer_recommendations': 'рдЦрдд рд╢рд┐рдлрд╛рд░рд╕реА',
            'harvest_timeline': 'рдХрд╛рдкрдгреА рд╡реЗрд│рд░реЗрд╖рд╛',
            'market_insights': 'рдмрд╛рдЬрд╛рд░рд╛рддреАрд▓ рдЕрдВрддрд░реНрджреГрд╖реНрдЯреА',
            'current_market_price': 'рд╕рдзреНрдпрд╛рдЪрд╛ рдмрд╛рдЬрд╛рд░рднрд╛рд╡',
            'demand_trend': 'рдорд╛рдЧрдгреАрдЪреА рдкреНрд░рд╡реГрддреНрддреА',
            'click_to_analyze': 'рдкреАрдХ рд╢рд┐рдлрд╛рд░рд╕реА рдорд┐рд│рд╡рд┐рдгреНрдпрд╛рд╕рд╛рдареА рдмрдЯрдг рдХреНрд▓рд┐рдХ рдХрд░рд╛',
            'ph_level': 'pH рдкрд╛рддрд│реА',
            'moisture': 'рдЖрд░реНрджреНрд░рддрд╛',
            'organic_matter': 'рд╕реЗрдВрджреНрд░рд┐рдп рдкрджрд╛рд░реНрде',
            'wind_speed': 'рд╡рд╛рд▒реНрдпрд╛рдЪреА рдЧрддреА',
            'created_by': 'рдкреНрд░реЗрдорд╛рдиреЗ рддрдпрд╛рд░ рдХреЗрд▓реЗ',
            'team_name': 'рдЯреАрдо рдЕреЕрдЧреНрд░реЛрдиреЛрд╡реНрд╣рд╛',
            'for_sih': 'SIH 2025 рд╕рд╛рдареА',
            'language': 'рднрд╛рд╖рд╛',
            'select_language': 'рднрд╛рд╖рд╛ рдирд┐рд╡рдбрд╛'
        },
        'crops': {
            'Wheat': 'рдЧрд╣реВ',
            'Rice': 'рддрд╛рдВрджреВрд│',
            'Maize': 'рдордХрд╛',
            'Cotton': 'рдХрд╛рдкреВрд╕',
            'Soybean': 'рд╕реЛрдпрд╛рдмреАрди',
            'Pulses': 'рдбрд╛рд│'
        }
    }
}

# State to language mapping
STATE_LANGUAGE_MAPPING = {
    'Odisha': 'or',
    'Jharkhand': 'hi',
    'Bihar': 'hi',
    'Punjab': 'hi',
    'Haryana': 'hi',
    'Uttar Pradesh': 'hi',
    'West Bengal': 'bn',
    'Maharashtra': 'mr',
    'Tamil Nadu': 'ta',
    'Default': 'en'
}

def get_language_for_state(state):
    """Get the default language for a given state"""
    return STATE_LANGUAGE_MAPPING.get(state, STATE_LANGUAGE_MAPPING['Default'])

def get_available_languages():
    """Return list of available languages"""
    return list(LANGUAGES.keys())

def get_state_name(state, lang):
    """Get translated state name"""
    return LANGUAGES[lang]['states'].get(state, state)

# ===== ENHANCED CSS STYLING =====
st.markdown("""
<style>
    :root {
        --primary-color: #2E8B57;
        --secondary-color: #3CB371;
        --accent-color: #4CAF50;
        --background-color: #FFFFFF;
        --card-background: #F8F9FA;
        --text-color: #333333;
        --border-color: #E0E0E0;
        --shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        --hover-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
    }

    @media (prefers-color-scheme: dark) {
        :root {
            --background-color: #1E1E1E;
            --card-background: #2D2D2D;
            --text-color: #FFFFFF;
            --border-color: #404040;
            --shadow: 0 4px 6px rgba(0, 0, 0, 0.3);
            --hover-shadow: 0 6px 12px rgba(0, 0, 0, 0.4);
        }
    }

    .main-header {
        font-size: 3.5rem;
        color: var(--primary-color);
        text-align: center;
        font-weight: bold;
        margin-bottom: 0.5rem;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
    }

    .tagline {
        font-size: 1.2rem;
        color: var(--secondary-color);
        text-align: center;
        margin-top: 0;
        margin-bottom: 2rem;
        font-style: italic;
    }

    .sub-header {
        font-size: 1.8rem;
        color: var(--primary-color);
        border-bottom: 2px solid var(--secondary-color);
        padding-bottom: 0.5rem;
        margin-bottom: 1.5rem;
    }

    .card {
        padding: 1.5rem;
        border-radius: 12px;
        background-color: var(--card-background);
        border: 1px solid var(--border-color);
        box-shadow: var(--shadow);
        margin: 1rem 0;
        transition: all 0.3s ease;
    }

    .card:hover {
        box-shadow: var(--hover-shadow);
        transform: translateY(-2px);
    }

    .recommendation-card {
        background: linear-gradient(135deg, #E8F5E9 0%, #C8E6C9 100%);
        padding: 2rem;
        border-radius: 15px;
        border-left: 5px solid var(--accent-color);
        box-shadow: var(--shadow);
        margin: 1.5rem 0;
    }

    .weather-card {
        background: linear-gradient(135deg, #E3F2FD 0%, #BBDEFB 100%);
        padding: 1.5rem;
        border-radius: 12px;
        text-align: center;
        box-shadow: var(--shadow);
        border: 1px solid var(--border-color);
    }

    .soil-image {
        border-radius: 12px;
        width: 100%;
        height: 200px;
        object-fit: cover;
        box-shadow: var(--shadow);
        border: 1px solid var(--border-color);
    }

    .footer {
        text-align: center;
        margin-top: 3rem;
        padding: 2rem;
        background: linear-gradient(135deg, var(--primary-color) 0%, var(--secondary-color) 100%);
        color: white;
        border-radius: 12px;
        box-shadow: var(--shadow);
    }

    .team-name {
        font-weight: bold;
        color: #FFD700;
        text-shadow: 1px 1px 2px rgba(0,0,0,0.5);
    }

    .language-selector {
        position: fixed;
        top: 1rem;
        right: 1rem;
        z-index: 1000;
        background: var(--card-background);
        padding: 0.5rem 1rem;
        border-radius: 25px;
        box-shadow: var(--shadow);
        border: 1px solid var(--border-color);
    }

    .stProgress > div > div > div > div {
        background: linear-gradient(90deg, var(--accent-color) 0%, #8BC34A 100%);
    }

    .metric-value {
        font-size: 1.8rem;
        font-weight: bold;
        color: var(--primary-color);
        margin: 0.5rem 0;
    }

    .metric-label {
        font-size: 0.9rem;
        color: var(--text-color);
        opacity: 0.8;
        margin-bottom: 0.5rem;
    }

    /* Responsive design */
    @media (max-width: 768px) {
        .main-header {
            font-size: 2.5rem;
        }
        
        .card {
            padding: 1rem;
        }
        
        .language-selector {
            top: 0.5rem;
            right: 0.5rem;
            padding: 0.3rem 0.8rem;
        }
    }
</style>
""", unsafe_allow_html=True)

# Initialize session state for language
if 'language' not in st.session_state:
    st.session_state.language = 'en'
if 'last_state' not in st.session_state:
    st.session_state.last_state = ''

# Helper function to get translated text
def t(key, lang=None):
    """Get translated text for the given key"""
    if lang is None:
        lang = st.session_state.language
    
    # Navigate through nested keys (e.g., 'ui.farmer_details')
    keys = key.split('.')
    value = LANGUAGES[lang]
    
    for k in keys:
        if isinstance(value, dict) and k in value:
            value = value[k]
        else:
            # Fallback to English if translation not found
            if lang != 'en':
                return t(key, 'en')
            return key  # Return the key itself as last resort
    
    return value

# Generate soil images if they don't exist
def generate_soil_images():
    soil_colors = {
        "clay": (180, 120, 80),
        "loam": (160, 100, 60),
        "sand": (220, 200, 160),
        "silt": (200, 180, 140)
    }
    
    os.makedirs("assets/soil_types", exist_ok=True)
    
    for soil_type, color in soil_colors.items():
        img_path = f"assets/soil_types/{soil_type}.png"
        if not os.path.exists(img_path):
            img = Image.new('RGB', (400, 300), color=color)
            draw = ImageDraw.Draw(img)
            
            # Add texture
            for _ in range(800):
                x = np.random.randint(0, 400)
                y = np.random.randint(0, 300)
                size = np.random.randint(2, 8)
                draw.ellipse([(x, y), (x+size, y+size)], 
                           fill=tuple(max(0, c-30) for c in color))
            
            img.save(img_path)

# Generate logo if it doesn't exist
def generate_logo():
    if not os.path.exists("assets/logo.png"):
        img = Image.new('RGB', (400, 200), color=(46, 139, 87))
        draw = ImageDraw.Draw(img)
        
        # Draw VARUN text
        draw.text((120, 70), "VARUN", fill=(255, 255, 255))
        draw.text((130, 120), "ai", fill=(255, 215, 0))
        
        # Draw plant icon
        draw.ellipse([(30, 70), (90, 130)], fill=(255, 215, 0))
        img.save("assets/logo.png")

# Generate images
os.makedirs("assets", exist_ok=True)
generate_logo()
generate_soil_images()

# Language selector at top right
with st.container():
    col1, col2, col3 = st.columns([3, 1, 1])
    with col3:
        st.markdown('<div class="language-selector">', unsafe_allow_html=True)
        selected_language = st.selectbox(
            "ЁЯМР",
            options=get_available_languages(),
            format_func=lambda x: LANGUAGES[x]['name'],
            key='language_selector',
            index=get_available_languages().index(st.session_state.language),
            label_visibility="collapsed"
        )
        st.markdown('</div>', unsafe_allow_html=True)
        
        # Update language when selector changes
        if selected_language != st.session_state.language:
            st.session_state.language = selected_language
            st.rerun()

# App header
col1, col2, col3 = st.columns([1, 3, 1])
with col2:
    st.markdown(f'<h1 class="main-header">VARUN<span style="color: #FFD700;">ai</span></h1>', unsafe_allow_html=True)
    st.markdown(f'<p class="tagline">{t("ui.tagline")}</p>', unsafe_allow_html=True)

# Sidebar
with st.sidebar:
    st.image("assets/logo.png", width=280)
    st.markdown(f"## {t('ui.farmer_details')}")
    
    farmer_name = st.text_input(t('ui.full_name'))
    
    # Get state names in current language
    state_options = list(LANGUAGES['en']['states'].keys())
    state_display_names = [get_state_name(state, st.session_state.language) for state in state_options]
    
    selected_state_index = st.selectbox(
        t('ui.region'),
        range(len(state_options)),
        format_func=lambda i: state_display_names[i]
    )
    
    farm_location = state_options[selected_state_index]
    
    # Update language based on state selection
    if farm_location and farm_location != st.session_state.last_state:
        state_language = get_language_for_state(farm_location)
        if state_language != st.session_state.language:
            st.session_state.language = state_language
            st.session_state.last_state = farm_location
            st.rerun()
    
    farm_size = st.slider(t('ui.farm_size'), 1, 100, 10)
    
    st.markdown(f"## {t('ui.soil_properties')}")
    soil_type = st.selectbox(t('ui.soil_type'), ["Loam", "Clay", "Sandy", "Silt"])
    soil_ph = st.slider(t('ui.soil_ph'), 4.0, 9.0, 6.5)
    soil_moisture = st.slider(t('ui.soil_moisture'), 0, 100, 50)
    nitrogen = st.slider(t('ui.nitrogen'), 0, 200, 50)
    phosphorus = st.slider(t('ui.phosphorus'), 0, 200, 40)
    potassium = st.slider(t('ui.potassium'), 0, 200, 60)
    
    st.markdown(f"## {t('ui.environmental_factors')}")
    temperature = st.slider(t('ui.temperature'), 0, 45, 25)
    rainfall = st.slider(t('ui.rainfall'), 0, 2000, 800)
    humidity = st.slider(t('ui.humidity'), 0, 100, 60)
    
    analyze_button = st.button(t('ui.analyze_button'), type="primary", use_container_width=True)

# Crop recommendation model (same as before)
def predict_best_crop(soil_type, ph, nitrogen, phosphorus, potassium, temperature, rainfall, humidity, region):
    # Regional crop preferences
    regional_preferences = {
        "Punjab": ["Wheat", "Rice", "Cotton", "Maize"],
        "Haryana": ["Wheat", "Rice", "Cotton", "Mustard"],
        "Uttar Pradesh": ["Wheat", "Rice", "Sugarcane", "Potato"],
        "Maharashtra": ["Cotton", "Soybean", "Pulses", "Sugarcane"],
        "Karnataka": ["Rice", "Cotton", "Pulses", "Coffee"],
        "Tamil Nadu": ["Rice", "Sugarcane", "Cotton", "Groundnut"],
        "Andhra Pradesh": ["Rice", "Cotton", "Chilli", "Groundnut"],
        "Gujarat": ["Cotton", "Groundnut", "Wheat", "Pulses"],
        "Odisha": ["Rice", "Pulses", "Oilseeds", "Millets"],
        "Jharkhand": ["Rice", "Pulses", "Oilseeds", "Maize"],
        "West Bengal": ["Rice", "Jute", "Tea", "Potato"],
        "Bihar": ["Rice", "Wheat", "Maize", "Pulses"]
    }
    
    # Crop data with optimal conditions
    crops = [
        {
            'name': 'Wheat', 'soil_type': 'Loam', 'ph_min': 6.0, 'ph_max': 7.5,
            'temp_min': 10, 'temp_max': 25, 'rainfall_min': 500, 'rainfall_max': 1000,
            'n_min': 50, 'n_max': 80, 'p_min': 30, 'p_max': 60, 'k_min': 40, 'k_max': 70
        },
        {
            'name': 'Rice', 'soil_type': 'Clay', 'ph_min': 5.0, 'ph_max': 6.5,
            'temp_min': 20, 'temp_max': 35, 'rainfall_min': 1000, 'rainfall_max': 2000,
            'n_min': 60, 'n_max': 90, 'p_min': 40, 'p_max': 70, 'k_min': 50, 'k_max': 80
        },
        {
            'name': 'Maize', 'soil_type': 'Loam', 'ph_min': 5.5, 'ph_max': 7.0,
            'temp_min': 15, 'temp_max': 30, 'rainfall_min': 600, 'rainfall_max': 1200,
            'n_min': 70, 'n_max': 100, 'p_min': 50, 'p_max': 80, 'k_min': 60, 'k_max': 90
        },
        {
            'name': 'Cotton', 'soil_type': 'Sandy', 'ph_min': 5.5, 'ph_max': 7.5,
            'temp_min': 20, 'temp_max': 35, 'rainfall_min': 500, 'rainfall_max': 800,
            'n_min': 40, 'n_max': 70, 'p_min': 30, 'p_max': 60, 'k_min': 50, 'k_max': 80
        },
        {
            'name': 'Soybean', 'soil_type': 'Silt', 'ph_min': 6.0, 'ph_max': 7.0,
            'temp_min': 15, 'temp_max': 30, 'rainfall_min': 600, 'rainfall_max': 1000,
            'n_min': 30, 'n_max': 60, 'p_min': 40, 'p_max': 70, 'k_min': 50, 'k_max': 80
        },
        {
            'name': 'Pulses', 'soil_type': 'Loam', 'ph_min': 6.0, 'ph_max': 7.5,
            'temp_min': 15, 'temp_max': 30, 'rainfall_min': 500, 'rainfall_max': 800,
            'n_min': 20, 'n_max': 50, 'p_min': 30, 'p_max': 60, 'k_min': 40, 'k_max': 70
        }
    ]
    
    # Calculate scores
    scores = []
    for crop in crops:
        score = 0
        
        # Regional preference (higher weight)
        if crop['name'] in regional_preferences.get(region, []):
            score += 30
        
        # Soil type match
        if crop['soil_type'].lower() == soil_type.lower():
            score += 25
        
        # pH suitability
        if crop['ph_min'] <= ph <= crop['ph_max']:
            score += 15
        else:
            score -= 10 * abs(ph - (crop['ph_min'] + crop['ph_max'])/2)
        
        # Temperature suitability
        if crop['temp_min'] <= temperature <= crop['temp_max']:
            score += 10
        else:
            score -= 5 * abs(temperature - (crop['temp_min'] + crop['temp_max'])/2)
        
        # Rainfall suitability
        if crop['rainfall_min'] <= rainfall <= crop['rainfall_max']:
            score += 10
        else:
            score -= 3 * abs(rainfall - (crop['rainfall_min'] + crop['rainfall_max'])/2)
        
        # Nutrient suitability
        n_score = 8 if crop['n_min'] <= nitrogen <= crop['n_max'] else -2 * abs(nitrogen - (crop['n_min'] + crop['n_max'])/2)
        p_score = 8 if crop['p_min'] <= phosphorus <= crop['p_max'] else -2 * abs(phosphorus - (crop['p_min'] + crop['p_max'])/2)
        k_score = 9 if crop['k_min'] <= potassium <= crop['k_max'] else -2 * abs(potassium - (crop['k_min'] + crop['k_max'])/2)
        
        score += n_score + p_score + k_score
        scores.append(score)
    
    # Get best crop
    best_idx = np.argmax(scores)
    best_crop = crops[best_idx]
    
    # Generate recommendation
    planting_times = {
        'Wheat': t('crops.Wheat') + ' - October-November',
        'Rice': t('crops.Rice') + ' - June-July', 
        'Maize': t('crops.Maize') + ' - April-May',
        'Cotton': t('crops.Cotton') + ' - May-June',
        'Soybean': t('crops.Soybean') + ' - June-July',
        'Pulses': t('crops.Pulses') + ' - October-November'
    }
    
    return {
        'crop': t(f'crops.{best_crop["name"]}'),
        'probability': min(95, max(65, int(scores[best_idx]))),
        'yield': f"{np.random.uniform(2.0, 5.0):.1f}",
        'reason': f"{t(f'crops.{best_crop['name']}')} is ideal for {region}'s climate and your soil conditions ({soil_type} soil, pH {ph}).",
        'planting_time': planting_times.get(best_crop['name'], 'Varies by region'),
        'water_req': 'Moderate (600-800 mm)' if best_crop['name'] in ['Wheat', 'Maize'] else 
                     'High (1000-1500 mm)' if best_crop['name'] == 'Rice' else
                     'Low (400-600 mm)' if best_crop['name'] == 'Cotton' else 'Moderate (500-700 mm)',
        'fertilizer': 'N:P:K = 60:40:40 kg/ha' if best_crop['name'] == 'Wheat' else 
                      'N:P:K = 80:40:40 kg/ha' if best_crop['name'] == 'Rice' else
                      'N:P:K = 100:50:50 kg/ha' if best_crop['name'] == 'Maize' else
                      'N:P:K = 50:25:25 kg/ha' if best_crop['name'] == 'Cotton' else 'N:P:K = 40:60:40 kg/ha',
        'harvest_time': 'March-April' if best_crop['name'] == 'Wheat' else 
                        'October-November' if best_crop['name'] == 'Rice' else
                        'August-September' if best_crop['name'] == 'Maize' else
                        'October-December' if best_crop['name'] == 'Cotton' else 'September-October',
        'market_price': f"тВ╣{np.random.randint(25, 55)}",
        'demand_trend': 'High' if best_crop['name'] in ['Rice', 'Wheat'] else 'Stable'
    }

# Main content
tab1, tab2, tab3, tab4 = st.tabs([
    t('ui.dashboard'), 
    t('ui.crop_recommendation'), 
    t('ui.soil_analysis'), 
    t('ui.weather_forecast')
])

with tab1:
    st.markdown(f'<h2 class="sub-header">{t("ui.farm_overview")}</h2>', unsafe_allow_html=True)
    
    col1, col2, col3 = st.columns(3)
    with col1: 
        st.markdown(f'<div class="card"><div class="metric-label">{t("ui.farm_size")}</div><div class="metric-value">{farm_size} acres</div></div>', unsafe_allow_html=True)
    with col2: 
        st.markdown(f'<div class="card"><div class="metric-label">{t("ui.soil_type")}</div><div class="metric-value">{soil_type}</div></div>', unsafe_allow_html=True)
    with col3: 
        st.markdown(f'<div class="card"><div class="metric-label">{t("ui.region")}</div><div class="metric-value">{get_state_name(farm_location, st.session_state.language)}</div></div>', unsafe_allow_html=True)

with tab2:
    st.markdown(f'<h2 class="sub-header">{t("ui.crop_recommendation")}</h2>', unsafe_allow_html=True)
    
    if analyze_button:
        with st.spinner('Analyzing your farm data and generating recommendations...'):
            progress_bar = st.progress(0)
            for percent_complete in range(100):
                time.sleep(0.01)
                progress_bar.progress(percent_complete + 1)
            
            recommendation = predict_best_crop(soil_type, soil_ph, nitrogen, phosphorus, 
                                             potassium, temperature, rainfall, humidity, farm_location)
            
            st.markdown('<div class="recommendation-card">', unsafe_allow_html=True)
            st.markdown(f"### ЁЯМ▒ {t('ui.recommended_crop')}: **{recommendation['crop']}**")
            st.markdown(f"**{t('ui.expected_yield')}:** {recommendation['yield']} tons/acre")
            st.markdown(f"**{t('ui.success_probability')}:** {recommendation['probability']}%")
            st.markdown('</div>', unsafe_allow_html=True)
            
            st.markdown(f"#### {t('ui.why_this_crop')}")
            st.info(recommendation['reason'])
            
            st.markdown(f"#### {t('ui.planting_guide')}")
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown(f"**{t('ui.best_planting_time')}**")
                st.write(recommendation['planting_time'])
                
                st.markdown(f"**{t('ui.water_requirements')}**")
                st.write(recommendation['water_req'])
            
            with col2:
                st.markdown(f"**{t('ui.fertilizer_recommendations')}**")
                st.write(recommendation['fertilizer'])
                
                st.markdown(f"**{t('ui.harvest_timeline')}**")
                st.write(recommendation['harvest_time'])
            
            st.markdown(f"#### {t('ui.market_insights')}")
            st.success(f"{t('ui.current_market_price')}: {recommendation['market_price']} per kg")
            st.write(f"{t('ui.demand_trend')}: {recommendation['demand_trend']}")
    
    else:
        st.info(t('ui.click_to_analyze'))

with tab3:
    st.markdown(f'<h2 class="sub-header">{t("ui.soil_analysis")}</h2>', unsafe_allow_html=True)
    
    # Load soil image with error handling
    try:
        soil_img = Image.open(f"assets/soil_types/{soil_type.lower()}.png")
        st.image(soil_img, caption=f"{soil_type} {t('ui.soil_type')}", use_container_width=True)
    except FileNotFoundError:
        st.warning("Soil image not found. Please run generate_images.py to create soil images.")
        # Create a simple colored placeholder
        soil_colors = {
            "clay": (180, 120, 80),
            "loam": (160, 100, 60),
            "sand": (220, 200, 160),
            "silt": (200, 180, 140)
        }
        color = soil_colors.get(soil_type.lower(), (200, 200, 200))
        placeholder = Image.new('RGB', (400, 300), color=color)
        draw = ImageDraw.Draw(placeholder)
        draw.text((150, 140), soil_type.upper(), fill=(255, 255, 255))
        st.image(placeholder, caption=f"{soil_type} {t('ui.soil_type')} (Placeholder)", use_container_width=True)
    
    col1, col2, col3 = st.columns(3)
    with col1: 
        st.markdown(f'<div class="weather-card"><div class="metric-label">{t("ui.ph_level")}</div><div class="metric-value">{soil_ph}</div></div>', unsafe_allow_html=True)
    with col2: 
        st.markdown(f'<div class="weather-card"><div class="metric-label">{t("ui.moisture")}</div><div class="metric-value">{soil_moisture}%</div></div>', unsafe_allow_html=True)
    with col3: 
        st.markdown(f'<div class="weather-card"><div class="metric-label">{t("ui.organic_matter")}</div><div class="metric-value">3.2%</div></div>', unsafe_allow_html=True)

with tab4:
    st.markdown(f'<h2 class="sub-header">{t("ui.weather_forecast")}</h2>', unsafe_allow_html=True)
    
    col1, col2, col3, col4 = st.columns(4)
    with col1: 
        st.markdown(f'<div class="weather-card"><div class="metric-label">{t("ui.temperature")}</div><div class="metric-value">{temperature}┬░C</div></div>', unsafe_allow_html=True)
    with col2: 
        st.markdown(f'<div class="weather-card"><div class="metric-label">{t("ui.humidity")}</div><div class="metric-value">{humidity}%</div></div>', unsafe_allow_html=True)
    with col3: 
        st.markdown(f'<div class="weather-card"><div class="metric-label">{t("ui.rainfall")}</div><div class="metric-value">{rainfall} mm</div></div>', unsafe_allow_html=True)
    with col4: 
        st.markdown(f'<div class="weather-card"><div class="metric-label">{t("ui.wind_speed")}</div><div class="metric-value">12 km/h</div></div>', unsafe_allow_html=True)

# Footer
st.markdown(f"""
<div class="footer">
    <p>{t('ui.created_by')} <span class="team-name">{t('ui.team_name')}</span> {t('ui.for_sih')}</p>
    <p>VARUN AI - {t('ui.tagline')}</p>
</div>
""", unsafe_allow_html=True)
