import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from PIL import Image, ImageDraw
import time
from datetime import datetime, timedelta
import os

# Page configuration
st.set_page_config(
    page_title="VARUN AI Crop Recommendation",
    page_icon="üåæ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# ===== EMBEDDED LANGUAGE DATA =====
LANGUAGES = {
    'en': {
        'name': 'English',
        'direction': 'ltr',
        'states': {
            'Punjab': 'Punjab',
            'Haryana': 'Haryana', 
            'Uttar Pradesh': 'Uttar Pradesh',
            'Maharashtra': 'Maharashtra',
            'Karnataka': 'Karnataka',
            'Tamil Nadu': 'Tamil Nadu',
            'Andhra Pradesh': 'Andhra Pradesh',
            'Gujarat': 'Gujarat',
            'Odisha': 'Odisha',
            'Jharkhand': 'Jharkhand',
            'West Bengal': 'West Bengal',
            'Bihar': 'Bihar',
            'Select': 'Select Region'
        },
        'ui': {
            'app_name': 'VARUN AI',
            'tagline': 'Vikasit Adhunik Roopantaran ke liye Uttam Nirdesh',
            'farmer_details': 'Farmer Details',
            'full_name': 'Full Name',
            'region': 'Region',
            'farm_size': 'Farm Size (acres)',
            'soil_properties': 'Soil Properties',
            'soil_type': 'Soil Type',
            'soil_ph': 'Soil pH',
            'soil_moisture': 'Soil Moisture (%)',
            'nitrogen': 'Nitrogen (kg/ha)',
            'phosphorus': 'Phosphorus (kg/ha)',
            'potassium': 'Potassium (kg/ha)',
            'environmental_factors': 'Environmental Factors',
            'temperature': 'Temperature (¬∞C)',
            'rainfall': 'Annual Rainfall (mm)',
            'humidity': 'Humidity (%)',
            'analyze_button': 'Analyze & Recommend',
            'dashboard': 'Dashboard',
            'crop_recommendation': 'Crop Recommendation',
            'soil_analysis': 'Soil Analysis',
            'weather_forecast': 'Weather Forecast',
            'farm_overview': 'Farm Overview',
            'soil_nutrient_levels': 'Soil Nutrient Levels',
            'recommended_crop': 'Recommended Crop',
            'expected_yield': 'Expected Yield',
            'success_probability': 'Success Probability',
            'why_this_crop': 'Why this crop?',
            'planting_guide': 'Planting Guide',
            'best_planting_time': 'Best Planting Time',
            'water_requirements': 'Water Requirements',
            'fertilizer_recommendations': 'Fertilizer Recommendations',
            'harvest_timeline': 'Harvest Timeline',
            'market_insights': 'Market Insights',
            'current_market_price': 'Current market price',
            'demand_trend': 'Demand trend',
            'click_to_analyze': 'Click the button to get crop recommendations',
            'ph_level': 'pH Level',
            'moisture': 'Moisture',
            'organic_matter': 'Organic Matter',
            'wind_speed': 'Wind Speed',
            'created_by': 'Created with love by',
            'team_name': 'Team AgroNova',
            'for_sih': 'for SIH 2025',
            'language': 'Language',
            'select_language': 'Select Language',
            'not_specified': 'Not specified',
            'regional_preference': 'Regional Preference',
            'soil_type_match': 'Soil Type Match',
            'ph_suitability': 'pH Suitability',
            'temperature_suitability': 'Temperature Suitability',
            'rainfall_suitability': 'Rainfall Suitability',
            'nutrient_suitability': 'Nutrient Suitability',
            'alternative_options': 'Alternative Options',
            'detailed_factor_analysis': 'Detailed Factor Analysis',
            'suitability_analysis': 'Suitability Analysis for',
            'analysis_loading': 'Analyzing your farm data and generating recommendations...'
        },
        'crops': {
            'Wheat': 'Wheat',
            'Rice': 'Rice',
            'Maize': 'Maize',
            'Cotton': 'Cotton',
            'Soybean': 'Soybean',
            'Pulses': 'Pulses',
            'Sugarcane': 'Sugarcane',
            'Groundnut': 'Groundnut'
        },
        'reasons': {
            'highly_suitable': 'Highly suitable for {} region',
            'not_typical': 'Not typically grown in {}',
            'ideal_soil': 'Ideal for {} soil',
            'not_optimal_soil': 'Not optimal for {} soil (prefers {})',
            'optimal_ph': 'Optimal pH range ({}-{})',
            'ph_low': 'pH slightly low (ideal: {}-{})',
            'ph_high': 'pH slightly high (ideal: {}-{})',
            'optimal_temp': 'Optimal temperature range ({}-{}¬∞C)',
            'temp_low': 'Temperature slightly low (ideal: {}-{}¬∞C)',
            'temp_high': 'Temperature slightly high (ideal: {}-{}¬∞C)',
            'optimal_rain': 'Optimal rainfall ({}-{}mm)',
            'rain_low': 'Rainfall slightly low (ideal: {}-{}mm)',
            'rain_high': 'Rainfall slightly high (ideal: {}-{}mm)',
            'nitrogen_issue': 'Nitrogen level not optimal for {}',
            'phosphorus_issue': 'Phosphorus level not optimal for {}',
            'potassium_issue': 'Potassium level not optimal for {}'
        }
    },
    'hi': {
        'name': '‡§π‡§ø‡§Ç‡§¶‡•Ä',
        'direction': 'ltr',
        'states': {
            'Punjab': '‡§™‡§Ç‡§ú‡§æ‡§¨',
            'Haryana': '‡§π‡§∞‡§ø‡§Ø‡§æ‡§£‡§æ',
            'Uttar Pradesh': '‡§â‡§§‡•ç‡§§‡§∞ ‡§™‡•ç‡§∞‡§¶‡•á‡§∂',
            'Maharashtra': '‡§Æ‡§π‡§æ‡§∞‡§æ‡§∑‡•ç‡§ü‡•ç‡§∞',
            'Karnataka': '‡§ï‡§∞‡•ç‡§®‡§æ‡§ü‡§ï',
            'Tamil Nadu': '‡§§‡§Æ‡§ø‡§≤‡§®‡§æ‡§°‡•Å',
            'Andhra Pradesh': '‡§Ü‡§Ç‡§ß‡•ç‡§∞ ‡§™‡•ç‡§∞‡§¶‡•á‡§∂',
            'Gujarat': '‡§ó‡•Å‡§ú‡§∞‡§æ‡§§',
            'Odisha': '‡§ì‡§°‡§ø‡§∂‡§æ',
            'Jharkhand': '‡§ù‡§æ‡§∞‡§ñ‡§Ç‡§°',
            'West Bengal': '‡§™‡§∂‡•ç‡§ö‡§ø‡§Æ ‡§¨‡§Ç‡§ó‡§æ‡§≤',
            'Bihar': '‡§¨‡§ø‡§π‡§æ‡§∞',
            'Select': '‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§ö‡•Å‡§®‡•á‡§Ç'
        },
        'ui': {
            'app_name': 'VARUN AI',
            'tagline': '‡§µ‡§ø‡§ï‡§∏‡§ø‡§§ ‡§Ü‡§ß‡•Å‡§®‡§ø‡§ï ‡§∞‡•Ç‡§™‡§æ‡§Ç‡§§‡§∞‡§£ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§â‡§§‡•ç‡§§‡§Æ ‡§®‡§ø‡§∞‡•ç‡§¶‡•á‡§∂',
            'farmer_details': '‡§ï‡§ø‡§∏‡§æ‡§® ‡§µ‡§ø‡§µ‡§∞‡§£',
            'full_name': '‡§™‡•Ç‡§∞‡§æ ‡§®‡§æ‡§Æ',
            'region': '‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞',
            'farm_size': '‡§ñ‡•á‡§§ ‡§ï‡§æ ‡§Ü‡§ï‡§æ‡§∞ (‡§è‡§ï‡§°‡§º)',
            'soil_properties': '‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡•á ‡§ó‡•Å‡§£',
            'soil_type': '‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡§æ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞',
            'soil_ph': '‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡§æ pH',
            'soil_moisture': '‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡•Ä ‡§®‡§Æ‡•Ä (%)',
            'nitrogen': '‡§®‡§æ‡§á‡§ü‡•ç‡§∞‡•ã‡§ú‡§® (kg/ha)',
            'phosphorus': '‡§´‡•â‡§∏‡•ç‡§´‡•ã‡§∞‡§∏ (kg/ha)',
            'potassium': '‡§™‡•ã‡§ü‡•à‡§∂‡§ø‡§Ø‡§Æ (kg/ha)',
            'environmental_factors': '‡§™‡§∞‡•ç‡§Ø‡§æ‡§µ‡§∞‡§£‡•Ä‡§Ø ‡§ï‡§æ‡§∞‡§ï',
            'temperature': '‡§§‡§æ‡§™‡§Æ‡§æ‡§® (¬∞C)',
            'rainfall': '‡§µ‡§æ‡§∞‡•ç‡§∑‡§ø‡§ï ‡§µ‡§∞‡•ç‡§∑‡§æ (mm)',
            'humidity': '‡§Ü‡§∞‡•ç‡§¶‡•ç‡§∞‡§§‡§æ (%)',
            'analyze_button': '‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§∏‡§ø‡§´‡§æ‡§∞‡§ø‡§∂ ‡§ï‡§∞‡•á‡§Ç',
            'dashboard': '‡§°‡•à‡§∂‡§¨‡•ã‡§∞‡•ç‡§°',
            'crop_recommendation': '‡§´‡§∏‡§≤ ‡§∏‡§ø‡§´‡§æ‡§∞‡§ø‡§∂',
            'soil_analysis': '‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£',
            'weather_forecast': '‡§Æ‡•å‡§∏‡§Æ ‡§™‡•Ç‡§∞‡•ç‡§µ‡§æ‡§®‡•Å‡§Æ‡§æ‡§®',
            'farm_overview': '‡§ñ‡•á‡§§ ‡§ï‡§æ ‡§Ö‡§µ‡§≤‡•ã‡§ï‡§®',
            'soil_nutrient_levels': '‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡•á ‡§™‡•ã‡§∑‡§ï ‡§§‡§§‡•ç‡§µ‡•ã‡§Ç ‡§ï‡•á ‡§∏‡•ç‡§§‡§∞',
            'recommended_crop': '‡§∏‡§ø‡§´‡§æ‡§∞‡§ø‡§∂ ‡§ï‡•Ä ‡§ó‡§à ‡§´‡§∏‡§≤',
            'expected_yield': '‡§Ö‡§®‡•Å‡§Æ‡§æ‡§®‡§ø‡§§ ‡§â‡§™‡§ú',
            'success_probability': '‡§∏‡§´‡§≤‡§§‡§æ ‡§ï‡•Ä ‡§∏‡§Ç‡§≠‡§æ‡§µ‡§®‡§æ',
            'why_this_crop': '‡§Ø‡§π ‡§´‡§∏‡§≤ ‡§ï‡•ç‡§Ø‡•ã‡§Ç?',
            'planting_guide': '‡§∞‡•ã‡§™‡§£ ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§ø‡§ï‡§æ',
            'best_planting_time': '‡§∏‡§∞‡•ç‡§µ‡•ã‡§§‡•ç‡§§‡§Æ ‡§∞‡•ã‡§™‡§£ ‡§∏‡§Æ‡§Ø',
            'water_requirements': '‡§™‡§æ‡§®‡•Ä ‡§ï‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ‡§è‡§Ç',
            'fertilizer_recommendations': '‡§â‡§∞‡•ç‡§µ‡§∞‡§ï ‡§∏‡§ø‡§´‡§æ‡§∞‡§ø‡§∂‡•á‡§Ç',
            'harvest_timeline': '‡§´‡§∏‡§≤ ‡§ï‡§ü‡§æ‡§à ‡§ï‡•Ä ‡§∏‡§Æ‡§Ø‡§∏‡•Ä‡§Æ‡§æ',
            'market_insights': '‡§¨‡§æ‡§ú‡§æ‡§∞ ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä',
            'current_market_price': '‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§¨‡§æ‡§ú‡§æ‡§∞ ‡§Æ‡•Ç‡§≤‡•ç‡§Ø',
            'demand_trend': '‡§Æ‡§æ‡§Ç‡§ó ‡§ï‡•Ä ‡§™‡•ç‡§∞‡§µ‡•É‡§§‡•ç‡§§‡§ø',
            'click_to_analyze': '‡§´‡§∏‡§≤ ‡§∏‡§ø‡§´‡§æ‡§∞‡§ø‡§∂‡•á‡§Ç ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§¨‡§ü‡§® ‡§™‡§∞ ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞‡•á‡§Ç',
            'ph_level': 'pH ‡§∏‡•ç‡§§‡§∞',
            'moisture': '‡§®‡§Æ‡•Ä',
            'organic_matter': '‡§ï‡§æ‡§∞‡•ç‡§¨‡§®‡§ø‡§ï ‡§™‡§¶‡§æ‡§∞‡•ç‡§•',
            'wind_speed': '‡§π‡§µ‡§æ ‡§ï‡•Ä ‡§ó‡§§‡§ø',
            'created_by': '‡§™‡•ç‡§Ø‡§æ‡§∞ ‡§∏‡•á ‡§¨‡§®‡§æ‡§Ø‡§æ ‡§ó‡§Ø‡§æ',
            'team_name': '‡§ü‡•Ä‡§Æ ‡§è‡§ó‡•ç‡§∞‡•ã‡§®‡•ã‡§µ‡§æ',
            'for_sih': '‡§è‡§∏‡§Ü‡§à‡§è‡§ö 2025 ‡§ï‡•á ‡§≤‡§ø‡§è',
            'language': '‡§≠‡§æ‡§∑‡§æ',
            'select_language': '‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç',
            'not_specified': '‡§®‡§ø‡§∞‡•ç‡§¶‡§ø‡§∑‡•ç‡§ü ‡§®‡§π‡•Ä‡§Ç',
            'regional_preference': '‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞‡•Ä‡§Ø ‡§™‡•ç‡§∞‡§æ‡§•‡§Æ‡§ø‡§ï‡§§‡§æ',
            'soil_type_match': '‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ ‡§Æ‡§ø‡§≤‡§æ‡§®',
            'ph_suitability': 'pH ‡§â‡§™‡§Ø‡•Å‡§ï‡•ç‡§§‡§§‡§æ',
            'temperature_suitability': '‡§§‡§æ‡§™‡§Æ‡§æ‡§® ‡§â‡§™‡§Ø‡•Å‡§ï‡•ç‡§§‡§§‡§æ',
            'rainfall_suitability': '‡§µ‡§∞‡•ç‡§∑‡§æ ‡§â‡§™‡§Ø‡•Å‡§ï‡•ç‡§§‡§§‡§æ',
            'nutrient_suitability': '‡§™‡•ã‡§∑‡§ï ‡§§‡§§‡•ç‡§µ ‡§â‡§™‡§Ø‡•Å‡§ï‡•ç‡§§‡§§‡§æ',
            'alternative_options': '‡§µ‡•à‡§ï‡§≤‡•ç‡§™‡§ø‡§ï ‡§µ‡§ø‡§ï‡§≤‡•ç‡§™',
            'detailed_factor_analysis': '‡§µ‡§ø‡§∏‡•ç‡§§‡•É‡§§ ‡§ï‡§æ‡§∞‡§ï ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£',
            'suitability_analysis': '‡§ï‡•á ‡§≤‡§ø‡§è ‡§â‡§™‡§Ø‡•Å‡§ï‡•ç‡§§‡§§‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£',
            'analysis_loading': '‡§Ü‡§™‡§ï‡•á ‡§´‡§æ‡§∞‡•ç‡§Æ ‡§°‡•á‡§ü‡§æ ‡§ï‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§î‡§∞ ‡§∏‡§ø‡§´‡§æ‡§∞‡§ø‡§∂‡•á‡§Ç ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§ï‡•Ä ‡§ú‡§æ ‡§∞‡§π‡•Ä ‡§π‡•à‡§Ç...'
        },
        'crops': {
            'Wheat': '‡§ó‡•á‡§π‡•Ç‡§Ç',
            'Rice': '‡§ö‡§æ‡§µ‡§≤',
            'Maize': '‡§Æ‡§ï‡•ç‡§ï‡§æ',
            'Cotton': '‡§ï‡§™‡§æ‡§∏',
            'Soybean': '‡§∏‡•ã‡§Ø‡§æ‡§¨‡•Ä‡§®',
            'Pulses': '‡§¶‡§≤‡§π‡§®',
            'Sugarcane': '‡§ó‡§®‡•ç‡§®‡§æ',
            'Groundnut': '‡§Æ‡•Ç‡§Ç‡§ó‡§´‡§≤‡•Ä'
        },
        'reasons': {
            'highly_suitable': '{} ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§§‡•ç‡§Ø‡§ß‡§ø‡§ï ‡§â‡§™‡§Ø‡•Å‡§ï‡•ç‡§§',
            'not_typical': '{} ‡§Æ‡•á‡§Ç ‡§Ü‡§Æ‡§§‡•å‡§∞ ‡§™‡§∞ ‡§®‡§π‡•Ä‡§Ç ‡§â‡§ó‡§æ‡§Ø‡§æ ‡§ú‡§æ‡§§‡§æ',
            'ideal_soil': '{} ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ü‡§¶‡§∞‡•ç‡§∂',
            'not_optimal_soil': '{} ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è ‡§á‡§∑‡•ç‡§ü‡§§‡§Æ ‡§®‡§π‡•Ä‡§Ç (‡§™‡§∏‡§Ç‡§¶ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à {})',
            'optimal_ph': '‡§á‡§∑‡•ç‡§ü‡§§‡§Æ pH ‡§∏‡•Ä‡§Æ‡§æ ({}-{})',
            'ph_low': 'pH ‡§•‡•ã‡§°‡§º‡§æ ‡§ï‡§Æ (‡§Ü‡§¶‡§∞‡•ç‡§∂: {}-{})',
            'ph_high': 'pH ‡§•‡•ã‡§°‡§º‡§æ ‡§Ö‡§ß‡§ø‡§ï (‡§Ü‡§¶‡§∞‡•ç‡§∂: {}-{})',
            'optimal_temp': '‡§á‡§∑‡•ç‡§ü‡§§‡§Æ ‡§§‡§æ‡§™‡§Æ‡§æ‡§® ‡§∏‡•Ä‡§Æ‡§æ ({}-{}¬∞C)',
            'temp_low': '‡§§‡§æ‡§™‡§Æ‡§æ‡§® ‡§•‡•ã‡§°‡§º‡§æ ‡§ï‡§Æ (‡§Ü‡§¶‡§∞‡•ç‡§∂: {}-{}¬∞C)',
            'temp_high': '‡§§‡§æ‡§™‡§Æ‡§æ‡§® ‡§•‡•ã‡§°‡§º‡§æ ‡§Ö‡§ß‡§ø‡§ï (‡§Ü‡§¶‡§∞‡•ç‡§∂: {}-{}¬∞C)',
            'optimal_rain': '‡§á‡§∑‡•ç‡§ü‡§§‡§Æ ‡§µ‡§∞‡•ç‡§∑‡§æ ({}-{}mm)',
            'rain_low': '‡§µ‡§∞‡•ç‡§∑‡§æ ‡§•‡•ã‡§°‡§º‡•Ä ‡§ï‡§Æ (‡§Ü‡§¶‡§∞‡•ç‡§∂: {}-{}mm)',
            'rain_high': '‡§µ‡§∞‡•ç‡§∑‡§æ ‡§•‡•ã‡§°‡§º‡•Ä ‡§Ö‡§ß‡§ø‡§ï (‡§Ü‡§¶‡§∞‡•ç‡§∂: {}-{}mm)',
            'nitrogen_issue': '{} ‡§ï‡•á ‡§≤‡§ø‡§è ‡§®‡§æ‡§á‡§ü‡•ç‡§∞‡•ã‡§ú‡§® ‡§∏‡•ç‡§§‡§∞ ‡§á‡§∑‡•ç‡§ü‡§§‡§Æ ‡§®‡§π‡•Ä‡§Ç',
            'phosphorus_issue': '{} ‡§ï‡•á ‡§≤‡§ø‡§è ‡§´‡•â‡§∏‡•ç‡§´‡•ã‡§∞‡§∏ ‡§∏‡•ç‡§§‡§∞ ‡§á‡§∑‡•ç‡§ü‡§§‡§Æ ‡§®‡§π‡•Ä‡§Ç',
            'potassium_issue': '{} ‡§ï‡•á ‡§≤‡§ø‡§è ‡§™‡•ã‡§ü‡•à‡§∂‡§ø‡§Ø‡§Æ ‡§∏‡•ç‡§§‡§∞ ‡§á‡§∑‡•ç‡§ü‡§§‡§Æ ‡§®‡§π‡•Ä‡§Ç'
        }
    },
    'or': {
        'name': '‡¨ì‡¨°‡¨ø‡¨Ü',
        'direction': 'ltr',
        'states': {
            'Punjab': '‡¨™‡¨û‡≠ç‡¨ú‡¨æ‡¨¨',
            'Haryana': '‡¨π‡¨∞‡¨ø‡≠ü‡¨æ‡¨£‡¨æ',
            'Uttar Pradesh': '‡¨â‡¨§‡≠ç‡¨§‡¨∞ ‡¨™‡≠ç‡¨∞‡¨¶‡≠á‡¨∂',
            'Maharashtra': '‡¨Æ‡¨π‡¨æ‡¨∞‡¨æ‡¨∑‡≠ç‡¨ü‡≠ç‡¨∞',
            'Karnataka': '‡¨ï‡¨∞‡≠ç‡¨£‡¨æ‡¨ü‡¨ï',
            'Tamil Nadu': '‡¨§‡¨æ‡¨Æ‡¨ø‡¨≤‡¨®‡¨æ‡¨°‡≠Å',
            'Andhra Pradesh': '‡¨Ü‡¨®‡≠ç‡¨ß‡≠ç‡¨∞ ‡¨™‡≠ç‡¨∞‡¨¶‡≠á‡¨∂',
            'Gujarat': '‡¨ó‡≠Å‡¨ú‡¨∞‡¨æ‡¨ü',
            'Odisha': '‡¨ì‡¨°‡¨ø‡¨∂‡¨æ',
            'Jharkhand': '‡¨ù‡¨æ‡¨°‡¨ñ‡¨£‡≠ç‡¨°',
            'West Bengal': '‡¨™‡¨∂‡≠ç‡¨ö‡¨ø‡¨Æ ‡¨¨‡¨ô‡≠ç‡¨ó',
            'Bihar': '‡¨¨‡¨ø‡¨π‡¨æ‡¨∞',
            'Select': '‡¨Ö‡¨û‡≠ç‡¨ö‡¨≥ ‡¨ö‡≠ü‡¨® ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å'
        },
        'ui': {
            'app_name': 'VARUN AI',
            'tagline': '‡¨¨‡¨ø‡¨ï‡¨∂‡¨ø‡¨§ ‡¨Ü‡¨ß‡≠Å‡¨®‡¨ø‡¨ï ‡¨∞‡≠Ç‡¨™‡¨æ‡¨®‡≠ç‡¨§‡¨∞‡¨£ ‡¨™‡¨æ‡¨á‡¨Å ‡¨â‡¨§‡≠ç‡¨§‡¨Æ ‡¨®‡¨ø‡¨∞‡≠ç‡¨¶‡≠á‡¨∂',
            'farmer_details': '‡¨ï‡≠É‡¨∑‡¨ï‡¨∞ ‡¨¨‡¨ø‡¨¨‡¨∞‡¨£‡≠Ä',
            'full_name': '‡¨™‡≠Ç‡¨∞‡¨æ ‡¨®‡¨æ‡¨Æ',
            'region': '‡¨Ö‡¨û‡≠ç‡¨ö‡¨≥',
            'farm_size': '‡¨ö‡¨æ‡¨∑ ‡¨ú‡¨Æ‡¨ø‡¨∞ ‡¨Ü‡¨ï‡¨æ‡¨∞ (‡¨è‡¨ï‡¨∞)',
            'soil_properties': '‡¨Æ‡≠É‡¨§‡≠ç‡¨§‡¨ø‡¨ï‡¨æ‡¨∞ ‡¨ó‡≠Å‡¨£',
            'soil_type': '‡¨Æ‡≠É‡¨§‡≠ç‡¨§‡¨ø‡¨ï‡¨æ‡¨∞ ‡¨™‡≠ç‡¨∞‡¨ï‡¨æ‡¨∞',
            'soil_ph': '‡¨Æ‡≠É‡¨§‡≠ç‡¨§‡¨ø‡¨ï‡¨æ‡¨∞ pH',
            'soil_moisture': '‡¨Æ‡≠É‡¨§‡≠ç‡¨§‡¨ø‡¨ï‡¨æ‡¨∞ ‡¨Ü‡¨∞‡≠ç‡¨¶‡≠ç‡¨∞‡¨§‡¨æ (%)',
            'nitrogen': '‡¨®‡¨æ‡¨á‡¨ü‡≠ç‡¨∞‡≠ã‡¨ú‡≠á‡¨®‡≠ç (kg/ha)',
            'phosphorus': '‡¨´‡¨∏‡¨´‡¨∞‡¨∏‡≠ç (kg/ha)',
            'potassium': '‡¨™‡¨ü‡¨æ‡¨∏‡¨ø‡¨Ö‡¨Æ‡≠ç (kg/ha)',
            'environmental_factors': '‡¨™‡¨∞‡¨ø‡¨¨‡≠á‡¨∂‡¨ó‡¨§ ‡¨ï‡¨æ‡¨∞‡¨ï',
            'temperature': '‡¨§‡¨æ‡¨™‡¨Æ‡¨æ‡¨§‡≠ç‡¨∞‡¨æ (¬∞C)',
            'rainfall': '‡¨¨‡¨æ‡¨∞‡≠ç‡¨∑‡¨ø‡¨ï ‡¨¨‡¨∞‡≠ç‡¨∑‡¨æ (mm)',
            'humidity': '‡¨Ü‡¨∞‡≠ç‡¨¶‡≠ç‡¨∞‡¨§‡¨æ (%)',
            'analyze_button': '‡¨¨‡¨ø‡¨∂‡≠ç‡¨≥‡≠á‡¨∑‡¨£ ‡¨ï‡¨∞ ‡¨è‡¨¨‡¨Ç ‡¨™‡¨∞‡¨æ‡¨Æ‡¨∞‡≠ç‡¨∂ ‡¨¶‡¨ø‡¨Ö',
            'dashboard': '‡¨°‡≠ç‡≠ü‡¨æ‡¨∏‡¨¨‡≠ã‡¨∞‡≠ç‡¨°',
            'crop_recommendation': '‡¨´‡¨∏‡¨≤ ‡¨™‡¨∞‡¨æ‡¨Æ‡¨∞‡≠ç‡¨∂',
            'soil_analysis': '‡¨Æ‡≠É‡¨§‡≠ç‡¨§‡¨ø‡¨ï‡¨æ ‡¨¨‡¨ø‡¨∂‡≠ç‡¨≥‡≠á‡¨∑‡¨£',
            'weather_forecast': '‡¨™‡¨æ‡¨£‡¨ø‡¨™‡¨æ‡¨ó ‡¨™‡≠Ç‡¨∞‡≠ç‡¨¨‡¨æ‡¨®‡≠Å‡¨Æ‡¨æ‡¨®',
            'farm_overview': '‡¨ö‡¨æ‡¨∑ ‡¨ú‡¨Æ‡¨ø‡¨∞ ‡¨∏‡¨Æ‡≠Ä‡¨ï‡≠ç‡¨∑‡¨æ',
            'soil_nutrient_levels': '‡¨Æ‡≠É‡¨§‡≠ç‡¨§‡¨ø‡¨ï‡¨æ‡¨∞ ‡¨™‡≠ã‡¨∑‡¨ï ‡¨§‡¨§‡≠ç‡¨§‡≠ç‡≠±‡¨∞ ‡¨∏‡≠ç‡¨§‡¨∞',
            'recommended_crop': '‡¨™‡¨∞‡¨æ‡¨Æ‡¨∞‡≠ç‡¨∂‡¨ø‡¨§ ‡¨´‡¨∏‡¨≤',
            'expected_yield': '‡¨Ü‡¨∂‡¨æ‡¨ï‡≠É‡¨§ ‡¨â‡¨§‡≠ç‡¨™‡¨æ‡¨¶‡¨®',
            'success_probability': '‡¨∏‡¨´‡¨≥‡¨§‡¨æ‡¨∞ ‡¨∏‡¨Æ‡≠ç‡¨≠‡¨æ‡¨¨‡¨®‡¨æ',
            'why_this_crop': '‡¨è‡¨π‡¨ø ‡¨´‡¨∏‡¨≤ ‡¨ï‡¨æ‡¨π‡¨ø‡¨Å‡¨ï‡¨ø?',
            'planting_guide': '‡¨∞‡≠ã‡¨™‡¨£ ‡¨Æ‡¨æ‡¨∞‡≠ç‡¨ó‡¨¶‡¨∞‡≠ç‡¨∂‡¨ø‡¨ï‡¨æ',
            'best_planting_time': '‡¨∏‡¨∞‡≠ç‡¨¨‡≠ã‡¨§‡≠ç‡¨§‡¨Æ ‡¨∞‡≠ã‡¨™‡¨£ ‡¨∏‡¨Æ‡≠ü',
            'water_requirements': '‡¨ú‡¨≥ ‡¨Ü‡¨¨‡¨∂‡≠ç‡≠ü‡¨ï‡¨§‡¨æ',
            'fertilizer_recommendations': '‡¨∏‡¨æ‡¨∞ ‡¨™‡¨∞‡¨æ‡¨Æ‡¨∞‡≠ç‡¨∂',
            'harvest_timeline': '‡¨´‡¨∏‡¨≤ ‡¨ï‡¨ü‡¨æ‡¨á ‡¨∏‡¨Æ‡≠ü‡¨∏‡≠Ä‡¨û‡¨æ',
            'market_insights': '‡¨¨‡¨ú‡¨æ‡¨∞‡¨∞ ‡¨Ö‡¨®‡≠ç‡¨§‡¨∞‡≠ç‡¨¶‡≠É‡¨∑‡≠ç‡¨ü‡¨ø',
            'current_market_price': '‡¨¨‡¨∞‡≠ç‡¨§‡≠ç‡¨§‡¨Æ‡¨æ‡¨®‡¨∞ ‡¨¨‡¨ú‡¨æ‡¨∞ ‡¨Æ‡≠Ç‡¨≤‡≠ç‡≠ü',
            'demand_trend': '‡¨ö‡¨æ‡¨π‡¨ø‡¨¶‡¨æ ‡¨™‡≠ç‡¨∞‡¨¨‡≠É‡¨§‡≠ç‡¨§‡¨ø',
            'click_to_analyze': '‡¨´‡¨∏‡¨≤ ‡¨™‡¨∞‡¨æ‡¨Æ‡¨∞‡≠ç‡¨∂ ‡¨™‡¨æ‡¨á‡¨¨‡¨æ ‡¨™‡¨æ‡¨á‡¨Å ‡¨¨‡¨ü‡¨®‡≠ç ‡¨¶‡¨¨‡¨æ‡¨®‡≠ç‡¨§‡≠Å',
            'ph_level': 'pH ‡¨∏‡≠ç‡¨§‡¨∞',
            'moisture': '‡¨Ü‡¨∞‡≠ç‡¨¶‡≠ç‡¨∞‡¨§‡¨æ',
            'organic_matter': '‡¨ú‡≠à‡¨¨‡¨ø‡¨ï ‡¨™‡¨¶‡¨æ‡¨∞‡≠ç‡¨•',
            'wind_speed': '‡¨™‡¨¨‡¨®‡¨∞ ‡¨ó‡¨§‡¨ø',
            'created_by': '‡¨≠‡¨æ‡¨≤‡≠ã‡¨¨‡¨æ‡¨∏‡¨æ ‡¨ï‡¨∞‡¨ø ‡¨§‡¨ø‡¨Ü‡¨∞‡¨ø ‡¨ï‡¨∞‡¨æ‡¨Ø‡¨æ‡¨á‡¨õ‡¨ø',
            'team_name': '‡¨¶‡¨≥ ‡¨Ü‡¨ó‡≠ç‡¨∞‡≠ã‡¨®‡≠ã‡¨≠‡¨æ',
            'for_sih': 'SIH 2025 ‡¨™‡¨æ‡¨á‡¨Å',
            'language': '‡¨≠‡¨æ‡¨∑‡¨æ',
            'select_language': '‡¨≠‡¨æ‡¨∑‡¨æ ‡¨ö‡≠ü‡¨® ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å',
            'not_specified': '‡¨®‡¨ø‡¨∞‡≠ç‡¨¶‡≠ç‡¨¶‡¨ø‡¨∑‡≠ç‡¨ü ‡¨®‡≠Å‡¨π‡≠á‡¨Å',
            'regional_preference': '‡¨ï‡≠ç‡¨∑‡≠á‡¨§‡≠ç‡¨∞‡≠Ä‡≠ü ‡¨™‡¨∏‡¨®‡≠ç‡¨¶',
            'soil_type_match': '‡¨Æ‡¨æ‡¨ü‡¨ø ‡¨™‡≠ç‡¨∞‡¨ï‡¨æ‡¨∞ ‡¨Æ‡≠á‡¨≥',
            'ph_suitability': 'pH ‡¨â‡¨™‡¨Ø‡≠Å‡¨ï‡≠ç‡¨§‡¨§‡¨æ',
            'temperature_suitability': '‡¨§‡¨æ‡¨™‡¨Æ‡¨æ‡¨§‡≠ç‡¨∞‡¨æ ‡¨â‡¨™‡¨Ø‡≠Å‡¨ï‡≠ç‡¨§‡¨§‡¨æ',
            'rainfall_suitability': '‡¨¨‡¨∞‡≠ç‡¨∑‡¨æ ‡¨â‡¨™‡¨Ø‡≠Å‡¨ï‡≠ç‡¨§‡¨§‡¨æ',
            'nutrient_suitability': '‡¨™‡≠ã‡¨∑‡¨ï ‡¨â‡¨™‡¨Ø‡≠Å‡¨ï‡≠ç‡¨§‡¨§‡¨æ',
            'alternative_options': '‡¨¨‡¨ø‡¨ï‡¨≥‡≠ç‡¨™ ‡¨¨‡¨ø‡¨ï‡¨≥‡≠ç‡¨™',
            'detailed_factor_analysis': '‡¨¨‡¨ø‡¨∏‡≠ç‡¨§‡≠É‡¨§ ‡¨ï‡¨æ‡¨∞‡¨ï ‡¨¨‡¨ø‡¨∂‡≠ç‡¨≥‡≠á‡¨∑‡¨£',
            'suitability_analysis': '‡¨™‡¨æ‡¨á‡¨Å ‡¨â‡¨™‡¨Ø‡≠Å‡¨ï‡≠ç‡¨§‡¨§‡¨æ ‡¨¨‡¨ø‡¨∂‡≠ç‡¨≥‡≠á‡¨∑‡¨£',
            'analysis_loading': '‡¨Ü‡¨™‡¨£‡¨ô‡≠ç‡¨ï ‡¨´‡¨æ‡¨∞‡≠ç‡¨Æ ‡¨§‡¨•‡≠ç‡≠ü ‡¨¨‡¨ø‡¨∂‡≠ç‡¨≥‡≠á‡¨∑‡¨£ ‡¨è‡¨¨‡¨Ç ‡¨™‡¨∞‡¨æ‡¨Æ‡¨∞‡≠ç‡¨∂ ‡¨™‡≠ç‡¨∞‡¨∏‡≠ç‡¨§‡≠Å‡¨§ ‡¨ï‡¨∞‡¨æ‡¨Ø‡¨æ‡¨â‡¨õ‡¨ø...'
        },
        'crops': {
            'Wheat': '‡¨ó‡¨π‡¨Æ',
            'Rice': '‡¨ö‡¨æ‡¨â‡¨≥',
            'Maize': '‡¨Æ‡¨ï‡¨æ',
            'Cotton': '‡¨ï‡¨™‡¨æ‡¨π',
            'Soybean': '‡¨∏‡≠ã‡≠ü‡¨æ‡¨¨‡¨ø‡¨®',
            'Pulses': '‡¨°‡¨æ‡¨≤‡¨ø',
            'Sugarcane': '‡¨Ü‡¨ñ‡≠Å',
            'Groundnut': '‡¨ö‡¨ø‡¨®‡¨æ‡¨¨‡¨æ‡¨¶‡¨æ‡¨Æ'
        },
        'reasons': {
            'highly_suitable': '{} ‡¨Ö‡¨û‡≠ç‡¨ö‡¨≥ ‡¨™‡¨æ‡¨á‡¨Å ‡¨Ö‡¨§‡≠ç‡≠ü‡¨ß‡¨ø‡¨ï ‡¨â‡¨™‡¨Ø‡≠Å‡¨ï‡≠ç‡¨§',
            'not_typical': '{} ‡¨∞‡≠á ‡¨∏‡¨æ‡¨ß‡¨æ‡¨∞‡¨£‡¨§‡¨É ‡¨ö‡¨æ‡¨∑ ‡¨ï‡¨∞‡¨æ‡¨Ø‡¨æ‡¨è ‡¨®‡¨æ‡¨π‡¨ø‡¨Å',
            'ideal_soil': '{} ‡¨Æ‡¨æ‡¨ü‡¨ø ‡¨™‡¨æ‡¨á‡¨Å ‡¨Ü‡¨¶‡¨∞‡≠ç‡¨∂',
            'not_optimal_soil': '{} ‡¨Æ‡¨æ‡¨ü‡¨ø ‡¨™‡¨æ‡¨á‡¨Å ‡¨â‡¨§‡≠ç‡¨ï‡≠É‡¨∑‡≠ç‡¨ü ‡¨®‡≠Å‡¨π‡≠á‡¨Å (‡¨™‡¨∏‡¨®‡≠ç‡¨¶ ‡¨ï‡¨∞‡≠á {})',
            'optimal_ph': '‡¨â‡¨§‡≠ç‡¨ï‡≠É‡¨∑‡≠ç‡¨ü pH ‡¨∏‡≠Ä‡¨Æ‡¨æ ({}-{})',
            'ph_low': 'pH ‡¨ü‡¨ø‡¨ï‡≠á ‡¨ï‡¨Æ‡≠ç (‡¨Ü‡¨¶‡¨∞‡≠ç‡¨∂: {}-{})',
            'ph_high': 'pH ‡¨ü‡¨ø‡¨ï‡≠á ‡¨Ö‡¨ß‡¨ø‡¨ï (‡¨Ü‡¨¶‡¨∞‡≠ç‡¨∂: {}-{})',
            'optimal_temp': '‡¨â‡¨§‡≠ç‡¨ï‡≠É‡¨∑‡≠ç‡¨ü ‡¨§‡¨æ‡¨™‡¨Æ‡¨æ‡¨§‡≠ç‡¨∞‡¨æ ‡¨∏‡≠Ä‡¨Æ‡¨æ ({}-{}¬∞C)',
            'temp_low': '‡¨§‡¨æ‡¨™‡¨Æ‡¨æ‡¨§‡≠ç‡¨∞‡¨æ ‡¨ü‡¨ø‡¨ï‡≠á ‡¨ï‡¨Æ‡≠ç (‡¨Ü‡¨¶‡¨∞‡≠ç‡¨∂: {}-{}¬∞C)',
            'temp_high': '‡¨§‡¨æ‡¨™‡¨Æ‡¨æ‡¨§‡≠ç‡¨∞‡¨æ ‡¨ü‡¨ø‡¨ï‡≠á ‡¨Ö‡¨ß‡¨ø‡¨ï (‡¨Ü‡¨¶‡¨∞‡≠ç‡¨∂: {}-{}¬∞C)',
            'optimal_rain': '‡¨â‡¨§‡≠ç‡¨ï‡≠É‡¨∑‡≠ç‡¨ü ‡¨¨‡¨∞‡≠ç‡¨∑‡¨æ ({}-{}mm)',
            'rain_low': '‡¨¨‡¨∞‡≠ç‡¨∑‡¨æ ‡¨ü‡¨ø‡¨ï‡≠á ‡¨ï‡¨Æ‡≠ç (‡¨Ü‡¨¶‡¨∞‡≠ç‡¨∂: {}-{}mm)',
            'rain_high': '‡¨¨‡¨∞‡≠ç‡¨∑‡¨æ ‡¨ü‡¨ø‡¨ï‡≠á ‡¨Ö‡¨ß‡¨ø‡¨ï (‡¨Ü‡¨¶‡¨∞‡≠ç‡¨∂: {}-{}mm)',
            'nitrogen_issue': '{} ‡¨™‡¨æ‡¨á‡¨Å ‡¨®‡¨æ‡¨á‡¨ü‡≠ç‡¨∞‡≠ã‡¨ú‡≠á‡¨®‡≠ç ‡¨∏‡≠ç‡¨§‡¨∞ ‡¨â‡¨§‡≠ç‡¨ï‡≠É‡¨∑‡≠ç‡¨ü ‡¨®‡≠Å‡¨π‡≠á‡¨Å',
            'phosphorus_issue': '{} ‡¨™‡¨æ‡¨á‡¨Å ‡¨´‡¨∏‡¨´‡¨∞‡¨∏‡≠ç ‡¨∏‡≠ç‡¨§‡¨∞ ‡¨â‡¨§‡≠ç‡¨ï‡≠É‡¨∑‡≠ç‡¨ü ‡¨®‡≠Å‡¨π‡≠á‡¨Å',
            'potassium_issue': '{} ‡¨™‡¨æ‡¨á‡¨Å ‡¨™‡¨ü‡¨æ‡¨∏‡¨ø‡¨Ö‡¨Æ‡≠ç ‡¨∏‡≠ç‡¨§‡¨∞ ‡¨â‡¨§‡≠ç‡¨ï‡≠É‡¨∑‡≠ç‡¨ü ‡¨®‡≠Å‡¨π‡≠á‡¨Å'
        }
    },
    'ta': {
        'name': '‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç',
        'direction': 'ltr',
        'states': {
            'Punjab': '‡Æ™‡Æû‡Øç‡Æö‡Ææ‡Æ™‡Øç',
            'Haryana': '‡Æπ‡Æ∞‡Æø‡ÆØ‡Ææ‡Æ©‡Ææ',
            'Uttar Pradesh': '‡Æâ‡Æ§‡Øç‡Æ§‡Æ∞‡Æ™‡Øç ‡Æ™‡Æø‡Æ∞‡Æ§‡Øá‡Æö‡ÆÆ‡Øç',
            'Maharashtra': '‡ÆÆ‡Æï‡Ææ‡Æ∞‡Ææ‡Æ∑‡Øç‡Æü‡Æø‡Æ∞‡Ææ',
            'Karnataka': '‡Æï‡Æ∞‡Øç‡Æ®‡Ææ‡Æü‡Æï‡Ææ',
            'Tamil Nadu': '‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç‡Æ®‡Ææ‡Æü‡ØÅ',
            'Andhra Pradesh': '‡ÆÜ‡Æ®‡Øç‡Æ§‡Æø‡Æ∞‡Æ™‡Øç ‡Æ™‡Æø‡Æ∞‡Æ§‡Øá‡Æö‡ÆÆ‡Øç',
            'Gujarat': '‡Æï‡ØÅ‡Æú‡Æ∞‡Ææ‡Æ§‡Øç',
            'Odisha': '‡Æí‡Æü‡Æø‡Æö‡Ææ',
            'Jharkhand': '‡Æú‡Ææ‡Æ∞‡Øç‡Æï‡Æ£‡Øç‡Æü‡Øç',
            'West Bengal': '‡ÆÆ‡Øá‡Æ±‡Øç‡Æï‡ØÅ ‡Æµ‡Æô‡Øç‡Æï‡Ææ‡Æ≥‡ÆÆ‡Øç',
            'Bihar': '‡Æ™‡ØÄ‡Æï‡Ææ‡Æ∞‡Øç',
            'Select': '‡Æ™‡Æø‡Æ∞‡Ææ‡Æ®‡Øç‡Æ§‡Æø‡ÆØ‡Æ§‡Øç‡Æ§‡Øà‡Æ§‡Øç ‡Æ§‡Øá‡Æ∞‡Øç‡Æ®‡Øç‡Æ§‡ØÜ‡Æü‡ØÅ‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç'
        },
        'ui': {
            'app_name': 'VARUN AI',
            'tagline': '‡ÆÆ‡Øá‡ÆÆ‡Øç‡Æ™‡Æü‡Øç‡Æü ‡Æ®‡Æµ‡ØÄ‡Æ© ‡ÆÆ‡Ææ‡Æ±‡Øç‡Æ±‡Æ§‡Øç‡Æ§‡Æø‡Æ±‡Øç‡Æï‡Ææ‡Æ© ‡Æö‡Æø‡Æ±‡Æ®‡Øç‡Æ§ ‡Æµ‡Æ¥‡Æø‡Æï‡Ææ‡Æü‡Øç‡Æü‡Æø',
            'farmer_details': '‡Æµ‡Æø‡Æµ‡Æö‡Ææ‡ÆØ‡Æø ‡Æµ‡Æø‡Æµ‡Æ∞‡Æô‡Øç‡Æï‡Æ≥‡Øç',
            'full_name': '‡ÆÆ‡ØÅ‡Æ¥‡ØÅ ‡Æ™‡ØÜ‡ÆØ‡Æ∞‡Øç',
            'region': '‡Æ™‡Æø‡Æ∞‡Ææ‡Æ®‡Øç‡Æ§‡Æø‡ÆØ‡ÆÆ‡Øç',
            'farm_size': '‡Æµ‡Æø‡Æµ‡Æö‡Ææ‡ÆØ ‡Æ®‡Æø‡Æ≤ ‡ÆÖ‡Æ≥‡Æµ‡ØÅ (‡Æè‡Æï‡Øç‡Æï‡Æ∞‡Øç)',
            'soil_properties': '‡ÆÆ‡Æ£‡Øç ‡Æ™‡Æ£‡Øç‡Æ™‡ØÅ‡Æï‡Æ≥‡Øç',
            'soil_type': '‡ÆÆ‡Æ£‡Øç ‡Æµ‡Æï‡Øà',
            'soil_ph': '‡ÆÆ‡Æ£‡Øç pH',
            'soil_moisture': '‡ÆÆ‡Æ£‡Øç ‡Æà‡Æ∞‡Æ™‡Øç‡Æ™‡Æ§‡ÆÆ‡Øç (%)',
            'nitrogen': '‡Æ®‡Øà‡Æü‡Øç‡Æ∞‡Æú‡Æ©‡Øç (kg/ha)',
            'phosphorus': '‡Æ™‡Ææ‡Æ∏‡Øç‡Æ™‡Æ∞‡Æ∏‡Øç (kg/ha)',
            'potassium': '‡Æ™‡Øä‡Æü‡Øç‡Æü‡Ææ‡Æö‡Æø‡ÆØ‡ÆÆ‡Øç (kg/ha)',
            'environmental_factors': '‡Æö‡ØÅ‡Æ±‡Øç‡Æ±‡ØÅ‡Æö‡Øç‡Æö‡ØÇ‡Æ¥‡Æ≤‡Øç ‡Æï‡Ææ‡Æ∞‡Æ£‡Æø‡Æï‡Æ≥‡Øç',
            'temperature': '‡Æµ‡ØÜ‡Æ™‡Øç‡Æ™‡Æ®‡Æø‡Æ≤‡Øà (¬∞C)',
            'rainfall': '‡ÆÜ‡Æ£‡Øç‡Æü‡ØÅ ‡ÆÆ‡Æ¥‡Øà (mm)',
            'humidity': '‡Æà‡Æ∞‡Æ™‡Øç‡Æ™‡Æ§‡ÆÆ‡Øç (%)',
            'analyze_button': '‡Æ™‡Æï‡ØÅ‡Æ™‡Øç‡Æ™‡Ææ‡ÆØ‡Øç‡Æµ‡ØÅ ‡Æö‡ØÜ‡ÆØ‡Øç‡Æ§‡ØÅ ‡Æ™‡Æ∞‡Æø‡Æ®‡Øç‡Æ§‡ØÅ‡Æ∞‡Øà‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç',
            'dashboard': '‡Æü‡Ææ‡Æ∑‡Øç‡Æ™‡Øã‡Æ∞‡Øç‡Æü‡ØÅ',
            'crop_recommendation': '‡Æ™‡ÆØ‡Æø‡Æ∞‡Øç ‡Æ™‡Æ∞‡Æø‡Æ®‡Øç‡Æ§‡ØÅ‡Æ∞‡Øà',
            'soil_analysis': '‡ÆÆ‡Æ£‡Øç ‡Æ™‡Æï‡ØÅ‡Æ™‡Øç‡Æ™‡Ææ‡ÆØ‡Øç‡Æµ‡ØÅ',
            'weather_forecast': '‡Æµ‡Ææ‡Æ©‡Æø‡Æ≤‡Øà ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ©‡Æ±‡Æø‡Æµ‡Æø‡Æ™‡Øç‡Æ™‡ØÅ',
            'farm_overview': '‡Æµ‡Æø‡Æµ‡Æö‡Ææ‡ÆØ ‡Æ®‡Æø‡Æ≤‡Øà ‡ÆÆ‡Øá‡Æ≤‡Øã‡Æü‡Øç‡Æü‡ÆÆ‡Øç',
            'soil_nutrient_levels': '‡ÆÆ‡Æ£‡Øç ‡Æä‡Æü‡Øç‡Æü‡Æö‡Øç‡Æö‡Æ§‡Øç‡Æ§‡ØÅ ‡ÆÖ‡Æ≥‡Æµ‡ØÅ‡Æï‡Æ≥‡Øç',
            'recommended_crop': '‡Æ™‡Æ∞‡Æø‡Æ®‡Øç‡Æ§‡ØÅ‡Æ∞‡Øà‡Æï‡Øç‡Æï‡Æ™‡Øç‡Æ™‡Æü‡Øç‡Æü ‡Æ™‡ÆØ‡Æø‡Æ∞‡Øç',
            'expected_yield': '‡Æé‡Æ§‡Æø‡Æ∞‡Øç‡Æ™‡Ææ‡Æ∞‡Øç‡Æï‡Øç‡Æï‡Æ™‡Øç‡Æ™‡Æü‡ØÅ‡ÆÆ‡Øç ‡Æµ‡Æø‡Æ≥‡Øà‡Æö‡Øç‡Æö‡Æ≤‡Øç',
            'success_probability': '‡Æµ‡ØÜ‡Æ±‡Øç‡Æ±‡Æø ‡Æ®‡Æø‡Æï‡Æ¥‡Øç‡Æ§‡Æï‡Æµ‡ØÅ',
            'why_this_crop': '‡Æá‡Æ®‡Øç‡Æ§ ‡Æ™‡ÆØ‡Æø‡Æ∞‡Øç ‡Æè‡Æ©‡Øç?',
            'planting_guide': '‡Æ®‡Æü‡Æµ‡ØÅ ‡Æµ‡Æ¥‡Æø‡Æï‡Ææ‡Æü‡Øç‡Æü‡Æø',
            'best_planting_time': '‡Æö‡Æø‡Æ±‡Æ®‡Øç‡Æ§ ‡Æ®‡Æü‡Æµ‡ØÅ ‡Æ®‡Øá‡Æ∞‡ÆÆ‡Øç',
            'water_requirements': '‡Æ®‡ØÄ‡Æ∞‡Øç ‡Æ§‡Øá‡Æµ‡Øà‡Æï‡Æ≥‡Øç',
            'fertilizer_recommendations': '‡Æâ‡Æ∞ ‡Æ™‡Æ∞‡Æø‡Æ®‡Øç‡Æ§‡ØÅ‡Æ∞‡Øà‡Æï‡Æ≥‡Øç',
            'harvest_timeline': '‡ÆÖ‡Æ±‡ØÅ‡Æµ‡Æü‡Øà ‡Æï‡Ææ‡Æ≤‡Æï‡Øç‡Æï‡ØÜ‡Æü‡ØÅ',
            'market_insights': '‡Æö‡Æ®‡Øç‡Æ§‡Øà ‡Æ®‡ØÅ‡Æ£‡Øç‡Æ£‡Æ±‡Æø‡Æµ‡ØÅ‡Æï‡Æ≥‡Øç',
            'current_market_price': '‡Æ§‡Æ±‡Øç‡Æ™‡Øã‡Æ§‡Øà‡ÆØ ‡Æö‡Æ®‡Øç‡Æ§‡Øà ‡Æµ‡Æø‡Æ≤‡Øà',
            'demand_trend': '‡Æ§‡Øá‡Æµ‡Øà‡Æ™‡Øç ‡Æ™‡Øã‡Æï‡Øç‡Æï‡ØÅ',
            'click_to_analyze': '‡Æ™‡ÆØ‡Æø‡Æ∞‡Øç ‡Æ™‡Æ∞‡Æø‡Æ®‡Øç‡Æ§‡ØÅ‡Æ∞‡Øà‡Æï‡Æ≥‡Øà‡Æ™‡Øç ‡Æ™‡ØÜ‡Æ± ‡Æ™‡Øä‡Æ§‡Øç‡Æ§‡Ææ‡Æ©‡Øà‡Æï‡Øç ‡Æï‡Æø‡Æ≥‡Æø‡Æï‡Øç ‡Æö‡ØÜ‡ÆØ‡Øç‡ÆØ‡Æµ‡ØÅ‡ÆÆ‡Øç',
            'ph_level': 'pH ‡ÆÖ‡Æ≥‡Æµ‡ØÅ',
            'moisture': '‡Æà‡Æ∞‡Æ™‡Øç‡Æ™‡Æ§‡ÆÆ‡Øç',
            'organic_matter': '‡Æï‡Æ∞‡Æø‡ÆÆ‡Æ™‡Øç ‡Æ™‡Øä‡Æ∞‡ØÅ‡Æ≥‡Øç',
            'wind_speed': '‡Æï‡Ææ‡Æ±‡Øç‡Æ±‡Æø‡Æ©‡Øç ‡Æµ‡Øá‡Æï‡ÆÆ‡Øç',
            'created_by': '‡ÆÖ‡Æ©‡Øç‡Æ™‡Øã‡Æü‡ØÅ ‡Æâ‡Æ∞‡ØÅ‡Æµ‡Ææ‡Æï‡Øç‡Æï‡Æ™‡Øç‡Æ™‡Æü‡Øç‡Æü‡Æ§‡ØÅ',
            'team_name': '‡Æü‡ØÄ‡ÆÆ‡Øç ‡ÆÖ‡Æï‡Øç‡Æ∞‡Øã‡Æ®‡Øã‡Æµ‡Ææ',
            'for_sih': 'SIH 2025‡Æï‡Øç‡Æï‡Ææ‡Æï',
            'language': '‡ÆÆ‡Øä‡Æ¥‡Æø',
            'select_language': '‡ÆÆ‡Øä‡Æ¥‡Æø‡ÆØ‡Øà‡Æ§‡Øç ‡Æ§‡Øá‡Æ∞‡Øç‡Æ®‡Øç‡Æ§‡ØÜ‡Æü‡ØÅ‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç',
            'not_specified': '‡Æï‡ØÅ‡Æ±‡Æø‡Æ™‡Øç‡Æ™‡Æø‡Æü‡Æ™‡Øç‡Æ™‡Æü‡Æµ‡Æø‡Æ≤‡Øç‡Æ≤‡Øà',
            'regional_preference': '‡Æ™‡Æø‡Æ∞‡Ææ‡Æ®‡Øç‡Æ§‡Æø‡ÆØ ‡Æµ‡Æø‡Æ∞‡ØÅ‡Æ™‡Øç‡Æ™‡ÆÆ‡Øç',
            'soil_type_match': '‡ÆÆ‡Æ£‡Øç ‡Æµ‡Æï‡Øà ‡Æ™‡Øä‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡ÆÆ‡Øç',
            'ph_suitability': 'pH ‡Æ™‡Øä‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡ÆÆ‡Øç',
            'temperature_suitability': '‡Æµ‡ØÜ‡Æ™‡Øç‡Æ™‡Æ®‡Æø‡Æ≤‡Øà ‡Æ™‡Øä‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡ÆÆ‡Øç',
            'rainfall_suitability': '‡ÆÆ‡Æ¥‡Øà ‡Æ™‡Øä‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡ÆÆ‡Øç',
            'nutrient_suitability': '‡Æä‡Æü‡Øç‡Æü‡Æö‡Øç‡Æö‡Æ§‡Øç‡Æ§‡ØÅ ‡Æ™‡Øä‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡ÆÆ‡Øç',
            'alternative_options': '‡ÆÆ‡Ææ‡Æ±‡Øç‡Æ±‡ØÅ ‡Æµ‡Æø‡Æ∞‡ØÅ‡Æ™‡Øç‡Æ™‡Æô‡Øç‡Æï‡Æ≥‡Øç',
            'detailed_factor_analysis': '‡Æµ‡Æø‡Æ∞‡Æø‡Æµ‡Ææ‡Æ© ‡Æï‡Ææ‡Æ∞‡Æ£‡Æø ‡Æ™‡Æï‡ØÅ‡Æ™‡Øç‡Æ™‡Ææ‡ÆØ‡Øç‡Æµ‡ØÅ',
            'suitability_analysis': '‡Æï‡Øç‡Æï‡Ææ‡Æ© ‡Æ™‡Øä‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡ÆÆ‡Øç ‡Æ™‡Æï‡ØÅ‡Æ™‡Øç‡Æ™‡Ææ‡ÆØ‡Øç‡Æµ‡ØÅ',
            'analysis_loading': '‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æ™‡Æ£‡Øç‡Æ£‡Øà ‡Æ§‡Æ∞‡Æµ‡Øà ‡Æ™‡Æï‡ØÅ‡Æ™‡Øç‡Æ™‡Ææ‡ÆØ‡Øç‡Æµ‡ØÅ ‡Æö‡ØÜ‡ÆØ‡Øç‡Æ§‡ØÅ ‡Æ™‡Æ∞‡Æø‡Æ®‡Øç‡Æ§‡ØÅ‡Æ∞‡Øà‡Æï‡Æ≥‡Øà ‡Æâ‡Æ∞‡ØÅ‡Æµ‡Ææ‡Æï‡Øç‡Æï‡ØÅ‡Æï‡Æø‡Æ±‡Øã‡ÆÆ‡Øç...'
        },
        'crops': {
            'Wheat': '‡Æï‡Øã‡Æ§‡ØÅ‡ÆÆ‡Øà',
            'Rice': '‡Æ®‡ØÜ‡Æ≤‡Øç',
            'Maize': '‡Æö‡Øã‡Æ≥‡ÆÆ‡Øç',
            'Cotton': '‡Æ™‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡Æø',
            'Soybean': '‡Æö‡Øã‡ÆØ‡Ææ',
            'Pulses': '‡Æ™‡Æ∞‡ØÅ‡Æ™‡Øç‡Æ™‡ØÅ ‡Æµ‡Æï‡Øà‡Æï‡Æ≥‡Øç',
            'Sugarcane': '‡Æï‡Æ∞‡ØÅ‡ÆÆ‡Øç‡Æ™‡ØÅ',
            'Groundnut': '‡Æ®‡Æø‡Æ≤‡Æï‡Øç‡Æï‡Æü‡Æ≤‡Øà'
        },
        'reasons': {
            'highly_suitable': '{} ‡Æ™‡Æø‡Æ∞‡Ææ‡Æ®‡Øç‡Æ§‡Æø‡ÆØ‡Æ§‡Øç‡Æ§‡Æø‡Æ±‡Øç‡Æï‡ØÅ ‡ÆÆ‡Æø‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç ‡Æ™‡Øä‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡ÆÆ‡Ææ‡Æ©‡Æ§‡ØÅ',
            'not_typical': '{} ‡Æá‡Æ≤‡Øç ‡Æ™‡Øä‡Æ§‡ØÅ‡Æµ‡Ææ‡Æï ‡Æ™‡ÆØ‡Æø‡Æ∞‡Æø‡Æü‡Æ™‡Øç‡Æ™‡Æü‡ØÅ‡Æµ‡Æ§‡Æø‡Æ≤‡Øç‡Æ≤‡Øà',
            'ideal_soil': '{} ‡ÆÆ‡Æ£‡Øç‡Æ£‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡Æè‡Æ±‡Øç‡Æ±‡Æ§‡ØÅ',
            'not_optimal_soil': '{} ‡ÆÆ‡Æ£‡Øç‡Æ£‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡Æâ‡Æï‡Æ®‡Øç‡Æ§‡Æ§‡Æ≤‡Øç‡Æ≤ (‡Æµ‡Æø‡Æ∞‡ØÅ‡ÆÆ‡Øç‡Æ™‡ØÅ‡Æï‡Æø‡Æ±‡Æ§‡ØÅ {})',
            'optimal_ph': '‡Æâ‡Æï‡Æ®‡Øç‡Æ§ pH ‡Æµ‡Æ∞‡ÆÆ‡Øç‡Æ™‡ØÅ ({}-{})',
            'ph_low': 'pH ‡Æö‡Æ±‡Øç‡Æ±‡ØÅ ‡Æï‡ØÅ‡Æ±‡Øà‡Æµ‡ØÅ (‡Æâ‡Æï‡Æ®‡Øç‡Æ§: {}-{})',
            'ph_high': 'pH ‡Æö‡Æ±‡Øç‡Æ±‡ØÅ ‡ÆÖ‡Æ§‡Æø‡Æï‡ÆÆ‡Øç (‡Æâ‡Æï‡Æ®‡Øç‡Æ§: {}-{})',
            'optimal_temp': '‡Æâ‡Æï‡Æ®‡Øç‡Æ§ ‡Æµ‡ØÜ‡Æ™‡Øç‡Æ™‡Æ®‡Æø‡Æ≤‡Øà ‡Æµ‡Æ∞‡ÆÆ‡Øç‡Æ™‡ØÅ ({}-{}¬∞C)',
            'temp_low': '‡Æµ‡ØÜ‡Æ™‡Øç‡Æ™‡Æ®‡Æø‡Æ≤‡Øà ‡Æö‡Æ±‡Øç‡Æ±‡ØÅ ‡Æï‡ØÅ‡Æ±‡Øà‡Æµ‡ØÅ (‡Æâ‡Æï‡Æ®‡Øç‡Æ§: {}-{}¬∞C)',
            'temp_high': '‡Æµ‡ØÜ‡Æ™‡Øç‡Æ™‡Æ®‡Æø‡Æ≤‡Øà ‡Æö‡Æ±‡Øç‡Æ±‡ØÅ ‡ÆÖ‡Æ§‡Æø‡Æï‡ÆÆ‡Øç (‡Æâ‡Æï‡Æ®‡Øç‡Æ§: {}-{}¬∞C)',
            'optimal_rain': '‡Æâ‡Æï‡Æ®‡Øç‡Æ§ ‡ÆÆ‡Æ¥‡Øà ({}-{}mm)',
            'rain_low': '‡ÆÆ‡Æ¥‡Øà ‡Æö‡Æ±‡Øç‡Æ±‡ØÅ ‡Æï‡ØÅ‡Æ±‡Øà‡Æµ‡ØÅ (‡Æâ‡Æï‡Æ®‡Øç‡Æ§: {}-{}mm)',
            'rain_high': '‡ÆÆ‡Æ¥‡Øà ‡Æö‡Æ±‡Øç‡Æ±‡ØÅ ‡ÆÖ‡Æ§‡Æø‡Æï‡ÆÆ‡Øç (‡Æâ‡Æï‡Æ®‡Øç‡Æ§: {}-{}mm)',
            'nitrogen_issue': '{} ‡Æï‡Øç‡Æï‡ØÅ ‡Æ®‡Øà‡Æü‡Øç‡Æ∞‡Æú‡Æ©‡Øç ‡ÆÖ‡Æ≥‡Æµ‡ØÅ ‡Æâ‡Æï‡Æ®‡Øç‡Æ§‡Æ§‡Æ≤‡Øç‡Æ≤',
            'phosphorus_issue': '{} ‡Æï‡Øç‡Æï‡ØÅ ‡Æ™‡Ææ‡Æ∏‡Øç‡Æ™‡Æ∞‡Æ∏‡Øç ‡ÆÖ‡Æ≥‡Æµ‡ØÅ ‡Æâ‡Æï‡Æ®‡Øç‡Æ§‡Æ§‡Æ≤‡Øç‡Æ≤',
            'potassium_issue': '{} ‡Æï‡Øç‡Æï‡ØÅ ‡Æ™‡Øä‡Æü‡Øç‡Æü‡Ææ‡Æö‡Æø‡ÆØ‡ÆÆ‡Øç ‡ÆÖ‡Æ≥‡Æµ‡ØÅ ‡Æâ‡Æï‡Æ®‡Øç‡Æ§‡Æ§‡Æ≤‡Øç‡Æ≤'
        }
    },
    'bn': {
        'name': '‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ',
        'direction': 'ltr',
        'states': {
            'Punjab': '‡¶™‡¶û‡ßç‡¶ú‡¶æ‡¶¨',
            'Haryana': '‡¶π‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶®‡¶æ',
            'Uttar Pradesh': '‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶™‡ßç‡¶∞‡¶¶‡ßá‡¶∂',
            'Maharashtra': '‡¶Æ‡¶π‡¶æ‡¶∞‡¶æ‡¶∑‡ßç‡¶ü‡ßç‡¶∞',
            'Karnataka': '‡¶ï‡¶∞‡ßç‡¶£‡¶æ‡¶ü‡¶ï',
            'Tamil Nadu': '‡¶§‡¶æ‡¶Æ‡¶ø‡¶≤‡¶®‡¶æ‡¶°‡¶º‡ßÅ',
            'Andhra Pradesh': '‡¶Ö‡¶®‡ßç‡¶ß‡ßç‡¶∞ ‡¶™‡ßç‡¶∞‡¶¶‡ßá‡¶∂',
            'Gujarat': '‡¶ó‡ßÅ‡¶ú‡¶∞‡¶æ‡¶ü',
            'Odisha': '‡¶ì‡¶°‡¶º‡¶ø‡¶∂‡¶æ',
            'Jharkhand': '‡¶ù‡¶æ‡¶°‡¶º‡¶ñ‡¶£‡ßç‡¶°',
            'West Bengal': '‡¶™‡¶∂‡ßç‡¶ö‡¶ø‡¶Æ‡¶¨‡¶ô‡ßç‡¶ó',
            'Bihar': '‡¶¨‡¶ø‡¶π‡¶æ‡¶∞',
            'Select': '‡¶Ö‡¶û‡ßç‡¶ö‡¶≤ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®'
        },
        'ui': {
            'app_name': 'VARUN AI',
            'tagline': '‡¶â‡¶®‡ßç‡¶®‡¶§ ‡¶Ü‡¶ß‡ßÅ‡¶®‡¶ø‡¶ï ‡¶∞‡ßÇ‡¶™‡¶æ‡¶®‡ßç‡¶§‡¶∞‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡ßá‡¶∞‡¶æ ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡ßá‡¶∂‡¶ø‡¶ï‡¶æ',
            'farmer_details': '‡¶ï‡ßÉ‡¶∑‡¶ï‡ßá‡¶∞ ‡¶¨‡¶ø‡¶¨‡¶∞‡¶£',
            'full_name': '‡¶™‡ßÅ‡¶∞‡ßã ‡¶®‡¶æ‡¶Æ',
            'region': '‡¶Ö‡¶û‡ßç‡¶ö‡¶≤',
            'farm_size': '‡¶ñ‡¶æ‡¶Æ‡¶æ‡¶∞‡ßá‡¶∞ ‡¶Ü‡¶ï‡¶æ‡¶∞ (‡¶è‡¶ï‡¶∞)',
            'soil_properties': '‡¶Æ‡¶æ‡¶ü‡¶ø‡¶∞ ‡¶¨‡ßà‡¶∂‡¶ø‡¶∑‡ßç‡¶ü‡ßç‡¶Ø',
            'soil_type': '‡¶Æ‡¶æ‡¶ü‡¶ø‡¶∞ ‡¶ß‡¶∞‡¶®',
            'soil_ph': '‡¶Æ‡¶æ‡¶ü‡¶ø‡¶∞ pH',
            'soil_moisture': '‡¶Æ‡¶æ‡¶ü‡¶ø‡¶∞ ‡¶Ü‡¶∞‡ßç‡¶¶‡ßç‡¶∞‡¶§‡¶æ (%)',
            'nitrogen': '‡¶®‡¶æ‡¶á‡¶ü‡ßç‡¶∞‡ßã‡¶ú‡ßá‡¶® (kg/ha)',
            'phosphorus': '‡¶´‡¶∏‡¶´‡¶∞‡¶æ‡¶∏ (kg/ha)',
            'potassium': '‡¶™‡¶ü‡¶æ‡¶∏‡¶ø‡¶Ø‡¶º‡¶æ‡¶Æ (kg/ha)',
            'environmental_factors': '‡¶™‡¶∞‡¶ø‡¶¨‡ßá‡¶∂‡¶ó‡¶§ ‡¶ï‡¶æ‡¶∞‡¶£',
            'temperature': '‡¶§‡¶æ‡¶™‡¶Æ‡¶æ‡¶§‡ßç‡¶∞‡¶æ (¬∞C)',
            'rainfall': '‡¶¨‡¶æ‡¶∞‡ßç‡¶∑‡¶ø‡¶ï ‡¶¨‡ßÉ‡¶∑‡ßç‡¶ü‡¶ø‡¶™‡¶æ‡¶§ (mm)',
            'humidity': '‡¶Ü‡¶∞‡ßç‡¶¶‡ßç‡¶∞‡¶§‡¶æ (%)',
            'analyze_button': '‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶∏‡ßÅ‡¶™‡¶æ‡¶∞‡¶ø‡¶∂ ‡¶ï‡¶∞‡ßÅ‡¶®',
            'dashboard': '‡¶°‡ßç‡¶Ø‡¶æ‡¶∂‡¶¨‡ßã‡¶∞‡ßç‡¶°',
            'crop_recommendation': '‡¶´‡¶∏‡¶≤ ‡¶∏‡ßÅ‡¶™‡¶æ‡¶∞‡¶ø‡¶∂',
            'soil_analysis': '‡¶Æ‡¶æ‡¶ü‡¶ø‡¶∞ ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£',
            'weather_forecast': '‡¶Ü‡¶¨‡¶π‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶™‡ßÇ‡¶∞‡ßç‡¶¨‡¶æ‡¶≠‡¶æ‡¶∏',
            'farm_overview': '‡¶ñ‡¶æ‡¶Æ‡¶æ‡¶∞‡ßá‡¶∞ ‡¶ì‡¶≠‡¶æ‡¶∞‡¶≠‡¶ø‡¶â',
            'soil_nutrient_levels': '‡¶Æ‡¶æ‡¶ü‡¶ø‡¶∞ ‡¶™‡ßÅ‡¶∑‡ßç‡¶ü‡¶ø‡¶∞ ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞‡¶æ',
            'recommended_crop': '‡¶∏‡ßÅ‡¶™‡¶æ‡¶∞‡¶ø‡¶∂‡¶ï‡ßÉ‡¶§ ‡¶´‡¶∏‡¶≤',
            'expected_yield': '‡¶™‡ßç‡¶∞‡¶§‡ßç‡¶Ø‡¶æ‡¶∂‡¶ø‡¶§ ‡¶´‡¶≤‡¶®',
            'success_probability': '‡¶∏‡¶æ‡¶´‡¶≤‡ßç‡¶Ø‡ßá‡¶∞ ‡¶∏‡¶Æ‡ßç‡¶≠‡¶æ‡¶¨‡¶®‡¶æ',
            'why_this_crop': '‡¶è‡¶á ‡¶´‡¶∏‡¶≤ ‡¶ï‡ßá‡¶®?',
            'planting_guide': '‡¶∞‡ßã‡¶™‡¶£ ‡¶ó‡¶æ‡¶á‡¶°',
            'best_planting_time': '‡¶∏‡ßá‡¶∞‡¶æ ‡¶∞‡ßã‡¶™‡¶£‡ßá‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º',
            'water_requirements': '‡¶™‡¶æ‡¶®‡¶ø‡¶∞ ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®‡ßÄ‡¶Ø‡¶º‡¶§‡¶æ',
            'fertilizer_recommendations': '‡¶∏‡¶æ‡¶∞ ‡¶∏‡ßÅ‡¶™‡¶æ‡¶∞‡¶ø‡¶∂',
            'harvest_timeline': '‡¶´‡¶∏‡¶≤ ‡¶ï‡¶æ‡¶ü‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º‡¶∏‡ßÄ‡¶Æ‡¶æ',
            'market_insights': '‡¶¨‡¶æ‡¶ú‡¶æ‡¶∞ ‡¶Ö‡¶®‡ßç‡¶§‡¶∞‡ßç‡¶¶‡ßÉ‡¶∑‡ßç‡¶ü‡¶ø',
            'current_market_price': '‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶¨‡¶æ‡¶ú‡¶æ‡¶∞ ‡¶Æ‡ßÇ‡¶≤‡ßç‡¶Ø',
            'demand_trend': '‡¶ö‡¶æ‡¶π‡¶ø‡¶¶‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶¨‡¶£‡¶§‡¶æ',
            'click_to_analyze': '‡¶´‡¶∏‡¶≤‡ßá‡¶∞ ‡¶∏‡ßÅ‡¶™‡¶æ‡¶∞‡¶ø‡¶∂ ‡¶™‡ßá‡¶§‡ßá ‡¶¨‡¶æ‡¶ü‡¶® ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®',
            'ph_level': 'pH ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞‡¶æ',
            'moisture': '‡¶Ü‡¶∞‡ßç‡¶¶‡ßç‡¶∞‡¶§‡¶æ',
            'organic_matter': '‡¶ú‡ßà‡¶¨ ‡¶™‡¶¶‡¶æ‡¶∞‡ßç‡¶•',
            'wind_speed': '‡¶¨‡¶æ‡¶§‡¶æ‡¶∏‡ßá‡¶∞ ‡¶ó‡¶§‡¶ø',
            'created_by': '‡¶≠‡¶æ‡¶≤‡ßã‡¶¨‡¶æ‡¶∏‡¶æ ‡¶∏‡¶π ‡¶§‡ßà‡¶∞‡¶ø',
            'team_name': '‡¶ü‡¶ø‡¶Æ ‡¶è‡¶ó‡ßç‡¶∞‡ßã‡¶®‡ßã‡¶≠‡¶æ',
            'for_sih': 'SIH 2025 ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø',
            'language': '‡¶≠‡¶æ‡¶∑‡¶æ',
            'select_language': '‡¶≠‡¶æ‡¶∑‡¶æ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®',
            'not_specified': '‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡¶®‡¶ø',
            'regional_preference': '‡¶Ü‡¶û‡ßç‡¶ö‡¶≤‡¶ø‡¶ï ‡¶™‡¶õ‡¶®‡ßç‡¶¶',
            'soil_type_match': '‡¶Æ‡¶æ‡¶ü‡¶ø‡¶∞ ‡¶ß‡¶∞‡¶® ‡¶Æ‡¶ø‡¶≤',
            'ph_suitability': 'pH ‡¶â‡¶™‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡¶§‡¶æ',
            'temperature_suitability': '‡¶§‡¶æ‡¶™‡¶Æ‡¶æ‡¶§‡ßç‡¶∞‡¶æ ‡¶â‡¶™‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡¶§‡¶æ',
            'rainfall_suitability': '‡¶¨‡ßÉ‡¶∑‡ßç‡¶ü‡¶ø‡¶™‡¶æ‡¶§ ‡¶â‡¶™‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡¶§‡¶æ',
            'nutrient_suitability': '‡¶™‡ßÅ‡¶∑‡ßç‡¶ü‡¶ø ‡¶â‡¶™‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡¶§‡¶æ',
            'alternative_options': '‡¶¨‡¶ø‡¶ï‡¶≤‡ßç‡¶™ ‡¶¨‡¶ø‡¶ï‡¶≤‡ßç‡¶™',
            'detailed_factor_analysis': '‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶´‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶ü‡¶∞ ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£',
            'suitability_analysis': '‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶â‡¶™‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡¶§‡¶æ ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£',
            'analysis_loading': '‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ñ‡¶æ‡¶Æ‡¶æ‡¶∞‡ßá‡¶∞ ‡¶°‡ßá‡¶ü‡¶æ ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶è‡¶¨‡¶Ç ‡¶∏‡ßÅ‡¶™‡¶æ‡¶∞‡¶ø‡¶∂ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...'
        },
        'crops': {
            'Wheat': '‡¶ó‡¶Æ',
            'Rice': '‡¶ß‡¶æ‡¶®',
            'Maize': '‡¶≠‡ßÅ‡¶ü‡ßç‡¶ü‡¶æ',
            'Cotton': '‡¶§‡ßÅ‡¶≤‡¶æ',
            'Soybean': '‡¶∏‡¶Ø‡¶º‡¶æ‡¶¨‡¶ø‡¶®',
            'Pulses': '‡¶°‡¶æ‡¶≤',
            'Sugarcane': '‡¶Ü‡¶ñ',
            'Groundnut': '‡¶ö‡¶ø‡¶®‡¶æ‡¶¨‡¶æ‡¶¶‡¶æ‡¶Æ'
        },
        'reasons': {
            'highly_suitable': '{} ‡¶Ö‡¶û‡ßç‡¶ö‡¶≤‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ö‡¶§‡ßç‡¶Ø‡¶®‡ßç‡¶§ ‡¶â‡¶™‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§',
            'not_typical': '{} ‡¶è ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£‡¶§ ‡¶ö‡¶æ‡¶∑ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º ‡¶®‡¶æ',
            'ideal_soil': '{} ‡¶Æ‡¶æ‡¶ü‡¶ø‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ü‡¶¶‡¶∞‡ßç‡¶∂',
            'not_optimal_soil': '{} ‡¶Æ‡¶æ‡¶ü‡¶ø‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶§‡ßç‡¶§‡¶Æ ‡¶®‡¶Ø‡¶º (‡¶™‡¶õ‡¶®‡ßç‡¶¶ ‡¶ï‡¶∞‡ßá {})',
            'optimal_ph': '‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶§‡ßç‡¶§‡¶Æ pH ‡¶™‡¶∞‡¶ø‡¶∏‡ßÄ‡¶Æ‡¶æ ({}-{})',
            'ph_low': 'pH ‡¶ï‡¶ø‡¶õ‡ßÅ‡¶ü‡¶æ ‡¶ï‡¶Æ (‡¶Ü‡¶¶‡¶∞‡ßç‡¶∂: {}-{})',
            'ph_high': 'pH ‡¶ï‡¶ø‡¶õ‡ßÅ‡¶ü‡¶æ ‡¶¨‡ßá‡¶∂‡¶ø (‡¶Ü‡¶¶‡¶∞‡ßç‡¶∂: {}-{})',
            'optimal_temp': '‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶§‡ßç‡¶§‡¶Æ ‡¶§‡¶æ‡¶™‡¶Æ‡¶æ‡¶§‡ßç‡¶∞‡¶æ ‡¶™‡¶∞‡¶ø‡¶∏‡ßÄ‡¶Æ‡¶æ ({}-{}¬∞C)',
            'temp_low': '‡¶§‡¶æ‡¶™‡¶Æ‡¶æ‡¶§‡ßç‡¶∞‡¶æ ‡¶ï‡¶ø‡¶õ‡ßÅ‡¶ü‡¶æ ‡¶ï‡¶Æ (‡¶Ü‡¶¶‡¶∞‡ßç‡¶∂: {}-{}¬∞C)',
            'temp_high': '‡¶§‡¶æ‡¶™‡¶Æ‡¶æ‡¶§‡ßç‡¶∞‡¶æ ‡¶ï‡¶ø‡¶õ‡ßÅ‡¶ü‡¶æ ‡¶¨‡ßá‡¶∂‡¶ø (‡¶Ü‡¶¶‡¶∞‡ßç‡¶∂: {}-{}¬∞C)',
            'optimal_rain': '‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶§‡ßç‡¶§‡¶Æ ‡¶¨‡ßÉ‡¶∑‡ßç‡¶ü‡¶ø‡¶™‡¶æ‡¶§ ({}-{}mm)',
            'rain_low': '‡¶¨‡ßÉ‡¶∑‡ßç‡¶ü‡¶ø‡¶™‡¶æ‡¶§ ‡¶ï‡¶ø‡¶õ‡ßÅ‡¶ü‡¶æ ‡¶ï‡¶Æ (‡¶Ü‡¶¶‡¶∞‡ßç‡¶∂: {}-{}mm)',
            'rain_high': '‡¶¨‡ßÉ‡¶∑‡ßç‡¶ü‡¶ø‡¶™‡¶æ‡¶§ ‡¶ï‡¶ø‡¶õ‡ßÅ‡¶ü‡¶æ ‡¶¨‡ßá‡¶∂‡¶ø (‡¶Ü‡¶¶‡¶∞‡ßç‡¶∂: {}-{}mm)',
            'nitrogen_issue': '{} ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶®‡¶æ‡¶á‡¶ü‡ßç‡¶∞‡ßã‡¶ú‡ßá‡¶® ‡¶∏‡ßç‡¶§‡¶∞ ‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶§‡ßç‡¶§‡¶Æ ‡¶®‡¶Ø‡¶º',
            'phosphorus_issue': '{} ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶´‡¶∏‡¶´‡¶∞‡¶æ‡¶∏ ‡¶∏‡ßç‡¶§‡¶∞ ‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶§‡ßç‡¶§‡¶Æ ‡¶®‡¶Ø‡¶º',
            'potassium_issue': '{} ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶™‡¶ü‡¶æ‡¶∏‡¶ø‡¶Ø‡¶º‡¶æ‡¶Æ ‡¶∏‡ßç‡¶§‡¶∞ ‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶§‡ßç‡¶§‡¶Æ ‡¶®‡¶Ø‡¶º'
        }
    },
    'mr': {
        'name': '‡§Æ‡§∞‡§æ‡§†‡•Ä',
        'direction': 'ltr',
        'states': {
            'Punjab': '‡§™‡§Ç‡§ú‡§æ‡§¨',
            'Haryana': '‡§π‡§∞‡§ø‡§Ø‡§æ‡§£‡§æ',
            'Uttar Pradesh': '‡§â‡§§‡•ç‡§§‡§∞ ‡§™‡•ç‡§∞‡§¶‡•á‡§∂',
            'Maharashtra': '‡§Æ‡§π‡§æ‡§∞‡§æ‡§∑‡•ç‡§ü‡•ç‡§∞',
            'Karnataka': '‡§ï‡§∞‡•ç‡§®‡§æ‡§ü‡§ï',
            'Tamil Nadu': '‡§§‡§Æ‡§ø‡§≥‡§®‡§æ‡§°‡•Ç',
            'Andhra Pradesh': '‡§Ü‡§Ç‡§ß‡•ç‡§∞ ‡§™‡•ç‡§∞‡§¶‡•á‡§∂',
            'Gujarat': '‡§ó‡•Å‡§ú‡§∞‡§æ‡§§',
            'Odisha': '‡§ì‡§°‡§ø‡§∂‡§æ',
            'Jharkhand': '‡§ù‡§æ‡§∞‡§ñ‡§Ç‡§°',
            'West Bengal': '‡§™‡§∂‡•ç‡§ö‡§ø‡§Æ ‡§¨‡§Ç‡§ó‡§æ‡§≤',
            'Bihar': '‡§¨‡§ø‡§π‡§æ‡§∞',
            'Select': '‡§™‡•ç‡§∞‡§¶‡•á‡§∂ ‡§®‡§ø‡§µ‡§°‡§æ'
        },
        'ui': {
            'app_name': 'VARUN AI',
            'tagline': '‡§µ‡§ø‡§ï‡§∏‡§ø‡§§ ‡§Ü‡§ß‡•Å‡§®‡§ø‡§ï ‡§∞‡•Ç‡§™‡§æ‡§Ç‡§§‡§∞‡§£‡§æ‡§∏‡§æ‡§†‡•Ä ‡§â‡§§‡•ç‡§§‡§Æ ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§®',
            'farmer_details': '‡§∂‡•á‡§§‡§ï‡§∞‡•Ä ‡§§‡§™‡§∂‡•Ä‡§≤',
            'full_name': '‡§™‡•Ç‡§∞‡•ç‡§£ ‡§®‡§æ‡§µ',
            'region': '‡§™‡•ç‡§∞‡§¶‡•á‡§∂',
            'farm_size': '‡§∂‡•á‡§§‡§æ‡§ö‡§æ ‡§Ü‡§ï‡§æ‡§∞ (‡§è‡§ï‡§∞)',
            'soil_properties': '‡§Æ‡§æ‡§§‡•Ä‡§ö‡•á ‡§ó‡•Å‡§£‡§ß‡§∞‡•ç‡§Æ',
            'soil_type': '‡§Æ‡§æ‡§§‡•Ä‡§ö‡§æ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞',
            'soil_ph': '‡§Æ‡§æ‡§§‡•Ä‡§ö‡§æ pH',
            'soil_moisture': '‡§Æ‡§æ‡§§‡•Ä‡§ö‡•Ä ‡§Ü‡§∞‡•ç‡§¶‡•ç‡§∞‡§§‡§æ (%)',
            'nitrogen': '‡§®‡§æ‡§Ø‡§ü‡•ç‡§∞‡•ã‡§ú‡§® (kg/ha)',
            'phosphorus': '‡§´‡•â‡§∏‡•ç‡§´‡§∞‡§∏ (kg/ha)',
            'potassium': '‡§™‡•ã‡§ü‡•Ö‡§∂‡§ø‡§Ø‡§Æ (kg/ha)',
            'environmental_factors': '‡§™‡§∞‡•ç‡§Ø‡§æ‡§µ‡§∞‡§£‡•Ä‡§Ø ‡§ò‡§ü‡§ï',
            'temperature': '‡§§‡§æ‡§™‡§Æ‡§æ‡§® (¬∞C)',
            'rainfall': '‡§µ‡§æ‡§∞‡•ç‡§∑‡§ø‡§ï ‡§™‡§æ‡§ä‡§∏ (mm)',
            'humidity': '‡§Ü‡§∞‡•ç‡§¶‡•ç‡§∞‡§§‡§æ (%)',
            'analyze_button': '‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡§∞‡§æ ‡§Ü‡§£‡§ø ‡§∂‡§ø‡§´‡§æ‡§∞‡§∏ ‡§ï‡§∞‡§æ',
            'dashboard': '‡§°‡•Ö‡§∂‡§¨‡•ã‡§∞‡•ç‡§°',
            'crop_recommendation': '‡§™‡•Ä‡§ï ‡§∂‡§ø‡§´‡§æ‡§∞‡§∏',
            'soil_analysis': '‡§Æ‡§æ‡§§‡•Ä ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£',
            'weather_forecast': '‡§π‡§µ‡§æ‡§Æ‡§æ‡§® ‡§Ö‡§Ç‡§¶‡§æ‡§ú',
            'farm_overview': '‡§∂‡•á‡§§‡§æ‡§ö‡§æ ‡§Ü‡§¢‡§æ‡§µ‡§æ',
            'soil_nutrient_levels': '‡§Æ‡§æ‡§§‡•Ä‡§§‡•Ä‡§≤ ‡§™‡•ã‡§∑‡§ï ‡§¶‡•ç‡§∞‡§µ‡•ç‡§Ø ‡§™‡§æ‡§§‡§≥‡•Ä',
            'recommended_crop': '‡§∂‡§ø‡§´‡§æ‡§∞‡§∏ ‡§ï‡•á‡§≤‡•á‡§≤‡•Ä ‡§™‡•Ä‡§ï',
            'expected_yield': '‡§Ö‡§™‡•á‡§ï‡•ç‡§∑‡§ø‡§§ ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§®',
            'success_probability': '‡§Ø‡§∂‡§æ‡§ö‡•Ä ‡§∂‡§ï‡•ç‡§Ø‡§§‡§æ',
            'why_this_crop': '‡§π‡•á ‡§™‡•Ä‡§ï ‡§ï‡§æ?',
            'planting_guide': '‡§≤‡§æ‡§ó‡§µ‡§° ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§ï',
            'best_planting_time': '‡§â‡§§‡•ç‡§§‡§Æ ‡§≤‡§æ‡§ó‡§µ‡§°‡•Ä‡§ö‡•Ä ‡§µ‡•á‡§≥',
            'water_requirements': '‡§™‡§æ‡§£‡•ç‡§Ø‡§æ‡§ö‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ',
            'fertilizer_recommendations': '‡§ñ‡§§ ‡§∂‡§ø‡§´‡§æ‡§∞‡§∏‡•Ä',
            'harvest_timeline': '‡§ï‡§æ‡§™‡§£‡•Ä ‡§µ‡•á‡§≥‡§∞‡•á‡§∑‡§æ',
            'market_insights': '‡§¨‡§æ‡§ú‡§æ‡§∞‡§æ‡§§‡•Ä‡§≤ ‡§Ö‡§Ç‡§§‡§∞‡•ç‡§¶‡•É‡§∑‡•ç‡§ü‡•Ä',
            'current_market_price': '‡§∏‡§ß‡•ç‡§Ø‡§æ‡§ö‡§æ ‡§¨‡§æ‡§ú‡§æ‡§∞‡§≠‡§æ‡§µ',
            'demand_trend': '‡§Æ‡§æ‡§ó‡§£‡•Ä‡§ö‡•Ä ‡§™‡•ç‡§∞‡§µ‡•É‡§§‡•ç‡§§‡•Ä',
            'click_to_analyze': '‡§™‡•Ä‡§ï ‡§∂‡§ø‡§´‡§æ‡§∞‡§∏‡•Ä ‡§Æ‡§ø‡§≥‡§µ‡§ø‡§£‡•ç‡§Ø‡§æ‡§∏‡§æ‡§†‡•Ä ‡§¨‡§ü‡§£ ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞‡§æ',
            'ph_level': 'pH ‡§™‡§æ‡§§‡§≥‡•Ä',
            'moisture': '‡§Ü‡§∞‡•ç‡§¶‡•ç‡§∞‡§§‡§æ',
            'organic_matter': '‡§∏‡•á‡§Ç‡§¶‡•ç‡§∞‡§ø‡§Ø ‡§™‡§¶‡§æ‡§∞‡•ç‡§•',
            'wind_speed': '‡§µ‡§æ‡§±‡•ç‡§Ø‡§æ‡§ö‡•Ä ‡§ó‡§§‡•Ä',
            'created_by': '‡§™‡•ç‡§∞‡•á‡§Æ‡§æ‡§®‡•á ‡§§‡§Ø‡§æ‡§∞ ‡§ï‡•á‡§≤‡•á',
            'team_name': '‡§ü‡•Ä‡§Æ ‡§Ö‡•Ö‡§ó‡•ç‡§∞‡•ã‡§®‡•ã‡§µ‡•ç‡§π‡§æ',
            'for_sih': 'SIH 2025 ‡§∏‡§æ‡§†‡•Ä',
            'language': '‡§≠‡§æ‡§∑‡§æ',
            'select_language': '‡§≠‡§æ‡§∑‡§æ ‡§®‡§ø‡§µ‡§°‡§æ',
            'not_specified': '‡§®‡§ø‡§∞‡•ç‡§¶‡§ø‡§∑‡•ç‡§ü ‡§®‡§æ‡§π‡•Ä',
            'regional_preference': '‡§™‡•ç‡§∞‡§æ‡§¶‡•á‡§∂‡§ø‡§ï ‡§™‡•ç‡§∞‡§æ‡§ß‡§æ‡§®‡•ç‡§Ø',
            'soil_type_match': '‡§Æ‡§æ‡§§‡•Ä ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ ‡§ú‡•Å‡§≥‡§£‡•Ä',
            'ph_suitability': 'pH ‡§Ø‡•ã‡§ó‡•ç‡§Ø‡§§‡§æ',
            'temperature_suitability': '‡§§‡§æ‡§™‡§Æ‡§æ‡§® ‡§Ø‡•ã‡§ó‡•ç‡§Ø‡§§‡§æ',
            'rainfall_suitability': '‡§™‡§æ‡§ä‡§∏ ‡§Ø‡•ã‡§ó‡•ç‡§Ø‡§§‡§æ',
            'nutrient_suitability': '‡§™‡•ã‡§∑‡§ï ‡§Ø‡•ã‡§ó‡•ç‡§Ø‡§§‡§æ',
            'alternative_options': '‡§™‡§∞‡•ç‡§Ø‡§æ‡§Ø‡•Ä ‡§™‡§∞‡•ç‡§Ø‡§æ‡§Ø',
            'detailed_factor_analysis': '‡§§‡§™‡§∂‡•Ä‡§≤‡§µ‡§æ‡§∞ ‡§ò‡§ü‡§ï ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£',
            'suitability_analysis': '‡§∏‡§æ‡§†‡•Ä ‡§Ø‡•ã‡§ó‡•ç‡§Ø‡§§‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£',
            'analysis_loading': '‡§Ü‡§™‡§≤‡§æ ‡§∂‡•á‡§§ ‡§°‡•á‡§ü‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§Ü‡§£‡§ø ‡§∂‡§ø‡§´‡§æ‡§∞‡§∏‡•Ä ‡§§‡§Ø‡§æ‡§∞ ‡§ï‡•á‡§≤‡•ç‡§Ø‡§æ ‡§ú‡§æ‡§§ ‡§Ü‡§π‡•á‡§§...'
        },
        'crops': {
            'Wheat': '‡§ó‡§π‡•Ç',
            'Rice': '‡§§‡§æ‡§Ç‡§¶‡•Ç‡§≥',
            'Maize': '‡§Æ‡§ï‡§æ',
            'Cotton': '‡§ï‡§æ‡§™‡•Ç‡§∏',
            'Soybean': '‡§∏‡•ã‡§Ø‡§æ‡§¨‡•Ä‡§®',
            'Pulses': '‡§°‡§æ‡§≥',
            'Sugarcane': '‡§ä‡§∏',
            'Groundnut': '‡§≠‡•Å‡§à‡§Æ‡•Ç‡§ó'
        },
        'reasons': {
            'highly_suitable': '{} ‡§™‡•ç‡§∞‡§¶‡•á‡§∂‡§æ‡§∏‡§æ‡§†‡•Ä ‡§Ö‡§§‡•ç‡§Ø‡§Ç‡§§ ‡§Ø‡•ã‡§ó‡•ç‡§Ø',
            'not_typical': '{} ‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø‡§§‡§É ‡§≤‡§æ‡§µ‡§≤‡•Ä ‡§ú‡§æ‡§§ ‡§®‡§æ‡§π‡•Ä',
            'ideal_soil': '{} ‡§Æ‡§æ‡§§‡•Ä‡§∏‡§æ‡§†‡•Ä ‡§Ü‡§¶‡§∞‡•ç‡§∂',
            'not_optimal_soil': '{} ‡§Æ‡§æ‡§§‡•Ä‡§∏‡§æ‡§†‡•Ä ‡§á‡§∑‡•ç‡§ü‡§§‡§Æ ‡§®‡§æ‡§π‡•Ä (‡§™‡•ç‡§∞‡§æ‡§ß‡§æ‡§®‡•ç‡§Ø {})',
            'optimal_ph': '‡§á‡§∑‡•ç‡§ü‡§§‡§Æ pH ‡§∂‡•ç‡§∞‡•á‡§£‡•Ä ({}-{})',
            'ph_low': 'pH ‡§ï‡§ø‡§Ç‡§ö‡§ø‡§§ ‡§ï‡§Æ‡•Ä (‡§Ü‡§¶‡§∞‡•ç‡§∂: {}-{})',
            'ph_high': 'pH ‡§ï‡§ø‡§Ç‡§ö‡§ø‡§§ ‡§ú‡§æ‡§∏‡•ç‡§§ (‡§Ü‡§¶‡§∞‡•ç‡§∂: {}-{})',
            'optimal_temp': '‡§á‡§∑‡•ç‡§ü‡§§‡§Æ ‡§§‡§æ‡§™‡§Æ‡§æ‡§® ‡§∂‡•ç‡§∞‡•á‡§£‡•Ä ({}-{}¬∞C)',
            'temp_low': '‡§§‡§æ‡§™‡§Æ‡§æ‡§® ‡§ï‡§ø‡§Ç‡§ö‡§ø‡§§ ‡§ï‡§Æ‡•Ä (‡§Ü‡§¶‡§∞‡•ç‡§∂: {}-{}¬∞C)',
            'temp_high': '‡§§‡§æ‡§™‡§Æ‡§æ‡§® ‡§ï‡§ø‡§Ç‡§ö‡§ø‡§§ ‡§ú‡§æ‡§∏‡•ç‡§§ (‡§Ü‡§¶‡§∞‡•ç‡§∂: {}-{}¬∞C)',
            'optimal_rain': '‡§á‡§∑‡•ç‡§ü‡§§‡§Æ ‡§™‡§æ‡§ä‡§∏ ({}-{}mm)',
            'rain_low': '‡§™‡§æ‡§ä‡§∏ ‡§ï‡§ø‡§Ç‡§ö‡§ø‡§§ ‡§ï‡§Æ‡•Ä (‡§Ü‡§¶‡§∞‡•ç‡§∂: {}-{}mm)',
            'rain_high': '‡§™‡§æ‡§ä‡§∏ ‡§ï‡§ø‡§Ç‡§ö‡§ø‡§§ ‡§ú‡§æ‡§∏‡•ç‡§§ (‡§Ü‡§¶‡§∞‡•ç‡§∂: {}-{}mm)',
            'nitrogen_issue': '{} ‡§∏‡§æ‡§†‡•Ä ‡§®‡§æ‡§Ø‡§ü‡•ç‡§∞‡•ã‡§ú‡§® ‡§™‡§æ‡§§‡§≥‡•Ä ‡§á‡§∑‡•ç‡§ü‡§§‡§Æ ‡§®‡§æ‡§π‡•Ä',
            'phosphorus_issue': '{} ‡§∏‡§æ‡§†‡•Ä ‡§´‡•â‡§∏‡•ç‡§´‡§∞‡§∏ ‡§™‡§æ‡§§‡§≥‡•Ä ‡§á‡§∑‡•ç‡§ü‡§§‡§Æ ‡§®‡§æ‡§π‡•Ä',
            'potassium_issue': '{} ‡§∏‡§æ‡§†‡•Ä ‡§™‡•ã‡§ü‡•Ö‡§∂‡§ø‡§Ø‡§Æ ‡§™‡§æ‡§§‡§≥‡•Ä ‡§á‡§∑‡•ç‡§ü‡§§‡§Æ ‡§®‡§æ‡§π‡•Ä'
        }
    }
}

# State to language mapping
STATE_LANGUAGE_MAPPING = {
    'Odisha': 'or',
    'Jharkhand': 'hi',
    'Bihar': 'hi',
    'Punjab': 'hi',
    'Haryana': 'hi',
    'Uttar Pradesh': 'hi',
    'West Bengal': 'bn',
    'Maharashtra': 'mr',
    'Tamil Nadu': 'ta',
    'Default': 'en'
}

def get_language_for_state(state):
    """Get the default language for a given state"""
    return STATE_LANGUAGE_MAPPING.get(state, STATE_LANGUAGE_MAPPING['Default'])

def get_available_languages():
    """Return list of available languages"""
    return list(LANGUAGES.keys())

def get_state_name(state, lang):
    """Get translated state name"""
    return LANGUAGES[lang]['states'].get(state, state)

# Initialize session state for language
if 'language' not in st.session_state:
    st.session_state.language = 'en'
if 'last_state' not in st.session_state:
    st.session_state.last_state = ''

# ===== ENHANCED CSS STYLING =====
st.markdown("""
<style>
    :root {
        --primary-color: #2E8B57;
        --secondary-color: #3CB371;
        --accent-color: #4CAF50;
        --background-color: #FFFFFF;
        --card-background: #F8F9FA;
        --text-color: #333333;
        --border-color: #E0E0E0;
        --shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        --hover-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
    }

    @media (prefers-color-scheme: dark) {
        :root {
            --background-color: #1E1E1E;
            --card-background: #2D2D2D;
            --text-color: #FFFFFF;
            --border-color: #404040;
            --shadow: 0 4px 6px rgba(0, 0, 0, 0.3);
            --hover-shadow: 0 6px 12px rgba(0, 0, 0, 0.4);
        }
    }

    .main-header {
        font-size: 3.5rem;
        color: var(--primary-color);
        text-align: center;
        font-weight: bold;
        margin-bottom: 0.5rem;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
    }

    .tagline {
        font-size: 1.2rem;
        color: var(--secondary-color);
        text-align: center;
        margin-top: 0;
        margin-bottom: 2rem;
        font-style: italic;
    }

    .sub-header {
        font-size: 1.8rem;
        color: var(--primary-color);
        border-bottom: 2px solid var(--secondary-color);
        padding-bottom: 0.5rem;
        margin-bottom: 1.5rem;
    }

    .card {
        padding: 1.5rem;
        border-radius: 12px;
        background-color: var(--card-background);
        border: 1px solid var(--border-color);
        box-shadow: var(--shadow);
        margin: 1rem 0;
        transition: all 0.3s ease;
    }

    .card:hover {
        box-shadow: var(--hover-shadow);
        transform: translateY(-2px);
    }

    .recommendation-card {
        background: linear-gradient(135deg, #E8F5E9 0%, #C8E6C9 100%);
        padding: 2rem;
        border-radius: 15px;
        border-left: 5px solid var(--accent-color);
        box-shadow: var(--shadow);
        margin: 1.5rem 0;
    }

    .weather-card {
        background: linear-gradient(135deg, #E3F2FD 0%, #BBDEFB 100%);
        padding: 1.5rem;
        border-radius: 12px;
        text-align: center;
        box-shadow: var(--shadow);
        border: 1px solid var(--border-color);
    }

    .soil-image {
        border-radius: 12px;
        width: 100%;
        height: 200px;
        object-fit: cover;
        box-shadow: var(--shadow);
        border: 1px solid var(--border-color);
    }

    .footer {
        text-align: center;
        margin-top: 3rem;
        padding: 2rem;
        background: linear-gradient(135deg, var(--primary-color) 0%, var(--secondary-color) 100%);
        color: white;
        border-radius: 12px;
        box-shadow: var(--shadow);
    }

    .team-name {
        font-weight: bold;
        color: #FFD700;
        text-shadow: 1px 1px 2px rgba(0,0,0,0.5);
    }

    .language-selector {
        position: fixed;
        top: 1rem;
        right: 1rem;
        z-index: 1000;
        background: var(--card-background);
        padding: 0.5rem 1rem;
        border-radius: 25px;
        box-shadow: var(--shadow);
        border: 1px solid var(--border-color);
    }

    .stProgress > div > div > div > div {
        background: linear-gradient(90deg, var(--accent-color) 0%, #8BC34A 100%);
    }

    .metric-value {
        font-size: 1.8rem;
        font-weight: bold;
        color: var(--primary-color);
        margin: 0.5rem 0;
    }

    .metric-label {
        font-size: 0.9rem;
        color: var(--text-color);
        opacity: 0.8;
        margin-bottom: 0.5rem;
    }

    .analysis-card {
        background: linear-gradient(135deg, #FFF3E0 0%, #FFE0B2 100%);
        padding: 1.2rem;
        border-radius: 10px;
        margin: 0.8rem 0;
        border: 1px solid var(--border-color);
    }

    .factor-score {
        font-size: 0.9rem;
        color: var(--primary-color);
        font-weight: bold;
        margin: 0.3rem 0;
    }

    /* Responsive design */
    @media (max-width: 768px) {
        .main-header {
            font-size: 2.5rem;
        }
        
        .card {
            padding: 1rem;
        }
        
        .language-selector {
            top: 0.5rem;
            right: 0.5rem;
            padding: 0.3rem 0.8rem;
        }
    }
</style>
""", unsafe_allow_html=True)

# Helper function to get translated text
def t(key, lang=None):
    """Get translated text for the given key"""
    if lang is None:
        lang = st.session_state.language
    
    # Navigate through nested keys (e.g., 'ui.farmer_details')
    keys = key.split('.')
    value = LANGUAGES[lang]
    
    for k in keys:
        if isinstance(value, dict) and k in value:
            value = value[k]
        else:
            # Fallback to English if translation not found
            if lang != 'en':
                return t(key, 'en')
            return key  # Return the key itself as last resort
    
    return value

# Generate soil images if they don't exist
def generate_soil_images():
    try:
        soil_colors = {
            "clay": (180, 120, 80),
            "loam": (160, 100, 60),
            "sand": (220, 200, 160),
            "silt": (200, 180, 140)
        }
        
        os.makedirs("assets/soil_types", exist_ok=True)
        
        for soil_type, color in soil_colors.items():
            img_path = f"assets/soil_types/{soil_type}.png"
            if not os.path.exists(img_path):
                img = Image.new('RGB', (400, 300), color=color)
                draw = ImageDraw.Draw(img)
                
                # Add texture
                for _ in range(800):
                    x = np.random.randint(0, 400)
                    y = np.random.randint(0, 300)
                    size = np.random.randint(2, 8)
                    draw.ellipse([(x, y), (x+size, y+size)], 
                               fill=tuple(max(0, c-30) for c in color))
                
                img.save(img_path)
    except Exception as e:
        st.error(f"Error generating soil images: {e}")

# Generate logo if it doesn't exist
def generate_logo():
    try:
        if not os.path.exists("assets/logo.png"):
            img = Image.new('RGB', (400, 200), color=(46, 139, 87))
            draw = ImageDraw.Draw(img)
            
            # Draw VARUN text
            draw.text((120, 70), "VARUN", fill=(255, 255, 255))
            draw.text((130, 120), "ai", fill=(255, 215, 0))
            
            # Draw plant icon
            draw.ellipse([(30, 70), (90, 130)], fill=(255, 215, 0))  # Sun
            
            # Draw a small plant
            draw.rectangle([(180, 130), (190, 150)], fill=(139, 69, 19))  # Stem
            draw.polygon([(175, 130), (185, 100), (195, 130)], fill=(34, 139, 34))  # Leaves
            
            img.save("assets/logo.png")
    except Exception as e:
        st.error(f"Error generating logo: {e}")

# Generate images
try:
    os.makedirs("assets", exist_ok=True)
    os.makedirs("assets/soil_types", exist_ok=True)
    generate_logo()
    generate_soil_images()
except Exception as e:
    st.error(f"Error creating assets directory: {e}")

# Language selector at top right
with st.container():
    col1, col2, col3 = st.columns([3, 1, 1])
    with col3:
        st.markdown('<div class="language-selector">', unsafe_allow_html=True)
        selected_language = st.selectbox(
            "üåê",
            options=get_available_languages(),
            format_func=lambda x: LANGUAGES[x]['name'],
            key='language_selector',
            index=get_available_languages().index(st.session_state.language),
            label_visibility="collapsed"
        )
        st.markdown('</div>', unsafe_allow_html=True)
        
        # Update language when selector changes
        if selected_language != st.session_state.language:
            st.session_state.language = selected_language
            st.rerun()

# App header
col1, col2, col3 = st.columns([1, 3, 1])
with col2:
    st.markdown(f'<h1 class="main-header">VARUN<span style="color: #FFD700;">ai</span></h1>', unsafe_allow_html=True)
    st.markdown(f'<p class="tagline">{t("ui.tagline")}</p>', unsafe_allow_html=True)

# Sidebar
with st.sidebar:
    try:
        st.image("assets/logo.png", width=280)
    except:
        st.warning("Logo image not found")
    
    st.markdown(f"## {t('ui.farmer_details')}")
    
    farmer_name = st.text_input(t('ui.full_name'))
    
    # Get state names in current language
    state_options = list(LANGUAGES['en']['states'].keys())
    state_display_names = [get_state_name(state, st.session_state.language) for state in state_options]
    
    selected_state_index = st.selectbox(
        t('ui.region'),
        range(len(state_options)),
        format_func=lambda i: state_display_names[i]
    )
    
    farm_location = state_options[selected_state_index]
    
    # Update language based on state selection
    if farm_location and farm_location != st.session_state.last_state:
        state_language = get_language_for_state(farm_location)
        if state_language != st.session_state.language:
            st.session_state.language = state_language
            st.session_state.last_state = farm_location
            st.rerun()
    
    farm_size = st.slider(t('ui.farm_size'), 1, 100, 10)
    
    st.markdown(f"## {t('ui.soil_properties')}")
    
    # Get soil types in current language
    soil_options = ["Select", "Loam", "Clay", "Sandy", "Silt"]
    soil_display_names = [t('ui.select') if opt == "Select" else opt for opt in soil_options]
    
    selected_soil_index = st.selectbox(
        t('ui.soil_type'),
        range(len(soil_options)),
        format_func=lambda i: soil_display_names[i]
    )
    
    soil_type = soil_options[selected_soil_index]
    
    soil_ph = st.slider(t('ui.soil_ph'), 4.0, 9.0, 6.5)
    soil_moisture = st.slider(t('ui.soil_moisture'), 0, 100, 50)
    nitrogen = st.slider(t('ui.nitrogen'), 0, 200, 50)
    phosphorus = st.slider(t('ui.phosphorus'), 0, 200, 40)
    potassium = st.slider(t('ui.potassium'), 0, 200, 60)
    
    st.markdown(f"## {t('ui.environmental_factors')}")
    temperature = st.slider(t('ui.temperature'), 0, 45, 25)
    rainfall = st.slider(t('ui.rainfall'), 0, 2000, 800)
    humidity = st.slider(t('ui.humidity'), 0, 100, 60)
    
    analyze_button = st.button(t('ui.analyze_button'), type="primary", use_container_width=True)

# Enhanced crop recommendation model with detailed analysis
def predict_best_crop(soil_type, ph, nitrogen, phosphorus, potassium, temperature, rainfall, humidity, region):
    # Regional crop preferences
    regional_preferences = {
        "Punjab": ["Wheat", "Rice", "Cotton", "Maize", "Sugarcane"],
        "Haryana": ["Wheat", "Rice", "Cotton", "Mustard", "Bajra"],
        "Uttar Pradesh": ["Wheat", "Rice", "Sugarcane", "Potato", "Pulses"],
        "Maharashtra": ["Cotton", "Soybean", "Pulses", "Sugarcane", "Groundnut"],
        "Karnataka": ["Rice", "Cotton", "Pulses", "Coffee", "Sugarcane"],
        "Tamil Nadu": ["Rice", "Sugarcane", "Cotton", "Groundnut", "Coconut"],
        "Andhra Pradesh": ["Rice", "Cotton", "Chilli", "Groundnut", "Tobacco"],
        "Gujarat": ["Cotton", "Groundnut", "Wheat", "Pulses", "Castor"],
        "Odisha": ["Rice", "Pulses", "Oilseeds", "Millets", "Jute"],
        "Jharkhand": ["Rice", "Pulses", "Oilseeds", "Maize", "Wheat"],
        "West Bengal": ["Rice", "Jute", "Tea", "Potato", "Wheat"],
        "Bihar": ["Rice", "Wheat", "Maize", "Pulses", "Sugarcane"]
    }
    
    # Expanded crop data with optimal conditions
    crops = [
        {
            'name': 'Wheat', 'soil_type': 'Loam', 'ph_min': 6.0, 'ph_max': 7.5,
            'temp_min': 10, 'temp_max': 25, 'rainfall_min': 500, 'rainfall_max': 1000,
            'n_min': 50, 'n_max': 80, 'p_min': 30, 'p_max': 60, 'k_min': 40, 'k_max': 70
        },
        {
            'name': 'Rice', 'soil_type': 'Clay', 'ph_min': 5.0, 'ph_max': 6.5,
            'temp_min': 20, 'temp_max': 35, 'rainfall_min': 1000, 'rainfall_max': 2000,
            'n_min': 60, 'n_max': 90, 'p_min': 40, 'p_max': 70, 'k_min': 50, 'k_max': 80
        },
        {
            'name': 'Maize', 'soil_type': 'Loam', 'ph_min': 5.5, 'ph_max': 7.0,
            'temp_min': 15, 'temp_max': 30, 'rainfall_min': 600, 'rainfall_max': 1200,
            'n_min': 70, 'n_max': 100, 'p_min': 50, 'p_max': 80, 'k_min': 60, 'k_max': 90
        },
        {
            'name': 'Cotton', 'soil_type': 'Sandy', 'ph_min': 5.5, 'ph_max': 7.5,
            'temp_min': 20, 'temp_max': 35, 'rainfall_min': 500, 'rainfall_max': 800,
            'n_min': 40, 'n_max': 70, 'p_min': 30, 'p_max': 60, 'k_min': 50, 'k_max': 80
        },
        {
            'name': 'Soybean', 'soil_type': 'Silt', 'ph_min': 6.0, 'ph_max': 7.0,
            'temp_min': 15, 'temp_max': 30, 'rainfall_min': 600, 'rainfall_max': 1000,
            'n_min': 30, 'n_max': 60, 'p_min': 40, 'p_max': 70, 'k_min': 50, 'k_max': 80
        },
        {
            'name': 'Pulses', 'soil_type': 'Loam', 'ph_min': 6.0, 'ph_max': 7.5,
            'temp_min': 15, 'temp_max': 30, 'rainfall_min': 500, 'rainfall_max': 800,
            'n_min': 20, 'n_max': 50, 'p_min': 30, 'p_max': 60, 'k_min': 40, 'k_max': 70
        },
        {
            'name': 'Sugarcane', 'soil_type': 'Loam', 'ph_min': 6.0, 'ph_max': 7.5,
            'temp_min': 20, 'temp_max': 35, 'rainfall_min': 1000, 'rainfall_max': 1500,
            'n_min': 100, 'n_max': 150, 'p_min': 50, 'p_max': 80, 'k_min': 80, 'k_max': 120
        },
        {
            'name': 'Groundnut', 'soil_type': 'Sandy', 'ph_min': 5.5, 'ph_max': 7.0,
            'temp_min': 20, 'temp_max': 35, 'rainfall_min': 500, 'rainfall_max': 1000,
            'n_min': 20, 'n_max': 40, 'p_min': 30, 'p_max': 50, 'k_min': 40, 'k_max': 60
        }
    ]
    
    # Calculate scores and detailed analysis
    crop_analyses = []
    for crop in crops:
        analysis = {
            'name': crop['name'],
            'score': 0,
            'details': {
                'regional_preference': 0,
                'soil_type': 0,
                'ph_suitability': 0,
                'temperature_suitability': 0,
                'rainfall_suitability': 0,
                'nutrient_suitability': 0
            },
            'reasons': []
        }
        
        # Regional preference (higher weight)
        if region != "Select" and crop['name'] in regional_preferences.get(region, []):
            analysis['score'] += 30
            analysis['details']['regional_preference'] = 30
            analysis['reasons'].append(t('reasons.highly_suitable').format(region))
        elif region != "Select":
            analysis['reasons'].append(t('reasons.not_typical').format(region))
        
        # Soil type match
        if soil_type != "Select" and crop['soil_type'].lower() == soil_type.lower():
            analysis['score'] += 25
            analysis['details']['soil_type'] = 25
            analysis['reasons'].append(t('reasons.ideal_soil').format(soil_type))
        elif soil_type != "Select":
            analysis['reasons'].append(t('reasons.not_optimal_soil').format(soil_type, crop['soil_type']))
        
        # pH suitability
        if crop['ph_min'] <= ph <= crop['ph_max']:
            ph_score = 15
            analysis['reasons'].append(t('reasons.optimal_ph').format(crop['ph_min'], crop['ph_max']))
        else:
            # Calculate penalty based on deviation from optimal range
            if ph < crop['ph_min']:
                deviation = crop['ph_min'] - ph
                ph_score = max(0, 15 - (deviation * 5))
                analysis['reasons'].append(t('reasons.ph_low').format(crop['ph_min'], crop['ph_max']))
            else:
                deviation = ph - crop['ph_max']
                ph_score = max(0, 15 - (deviation * 5))
                analysis['reasons'].append(t('reasons.ph_high').format(crop['ph_min'], crop['ph_max']))
        
        analysis['score'] += ph_score
        analysis['details']['ph_suitability'] = ph_score
        
        # Temperature suitability
        if crop['temp_min'] <= temperature <= crop['temp_max']:
            temp_score = 10
            analysis['reasons'].append(t('reasons.optimal_temp').format(crop['temp_min'], crop['temp_max']))
        else:
            # Calculate penalty based on deviation from optimal range
            if temperature < crop['temp_min']:
                deviation = crop['temp_min'] - temperature
                temp_score = max(0, 10 - (deviation * 0.5))
                analysis['reasons'].append(t('reasons.temp_low').format(crop['temp_min'], crop['temp_max']))
            else:
                deviation = temperature - crop['temp_max']
                temp_score = max(0, 10 - (deviation * 0.5))
                analysis['reasons'].append(t('reasons.temp_high').format(crop['temp_min'], crop['temp_max']))
        
        analysis['score'] += temp_score
        analysis['details']['temperature_suitability'] = temp_score
        
        # Rainfall suitability
        if crop['rainfall_min'] <= rainfall <= crop['rainfall_max']:
            rain_score = 10
            analysis['reasons'].append(t('reasons.optimal_rain').format(crop['rainfall_min'], crop['rainfall_max']))
        else:
            # Calculate penalty based on deviation from optimal range
            if rainfall < crop['rainfall_min']:
                deviation = crop['rainfall_min'] - rainfall
                rain_score = max(0, 10 - (deviation * 0.01))
                analysis['reasons'].append(f"Rainfall slightly high (ideal: {crop['rainfall_min']}-{crop['rainfall_max']}mm)")
        
        analysis['score'] += rain_score
        analysis['details']['rainfall_suitability'] = rain_score
        
        # Nutrient suitability
        n_score = 8 if crop['n_min'] <= nitrogen <= crop['n_max'] else max(0, 8 - abs(nitrogen - (crop['n_min'] + crop['n_max'])/2) * 0.2)
        p_score = 8 if crop['p_min'] <= phosphorus <= crop['p_max'] else max(0, 8 - abs(phosphorus - (crop['p_min'] + crop['p_max'])/2) * 0.2)
        k_score = 9 if crop['k_min'] <= potassium <= crop['k_max'] else max(0, 9 - abs(potassium - (crop['k_min'] + crop['k_max'])/2) * 0.2)
        
        nutrient_score = n_score + p_score + k_score
        analysis['score'] += nutrient_score
        analysis['details']['nutrient_suitability'] = nutrient_score
        
        if n_score < 5:
            analysis['reasons'].append(f"Nitrogen level not optimal for {crop['name']}")
        if p_score < 5:
            analysis['reasons'].append(f"Phosphorus level not optimal for {crop['name']}")
        if k_score < 5:
            analysis['reasons'].append(f"Potassium level not optimal for {crop['name']}")
        
        crop_analyses.append(analysis)
    
    # Sort by score
    crop_analyses.sort(key=lambda x: x['score'], reverse=True)
    
    # Generate detailed recommendations for top 3 crops
    recommendations = []
    planting_times = {
        'Wheat': 'October-November',
        'Rice': 'June-July', 
        'Maize': 'April-May',
        'Cotton': 'May-June',
        'Soybean': 'June-July',
        'Pulses': 'October-November',
        'Sugarcane': 'February-March',
        'Groundnut': 'June-July'
    }
    
    for i, analysis in enumerate(crop_analyses[:3]):
        crop_name = analysis['name']
        recommendations.append({
            'rank': i+1,
            'crop': crop_name,
            'score': analysis['score'],
            'probability': min(95, max(65, int(analysis['score']))),
            'yield': f"{np.random.uniform(2.0, 5.0):.1f}",
            'reasons': analysis['reasons'],
            'details': analysis['details'],
            'planting_time': planting_times.get(crop_name, 'Varies by region'),
            'water_req': 'Moderate (600-800 mm)' if crop_name in ['Wheat', 'Maize'] else 
                         'High (1000-1500 mm)' if crop_name == 'Rice' else
                         'Low (400-600 mm)' if crop_name == 'Cotton' else 
                         'Moderate (500-700 mm)' if crop_name in ['Soybean', 'Pulses'] else
                         'High (1200-1800 mm)' if crop_name == 'Sugarcane' else
                         'Moderate (500-800 mm)',
            'fertilizer': 'N:P:K = 60:40:40 kg/ha' if crop_name == 'Wheat' else 
                          'N:P:K = 80:40:40 kg/ha' if crop_name == 'Rice' else
                          'N:P:K = 100:50:50 kg/ha' if crop_name == 'Maize' else
                          'N:P:K = 50:25:25 kg/ha' if crop_name == 'Cotton' else 
                          'N:P:K = 40:60:40 kg/ha' if crop_name == 'Soybean' else
                          'N:P:K = 150:60:100 kg/ha' if crop_name == 'Sugarcane' else
                          'N:P:K = 20:50:40 kg/ha',
            'harvest_time': 'March-April' if crop_name == 'Wheat' else 
                            'October-November' if crop_name == 'Rice' else
                            'August-September' if crop_name == 'Maize' else
                            'October-December' if crop_name == 'Cotton' else 
                            'September-October' if crop_name == 'Soybean' else
                            'February-March' if crop_name == 'Sugarcane' else
                            'September-October',
            'market_price': f"‚Çπ{np.random.randint(25, 55)}",
            'demand_trend': 'High' if crop_name in ['Rice', 'Wheat'] else 
                            'Moderate' if crop_name in ['Maize', 'Cotton'] else
                            'Stable'
        })
    
    return recommendations

# Function to create suitability visualization
def create_suitability_chart(details, crop_name):
    categories = ['Regional\nPreference', 'Soil Type\nMatch', 'pH\nSuitability', 
                 'Temperature\nSuitability', 'Rainfall\nSuitability', 'Nutrient\nSuitability']
    values = [details['regional_preference'], details['soil_type'], details['ph_suitability'],
             details['temperature_suitability'], details['rainfall_suitability'], details['nutrient_suitability']]
    max_values = [30, 25, 15, 10, 10, 25]  # Maximum possible scores for each category
    
    fig = go.Figure()
    
    # Add actual values
    fig.add_trace(go.Scatterpolar(
        r=values,
        theta=categories,
        fill='toself',
        name='Actual Suitability',
        line_color='#4CAF50'
    ))
    
    # Add maximum possible values (for reference)
    fig.add_trace(go.Scatterpolar(
        r=max_values,
        theta=categories,
        fill='toself',
        name='Maximum Possible',
        line_color='#FF9800',
        opacity=0.2
    ))
    
    fig.update_layout(
        polar=dict(
            radialaxis=dict(
                visible=True,
                range=[0, 30]  # Set range based on maximum value
            )),
        showlegend=True,
        title=f"Suitability Analysis for {crop_name}"
    )
    
    return fig

# Function to display detailed factor analysis
def display_factor_analysis(details):
    st.markdown("#### Detailed Factor Analysis")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown(f"Regional Preference")
        st.markdown(f'<p class="factor-score">{details["regional_preference"]}/30</p>', unsafe_allow_html=True)
        st.progress(details["regional_preference"]/30)
        
        st.markdown(f"Soil Type Match")
        st.markdown(f'<p class="factor-score">{details["soil_type"]}/25</p>', unsafe_allow_html=True)
        st.progress(details["soil_type"]/25)
    
    with col2:
        st.markdown(f"pH Suitability")
        st.markdown(f'<p class="factor-score">{details["ph_suitability"]}/15</p>', unsafe_allow_html=True)
        st.progress(details["ph_suitability"]/15)
        
        st.markdown(f"Temperature Suitability")
        st.markdown(f'<p class="factor-score">{details["temperature_suitability"]}/10</p>', unsafe_allow_html=True)
        st.progress(details["temperature_suitability"]/10)
    
    with col3:
        st.markdown(f"Rainfall Suitability")
        st.markdown(f'<p class="factor-score">{details["rainfall_suitability"]}/10</p>', unsafe_allow_html=True)
        st.progress(details["rainfall_suitability"]/10)
        
        st.markdown(f"Nutrient Suitability")
        st.markdown(f'<p class="factor-score">{details["nutrient_suitability"]}/25</p>', unsafe_allow_html=True)
        st.progress(details["nutrient_suitability"]/25)

# Main content
tab1, tab2, tab3, tab4 = st.tabs(["Dashboard", "Crop Recommendation", "Soil Analysis", "Weather Forecast"])

with tab1:
    st.markdown('<h2 class="sub-header">Farm Overview</h2>', unsafe_allow_html=True)
    
    col1, col2, col3 = st.columns(3)
    with col1: st.markdown('<div class="card"><h3>Farm Size</h3><p style="font-size: 24px; color: #2E8B57;">' + str(farm_size) + ' acres</p></div>', unsafe_allow_html=True)
    with col2: 
        soil_display = soil_type if soil_type != "Select" else "Not specified"
        st.markdown('<div class="card"><h3>Soil Type</h3><p style="font-size: 24px; color: #2E8B57;">' + soil_display + '</p></div>', unsafe_allow_html=True)
    with col3: 
        region_display = farm_location if farm_location != "Select" else "Not specified"
        st.markdown('<div class="card"><h3>Region</h3><p style="font-size: 24px; color: #2E8B57;">' + region_display + '</p></div>', unsafe_allow_html=True)

with tab2:
    st.markdown('<h2 class="sub-header">Crop Recommendation</h2>', unsafe_allow_html=True)
    
    if analyze_button:
        with st.spinner('Analyzing your farm data and generating recommendations...'):
            progress_bar = st.progress(0)
            for percent_complete in range(100):
                time.sleep(0.01)
                progress_bar.progress(percent_complete + 1)
            
            recommendations = predict_best_crop(soil_type, soil_ph, nitrogen, phosphorus, 
                                              potassium, temperature, rainfall, humidity, farm_location)
            
            # Display top recommendation
            top_recommendation = recommendations[0]
            st.markdown('<div class="recommendation-card">', unsafe_allow_html=True)
            st.markdown(f"### üå± Top Recommendation: {top_recommendation['crop']}")
            st.markdown(f"Expected Yield: {top_recommendation['yield']} tons/acre")
            st.markdown(f"Success Probability: {top_recommendation['probability']}%")
            st.markdown('</div>', unsafe_allow_html=True)
            
            # Display suitability chart
            st.plotly_chart(create_suitability_chart(top_recommendation['details'], top_recommendation['crop']), 
                           use_container_width=True)
            
            # Display detailed factor analysis
            display_factor_analysis(top_recommendation['details'])
            
            # Display reasons
            st.markdown("#### Why this crop?")
            for reason in top_recommendation['reasons']:
                st.info(f"‚Ä¢ {reason}")
            
            # Display crop details
            col1, col2 = st.columns(2)
            with col1:
                st.markdown("Best Planting Time")
                st.write(top_recommendation['planting_time'])
                st.markdown("Water Requirements")
                st.write(top_recommendation['water_req'])
            with col2:
                st.markdown("Fertilizer Recommendations")
                st.write(top_recommendation['fertilizer'])
                st.markdown("Harvest Timeline")
                st.write(top_recommendation['harvest_time'])
            
            # Display market insights
            st.markdown("#### Market Insights")
            st.success(f"Current market price: {top_recommendation['market_price']} per kg")
            st.write(f"Demand trend: {top_recommendation['demand_trend']}")
            
            # Show alternative options
            if len(recommendations) > 1:
                st.markdown("#### Alternative Options")
                cols = st.columns(len(recommendations) - 1)
                for idx, rec in enumerate(recommendations[1:]):
                    with cols[idx]:
                        st.markdown(f'<div class="analysis-card"><h4>{rec["crop"]}</h4><p>Score: {rec["score"]:.1f}</p><p>Probability: {rec["probability"]}%</p></div>', 
                                  unsafe_allow_html=True)
    
    else:
        st.info("Click the 'Analyze & Recommend' button in the sidebar to get crop recommendations")

with tab3:
    st.markdown('<h2 class="sub-header">Soil Analysis</h2>', unsafe_allow_html=True)
    
    if soil_type != "Select":
        try:
            soil_img = Image.open(f"assets/soil_types/{soil_type.lower()}.png")
            st.image(soil_img, caption=f"{soil_type} Soil", use_container_width=True)
        except:
            st.warning("Soil image not available")
    
    col1, col2, col3, col4 = st.columns(4)
    with col1: 
        st.markdown('<div class="weather-card"><h4>pH Level</h4><p style="font-size: 20px;">' + str(soil_ph) + '</p></div>', unsafe_allow_html=True)
    with col2: 
        st.markdown('<div class="weather-card"><h4>Moisture</h4><p style="font-size: 20px;">' + str(soil_moisture) + '%</p></div>', unsafe_allow_html=True)
    with col3: 
        st.markdown('<div class="weather-card"><h4>Nitrogen</h4><p style="font-size: 20px;">' + str(nitrogen) + ' kg/ha</p></div>', unsafe_allow_html=True)
    with col4: 
        st.markdown('<div class="weather-card"><h4>Organic Matter</h4><p style="font-size: 20px;">3.2%</p></div>', unsafe_allow_html=True)
    
    col1, col2 = st.columns(2)
    with col1: 
        st.markdown('<div class="weather-card"><h4>Phosphorus</h4><p style="font-size: 20px;">' + str(phosphorus) + ' kg/ha</p></div>', unsafe_allow_html=True)
    with col2: 
        st.markdown('<div class="weather-card"><h4>Potassium</h4><p style="font-size: 20px;">' + str(potassium) + ' kg/ha</p></div>', unsafe_allow_html=True)

with tab4:
    st.markdown('<h2 class="sub-header">Weather Forecast</h2>', unsafe_allow_html=True)
    
    col1, col2, col3, col4 = st.columns(4)
    with col1: 
        st.markdown('<div class="weather-card"><h4>Temperature</h4><p style="font-size: 20px;">' + str(temperature) + '¬∞C</p></div>', unsafe_allow_html=True)
    with col2: 
        st.markdown('<div class="weather-card"><h4>Humidity</h4><p style="font-size: 20px;">' + str(humidity) + '%</p></div>', unsafe_allow_html=True)
    with col3: 
        st.markdown('<div class="weather-card"><h4>Rainfall</h4><p style="font-size: 20px;">' + str(rainfall) + ' mm</p></div>', unsafe_allow_html=True)
    with col4: 
        st.markdown('<div class="weather-card"><h4>Wind Speed</h4><p style="font-size: 20px;">12 km/h</p></div>', unsafe_allow_html=True)
    
    # Generate forecast data
    dates = [datetime.now() + timedelta(days=i) for i in range(7)]
    temp_forecast = [temperature + np.random.uniform(-3, 3) for _ in range(7)]
    rain_forecast = [max(0, rainfall/365 + np.random.uniform(-2, 5)) for _ in range(7)]
    
    # Create forecast chart
    fig = go.Figure()
    fig.add_trace(go.Scatter(x=dates, y=temp_forecast, mode='lines+markers', name='Temperature (¬∞C)', line=dict(color='red')))
    fig.add_trace(go.Bar(x=dates, y=rain_forecast, name='Rainfall (mm)', yaxis='y2', marker_color='blue'))
    
    fig.update_layout(
        title='7-Day Weather Forecast',
        xaxis=dict(title='Date'),
        yaxis=dict(title='Temperature (¬∞C)', side='left', showgrid=False),
        yaxis2=dict(title='Rainfall (mm)', side='right', overlaying='y', showgrid=False),
        legend=dict(x=0, y=1.1, orientation='h')
    )
    
    st.plotly_chart(fig, use_container_width=True)

# Footer
st.markdown("""
<div class="footer">
    <p>Created with ‚ù§ by <span class="team-name">Team AgroNova</span> for SIH 2025</p>
    <p>VARUN AI - Vikasit Adhunik Roopantaran ke liye Uttam Nirdesh</p>
</div>
""", unsafe_allow_html=True)
