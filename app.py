import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from PIL import Image, ImageDraw, ImageFont
import time
from datetime import datetime, timedelta
import os

# Page configuration
st.set_page_config(
    page_title="VARUN AI Crop Recommendation",
    page_icon="üåæ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Language data - All integrated in one file
LANGUAGES = {
    'en': {
        'name': 'English',
        'ui': {
            'tagline': 'Modern Transformation for Optimal Guidance',
            'farmer_details': 'Farmer Details',
            'full_name': 'Full Name',
            'region': 'Region',
            'farm_size': 'Farm Size (acres)',
            'soil_properties': 'Soil Properties',
            'soil_type': 'Soil Type',
            'soil_ph': 'Soil pH',
            'soil_moisture': 'Soil Moisture (%)',
            'nitrogen': 'Nitrogen (kg/ha)',
            'phosphorus': 'Phosphorus (kg/ha)',
            'potassium': 'Potassium (kg/ha)',
            'environmental_factors': 'Environmental Factors',
            'temperature': 'Temperature (¬∞C)',
            'rainfall': 'Annual Rainfall (mm)',
            'humidity': 'Humidity (%)',
            'analyze_button': 'Analyze & Recommend',
            'dashboard': 'Dashboard',
            'crop_recommendation': 'Crop Recommendation',
            'soil_analysis': 'Soil Analysis',
            'weather_forecast': 'Weather Forecast',
            'farm_overview': 'Farm Overview',
            'recommended_crop': 'Recommended Crop',
            'expected_yield': 'Expected Yield',
            'success_probability': 'Success Probability',
            'why_this_crop': 'Why this crop?',
            'planting_guide': 'Planting Guide',
            'best_planting_time': 'Best Planting Time',
            'water_requirements': 'Water Requirements',
            'fertilizer_recommendations': 'Fertilizer Recommendations',
            'harvest_timeline': 'Harvest Timeline',
            'market_insights': 'Market Insights',
            'current_market_price': 'Current market price',
            'demand_trend': 'Demand trend',
            'click_to_analyze': 'Click the Analyze & Recommend button to get crop recommendations',
            'ph_level': 'pH Level',
            'moisture': 'Moisture',
            'organic_matter': 'Organic Matter',
            'wind_speed': 'Wind Speed',
            'created_by': 'Created with ‚ù§Ô∏è by',
            'team_name': 'Team AgroNova',
            'for_sih': 'for SIH 2025'
        },
        'states': {
            "Punjab": "Punjab",
            "Haryana": "Haryana",
            "Uttar Pradesh": "Uttar Pradesh",
            "Maharashtra": "Maharashtra",
            "Karnataka": "Karnataka",
            "Tamil Nadu": "Tamil Nadu",
            "Andhra Pradesh": "Andhra Pradesh",
            "Gujarat": "Gujarat",
            "Odisha": "Odisha",
            "Jharkhand": "Jharkhand",
            "West Bengal": "West Bengal",
            "Bihar": "Bihar"
        },
        'crops': {
            'Wheat': 'Wheat',
            'Rice': 'Rice',
            'Maize': 'Maize',
            'Cotton': 'Cotton',
            'Soybean': 'Soybean',
            'Pulses': 'Pulses'
        }
    },
    'hi': {
        'name': '‡§π‡§ø‡§Ç‡§¶‡•Ä',
        'ui': {
            'tagline': '‡§Ü‡§ß‡•Å‡§®‡§ø‡§ï ‡§∞‡•Ç‡§™‡§æ‡§Ç‡§§‡§∞‡§£ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§â‡§§‡•ç‡§§‡§Æ ‡§®‡§ø‡§∞‡•ç‡§¶‡•á‡§∂',
            'farmer_details': '‡§ï‡§ø‡§∏‡§æ‡§® ‡§ï‡§æ ‡§µ‡§ø‡§µ‡§∞‡§£',
            'full_name': '‡§™‡•Ç‡§∞‡§æ ‡§®‡§æ‡§Æ',
            'region': '‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞',
            'farm_size': '‡§ñ‡•á‡§§ ‡§ï‡§æ ‡§Ü‡§ï‡§æ‡§∞ (‡§è‡§ï‡§°‡§º)',
            'soil_properties': '‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡•á ‡§ó‡•Å‡§£',
            'soil_type': '‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡§æ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞',
            'soil_ph': '‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡§æ ‡§™‡•Ä‡§è‡§ö',
            'soil_moisture': '‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡•Ä ‡§®‡§Æ‡•Ä (%)',
            'nitrogen': '‡§®‡§æ‡§á‡§ü‡•ç‡§∞‡•ã‡§ú‡§® (kg/ha)',
            'phosphorus': '‡§´‡•â‡§∏‡•ç‡§´‡•ã‡§∞‡§∏ (kg/ha)',
            'potassium': '‡§™‡•ã‡§ü‡•à‡§∂‡§ø‡§Ø‡§Æ (kg/ha)',
            'environmental_factors': '‡§™‡§∞‡•ç‡§Ø‡§æ‡§µ‡§∞‡§£‡•Ä‡§Ø ‡§ï‡§æ‡§∞‡§ï',
            'temperature': '‡§§‡§æ‡§™‡§Æ‡§æ‡§® (¬∞C)',
            'rainfall': '‡§µ‡§æ‡§∞‡•ç‡§∑‡§ø‡§ï ‡§µ‡§∞‡•ç‡§∑‡§æ (mm)',
            'humidity': '‡§Ü‡§∞‡•ç‡§¶‡•ç‡§∞‡§§‡§æ (%)',
            'analyze_button': '‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§∏‡§ø‡§´‡§æ‡§∞‡§ø‡§∂ ‡§ï‡§∞‡•á‡§Ç',
            'dashboard': '‡§°‡•à‡§∂‡§¨‡•ã‡§∞‡•ç‡§°',
            'crop_recommendation': '‡§´‡§∏‡§≤ ‡§∏‡§ø‡§´‡§æ‡§∞‡§ø‡§∂',
            'soil_analysis': '‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£',
            'weather_forecast': '‡§Æ‡•å‡§∏‡§Æ ‡§™‡•Ç‡§∞‡•ç‡§µ‡§æ‡§®‡•Å‡§Æ‡§æ‡§®',
            'farm_overview': '‡§ñ‡•á‡§§ ‡§ï‡§æ ‡§Ö‡§µ‡§≤‡•ã‡§ï‡§®',
            'recommended_crop': '‡§∏‡•Å‡§ù‡§æ‡§à ‡§ó‡§à ‡§´‡§∏‡§≤',
            'expected_yield': '‡§Ö‡§®‡•Å‡§Æ‡§æ‡§®‡§ø‡§§ ‡§â‡§™‡§ú',
            'success_probability': '‡§∏‡§´‡§≤‡§§‡§æ ‡§ï‡•Ä ‡§∏‡§Ç‡§≠‡§æ‡§µ‡§®‡§æ',
            'why_this_crop': '‡§Ø‡§π ‡§´‡§∏‡§≤ ‡§ï‡•ç‡§Ø‡•ã‡§Ç?',
            'planting_guide': '‡§∞‡•ã‡§™‡§£ ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§ø‡§ï‡§æ',
            'best_planting_time': '‡§∏‡§∞‡•ç‡§µ‡•ã‡§§‡•ç‡§§‡§Æ ‡§∞‡•ã‡§™‡§£ ‡§∏‡§Æ‡§Ø',
            'water_requirements': '‡§™‡§æ‡§®‡•Ä ‡§ï‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ',
            'fertilizer_recommendations': '‡§â‡§∞‡•ç‡§µ‡§∞‡§ï ‡§∏‡§ø‡§´‡§æ‡§∞‡§ø‡§∂‡•á‡§Ç',
            'harvest_timeline': '‡§´‡§∏‡§≤ ‡§ï‡§ü‡§æ‡§à ‡§ï‡§æ ‡§∏‡§Æ‡§Ø',
            'market_insights': '‡§¨‡§æ‡§ú‡§æ‡§∞ ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä',
            'current_market_price': '‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§¨‡§æ‡§ú‡§æ‡§∞ ‡§Æ‡•Ç‡§≤‡•ç‡§Ø',
            'demand_trend': '‡§Æ‡§æ‡§Ç‡§ó ‡§ï‡•Ä ‡§™‡•ç‡§∞‡§µ‡•É‡§§‡•ç‡§§‡§ø',
            'click_to_analyze': '‡§´‡§∏‡§≤ ‡§∏‡§ø‡§´‡§æ‡§∞‡§ø‡§∂‡•á‡§Ç ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§¨‡§ü‡§® ‡§™‡§∞ ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞‡•á‡§Ç',
            'ph_level': '‡§™‡•Ä‡§è‡§ö ‡§∏‡•ç‡§§‡§∞',
            'moisture': '‡§®‡§Æ‡•Ä',
            'organic_matter': '‡§ï‡§æ‡§∞‡•ç‡§¨‡§®‡§ø‡§ï ‡§™‡§¶‡§æ‡§∞‡•ç‡§•',
            'wind_speed': '‡§π‡§µ‡§æ ‡§ï‡•Ä ‡§ó‡§§‡§ø',
            'created_by': '‚ù§Ô∏è ‡§∏‡•á ‡§¨‡§®‡§æ‡§Ø‡§æ ‡§ó‡§Ø‡§æ',
            'team_name': '‡§ü‡•Ä‡§Æ ‡§è‡§ó‡•ç‡§∞‡•ã‡§®‡•ã‡§µ‡§æ',
            'for_sih': '‡§è‡§∏‡§Ü‡§à‡§è‡§ö 2025 ‡§ï‡•á ‡§≤‡§ø‡§è'
        },
        'states': {
            "Punjab": "‡§™‡§Ç‡§ú‡§æ‡§¨",
            "Haryana": "‡§π‡§∞‡§ø‡§Ø‡§æ‡§£‡§æ",
            "Uttar Pradesh": "‡§â‡§§‡•ç‡§§‡§∞ ‡§™‡•ç‡§∞‡§¶‡•á‡§∂",
            "Maharashtra": "‡§Æ‡§π‡§æ‡§∞‡§æ‡§∑‡•ç‡§ü‡•ç‡§∞",
            "Karnataka": "‡§ï‡§∞‡•ç‡§®‡§æ‡§ü‡§ï",
            "Tamil Nadu": "‡§§‡§Æ‡§ø‡§≤ ‡§®‡§æ‡§°‡•Å",
            "Andhra Pradesh": "‡§Ü‡§Ç‡§ß‡•ç‡§∞ ‡§™‡•ç‡§∞‡§¶‡•á‡§∂",
            "Gujarat": "‡§ó‡•Å‡§ú‡§∞‡§æ‡§§",
            "Odisha": "‡§ì‡§°‡§ø‡§∂‡§æ",
            "Jharkhand": "‡§ù‡§æ‡§∞‡§ñ‡§Ç‡§°",
            "West Bengal": "‡§™‡§∂‡•ç‡§ö‡§ø‡§Æ ‡§¨‡§Ç‡§ó‡§æ‡§≤",
            "Bihar": "‡§¨‡§ø‡§π‡§æ‡§∞"
        },
        'crops': {
            'Wheat': '‡§ó‡•á‡§π‡•Ç‡§Ç',
            'Rice': '‡§ö‡§æ‡§µ‡§≤',
            'Maize': '‡§Æ‡§ï‡•ç‡§ï‡§æ',
            'Cotton': '‡§ï‡§™‡§æ‡§∏',
            'Soybean': '‡§∏‡•ã‡§Ø‡§æ‡§¨‡•Ä‡§®',
            'Pulses': '‡§¶‡§≤‡§π‡§®'
        }
    },
    'te': {
        'name': '‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å',
        'ui': {
            'tagline': '‡∞Ü‡∞ß‡±Å‡∞®‡∞ø‡∞ï ‡∞∞‡±Ç‡∞™‡∞æ‡∞Ç‡∞§‡∞∞‡∞Ç ‡∞ï‡±ã‡∞∏‡∞Ç ‡∞â‡∞§‡±ç‡∞§‡∞Æ ‡∞Æ‡∞æ‡∞∞‡±ç‡∞ó‡∞¶‡∞∞‡±ç‡∞∂‡∞ï‡∞§‡±ç‡∞µ‡∞Ç',
            'farmer_details': '‡∞∞‡±à‡∞§‡±Å ‡∞µ‡∞ø‡∞µ‡∞∞‡∞æ‡∞≤‡±Å',
            'full_name': '‡∞™‡±Ç‡∞∞‡±ç‡∞§‡∞ø ‡∞™‡±á‡∞∞‡±Å',
            'region': '‡∞™‡±ç‡∞∞‡∞æ‡∞Ç‡∞§‡∞Ç',
            'farm_size': '‡∞µ‡±ç‡∞Ø‡∞µ‡∞∏‡∞æ‡∞Ø ‡∞≠‡±Ç‡∞Æ‡∞ø ‡∞™‡∞∞‡∞ø‡∞Æ‡∞æ‡∞£‡∞Ç (‡∞é‡∞ï‡∞∞‡∞æ‡∞≤‡±Å)',
            'soil_properties': '‡∞®‡±á‡∞≤ ‡∞≤‡∞ï‡±ç‡∞∑‡∞£‡∞æ‡∞≤‡±Å',
            'soil_type': '‡∞®‡±á‡∞≤ ‡∞∞‡∞ï‡∞Ç',
            'soil_ph': '‡∞®‡±á‡∞≤ pH',
            'soil_moisture': '‡∞®‡±á‡∞≤ ‡∞§‡±á‡∞Æ (%)',
            'nitrogen': '‡∞®‡∞§‡±ç‡∞∞‡∞ú‡∞®‡∞ø (kg/ha)',
            'phosphorus': '‡∞≠‡∞æ‡∞∏‡±ç‡∞µ‡∞∞‡∞Ç (kg/ha)',
            'potassium': '‡∞™‡±ä‡∞ü‡∞æ‡∞∑‡∞ø‡∞Ø‡∞Ç (kg/ha)',
            'environmental_factors': '‡∞™‡∞∞‡±ç‡∞Ø‡∞æ‡∞µ‡∞∞‡∞£ ‡∞ï‡∞æ‡∞∞‡∞ï‡∞æ‡∞≤‡±Å',
            'temperature': '‡∞â‡∞∑‡±ç‡∞£‡±ã‡∞ó‡±ç‡∞∞‡∞§ (¬∞C)',
            'rainfall': '‡∞µ‡∞æ‡∞∞‡±ç‡∞∑‡∞ø‡∞ï ‡∞µ‡∞∞‡±ç‡∞∑‡∞™‡∞æ‡∞§‡∞Ç (mm)',
            'humidity': '‡∞Ü‡∞∞‡±ç‡∞¶‡±ç‡∞∞‡∞§ (%)',
            'analyze_button': '‡∞µ‡∞ø‡∞∂‡±ç‡∞≤‡±á‡∞∑‡∞ø‡∞Ç‡∞ö‡±Å ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞∏‡∞ø‡∞´‡∞æ‡∞∞‡±ç‡∞∏‡±Å ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø',
            'dashboard': '‡∞°‡∞æ‡∞∑‡±ç‡∞¨‡±ã‡∞∞‡±ç‡∞°‡±ç',
            'crop_recommendation': '‡∞™‡∞Ç‡∞ü ‡∞∏‡∞ø‡∞´‡∞æ‡∞∞‡±ç‡∞∏‡±Å',
            'soil_analysis': '‡∞®‡±á‡∞≤ ‡∞µ‡∞ø‡∞∂‡±ç‡∞≤‡±á‡∞∑‡∞£',
            'weather_forecast': '‡∞µ‡∞æ‡∞§‡∞æ‡∞µ‡∞∞‡∞£ ‡∞∏‡±Ç‡∞ö‡∞®',
            'farm_overview': '‡∞µ‡±ç‡∞Ø‡∞µ‡∞∏‡∞æ‡∞Ø ‡∞≠‡±Ç‡∞Æ‡∞ø ‡∞Ö‡∞µ‡∞≤‡±ã‡∞ï‡∞®‡∞Ç',
            'recommended_crop': '‡∞∏‡∞ø‡∞´‡∞æ‡∞∞‡±ç‡∞∏‡±Å ‡∞ö‡±á‡∞Ø‡∞¨‡∞°‡∞ø‡∞® ‡∞™‡∞Ç‡∞ü',
            'expected_yield': '‡∞Ö‡∞Ç‡∞ö‡∞®‡∞æ ‡∞¶‡∞ø‡∞ó‡±Å‡∞¨‡∞°‡∞ø',
            'success_probability': '‡∞µ‡∞ø‡∞ú‡∞Ø ‡∞∏‡∞Ç‡∞≠‡∞æ‡∞µ‡±ç‡∞Ø‡∞§',
            'why_this_crop': '‡∞à ‡∞™‡∞Ç‡∞ü ‡∞é‡∞Ç‡∞¶‡±Å‡∞ï‡±Å?',
            'planting_guide': '‡∞®‡∞æ‡∞ü‡∞°‡∞Ç ‡∞ó‡±à‡∞°‡±ç',
            'best_planting_time': '‡∞â‡∞§‡±ç‡∞§‡∞Æ ‡∞®‡∞æ‡∞ü‡±á ‡∞∏‡∞Æ‡∞Ø‡∞Ç',
            'water_requirements': '‡∞®‡±Ä‡∞ü‡∞ø ‡∞Ö‡∞µ‡∞∏‡∞∞‡∞æ‡∞≤‡±Å',
            'fertilizer_recommendations': '‡∞é‡∞∞‡±Å‡∞µ‡±Å ‡∞∏‡∞ø‡∞´‡∞æ‡∞∞‡±ç‡∞∏‡±Å‡∞≤‡±Å',
            'harvest_timeline': '‡∞™‡∞Ç‡∞ü ‡∞ï‡±ã‡∞§ ‡∞∏‡∞Æ‡∞Ø‡∞Ç',
            'market_insights': '‡∞Æ‡∞æ‡∞∞‡±ç‡∞ï‡±Ü‡∞ü‡±ç ‡∞Ö‡∞Ç‡∞§‡∞∞‡±ç‡∞¶‡±É‡∞∑‡±ç‡∞ü‡±Å‡∞≤‡±Å',
            'current_market_price': '‡∞™‡±ç‡∞∞‡∞∏‡±ç‡∞§‡±Å‡∞§ ‡∞Æ‡∞æ‡∞∞‡±ç‡∞ï‡±Ü‡∞ü‡±ç ‡∞ß‡∞∞',
            'demand_trend': '‡∞°‡∞ø‡∞Æ‡∞æ‡∞Ç‡∞°‡±ç ‡∞ü‡±ç‡∞∞‡±Ü‡∞Ç‡∞°‡±ç',
            'click_to_analyze': '‡∞™‡∞Ç‡∞ü ‡∞∏‡∞ø‡∞´‡∞æ‡∞∞‡±ç‡∞∏‡±Å‡∞≤‡∞®‡±Å ‡∞™‡±ä‡∞Ç‡∞¶‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞µ‡∞ø‡∞∂‡±ç‡∞≤‡±á‡∞∑‡∞ø‡∞Ç‡∞ö‡±Å ‡∞¨‡∞ü‡∞®‡±ç ‡∞™‡±à ‡∞ï‡±ç‡∞≤‡∞ø‡∞ï‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø',
            'ph_level': 'pH ‡∞∏‡±ç‡∞•‡∞æ‡∞Ø‡∞ø',
            'moisture': '‡∞§‡±á‡∞Æ',
            'organic_matter': '‡∞∏‡±á‡∞Ç‡∞¶‡±ç‡∞∞‡±Ä‡∞Ø ‡∞™‡∞¶‡∞æ‡∞∞‡±ç‡∞•‡∞Ç',
            'wind_speed': '‡∞ó‡∞æ‡∞≤‡∞ø ‡∞µ‡±á‡∞ó‡∞Ç',
            'created_by': '‚ù§Ô∏è ‡∞§‡±ã ‡∞∏‡±É‡∞∑‡±ç‡∞ü‡∞ø‡∞Ç‡∞ö‡∞¨‡∞°‡∞ø‡∞Ç‡∞¶‡∞ø',
            'team_name': '‡∞ü‡±Ä‡∞Æ‡±ç ‡∞Ö‡∞ó‡±ç‡∞∞‡±ã‡∞®‡±ã‡∞µ‡∞æ',
            'for_sih': 'SIH 2025 ‡∞ï‡±ã‡∞∏‡∞Ç'
        },
        'states': {
            "Punjab": "‡∞™‡∞Ç‡∞ú‡∞æ‡∞¨‡±ç",
            "Haryana": "‡∞π‡∞∞‡±ç‡∞Ø‡∞æ‡∞®‡∞æ",
            "Uttar Pradesh": "‡∞â‡∞§‡±ç‡∞§‡∞∞ ‡∞™‡±ç‡∞∞‡∞¶‡±á‡∞∂‡±ç",
            "Maharashtra": "‡∞Æ‡∞π‡∞æ‡∞∞‡∞æ‡∞∑‡±ç‡∞ü‡±ç‡∞∞",
            "Karnataka": "‡∞ï‡∞∞‡±ç‡∞£‡∞æ‡∞ü‡∞ï",
            "Tamil Nadu": "‡∞§‡∞Æ‡∞ø‡∞≥‡∞®‡∞æ‡∞°‡±Å",
            "Andhra Pradesh": "‡∞Ü‡∞Ç‡∞ß‡±ç‡∞∞‡∞™‡±ç‡∞∞‡∞¶‡±á‡∞∂‡±ç",
            "Gujarat": "‡∞ó‡±Å‡∞ú‡∞∞‡∞æ‡∞§‡±ç",
            "Odisha": "‡∞í‡∞°‡∞ø‡∞∂‡∞æ",
            "Jharkhand": "‡∞ù‡∞æ‡∞∞‡±ç‡∞ñ‡∞Ç‡∞°‡±ç",
            "West Bengal": "‡∞™‡∞∂‡±ç‡∞ö‡∞ø‡∞Æ ‡∞¨‡±Ü‡∞Ç‡∞ó‡∞æ‡∞≤‡±ç",
            "Bihar": "‡∞¨‡±Ä‡∞π‡∞æ‡∞∞‡±ç"
        },
        'crops': {
            'Wheat': '‡∞ó‡±ã‡∞ß‡±Å‡∞Æ',
            'Rice': '‡∞µ‡∞∞‡∞ø',
            'Maize': '‡∞Æ‡±ä‡∞ï‡±ç‡∞ï‡∞ú‡±ä‡∞®‡±ç‡∞®',
            'Cotton': '‡∞™‡∞§‡±ç‡∞§‡∞ø',
            'Soybean': '‡∞∏‡±ã‡∞Ø‡∞æ',
            'Pulses': '‡∞™‡∞™‡±ç‡∞™‡±Å‡∞≤‡±Å'
        }
    },
    'bn': {
        'name': '‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ',
        'ui': {
            'tagline': '‡¶Ü‡¶ß‡ßÅ‡¶®‡¶ø‡¶ï ‡¶∞‡ßÇ‡¶™‡¶æ‡¶®‡ßç‡¶§‡¶∞‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶§‡ßç‡¶§‡¶Æ ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡ßá‡¶∂‡¶®‡¶æ',
            'farmer_details': '‡¶ï‡ßÉ‡¶∑‡¶ï‡ßá‡¶∞ ‡¶¨‡¶ø‡¶¨‡¶∞‡¶£',
            'full_name': '‡¶™‡ßÅ‡¶∞‡ßã ‡¶®‡¶æ‡¶Æ',
            'region': '‡¶Ö‡¶û‡ßç‡¶ö‡¶≤',
            'farm_size': '‡¶ñ‡¶æ‡¶Æ‡¶æ‡¶∞‡ßá‡¶∞ ‡¶Ü‡¶ï‡¶æ‡¶∞ (‡¶è‡¶ï‡¶∞)',
            'soil_properties': '‡¶Æ‡¶æ‡¶ü‡¶ø‡¶∞ ‡¶¨‡ßà‡¶∂‡¶ø‡¶∑‡ßç‡¶ü‡ßç‡¶Ø',
            'soil_type': '‡¶Æ‡¶æ‡¶ü‡¶ø‡¶∞ ‡¶ß‡¶∞‡¶®',
            'soil_ph': '‡¶Æ‡¶æ‡¶ü‡¶ø‡¶∞ pH',
            'soil_moisture': '‡¶Æ‡¶æ‡¶ü‡¶ø‡¶∞ ‡¶Ü‡¶∞‡ßç‡¶¶‡ßç‡¶∞‡¶§‡¶æ (%)',
            'nitrogen': '‡¶®‡¶æ‡¶á‡¶ü‡ßç‡¶∞‡ßã‡¶ú‡ßá‡¶® (kg/ha)',
            'phosphorus': '‡¶´‡¶∏‡¶´‡¶∞‡¶æ‡¶∏ (kg/ha)',
            'potassium': '‡¶™‡¶ü‡¶æ‡¶∏‡¶ø‡¶Ø‡¶º‡¶æ‡¶Æ (kg/ha)',
            'environmental_factors': '‡¶™‡¶∞‡¶ø‡¶¨‡ßá‡¶∂‡¶ó‡¶§ ‡¶ï‡¶æ‡¶∞‡¶£',
            'temperature': '‡¶§‡¶æ‡¶™‡¶Æ‡¶æ‡¶§‡ßç‡¶∞‡¶æ (¬∞C)',
            'rainfall': '‡¶¨‡¶æ‡¶∞‡ßç‡¶∑‡¶ø‡¶ï ‡¶¨‡ßÉ‡¶∑‡ßç‡¶ü‡¶ø‡¶™‡¶æ‡¶§ (mm)',
            'humidity': '‡¶Ü‡¶∞‡ßç‡¶¶‡ßç‡¶∞‡¶§‡¶æ (%)',
            'analyze_button': '‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶∏‡ßÅ‡¶™‡¶æ‡¶∞‡¶ø‡¶∂ ‡¶ï‡¶∞‡ßÅ‡¶®',
            'dashboard': '‡¶°‡ßç‡¶Ø‡¶æ‡¶∂‡¶¨‡ßã‡¶∞‡ßç‡¶°',
            'crop_recommendation': '‡¶´‡¶∏‡¶≤ ‡¶∏‡ßÅ‡¶™‡¶æ‡¶∞‡¶ø‡¶∂',
            'soil_analysis': '‡¶Æ‡¶æ‡¶ü‡¶ø‡¶∞ ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£',
            'weather_forecast': '‡¶Ü‡¶¨‡¶π‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶™‡ßÇ‡¶∞‡ßç‡¶¨‡¶æ‡¶≠‡¶æ‡¶∏',
            'farm_overview': '‡¶ñ‡¶æ‡¶Æ‡¶æ‡¶∞‡ßá‡¶∞ ‡¶ì‡¶≠‡¶æ‡¶∞‡¶≠‡¶ø‡¶â',
            'recommended_crop': '‡¶∏‡ßÅ‡¶™‡¶æ‡¶∞‡¶ø‡¶∂‡¶ï‡ßÉ‡¶§ ‡¶´‡¶∏‡¶≤',
            'expected_yield': '‡¶Ü‡¶®‡ßÅ‡¶Æ‡¶æ‡¶®‡¶ø‡¶ï ‡¶´‡¶≤‡¶®',
            'success_probability': '‡¶∏‡¶æ‡¶´‡¶≤‡ßç‡¶Ø‡ßá‡¶∞ ‡¶∏‡¶Æ‡ßç‡¶≠‡¶æ‡¶¨‡¶®‡¶æ',
            'why_this_crop': '‡¶è‡¶á ‡¶´‡¶∏‡¶≤ ‡¶ï‡ßá‡¶®?',
            'planting_guide': '‡¶∞‡ßã‡¶™‡¶£ ‡¶ó‡¶æ‡¶á‡¶°',
            'best_planting_time': '‡¶∏‡ßá‡¶∞‡¶æ ‡¶∞‡ßã‡¶™‡¶£‡ßá‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º',
            'water_requirements': '‡¶™‡¶æ‡¶®‡¶ø‡¶∞ ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®‡ßÄ‡¶Ø‡¶º‡¶§‡¶æ',
            'fertilizer_recommendations': '‡¶∏‡¶æ‡¶∞‡ßá‡¶∞ ‡¶∏‡ßÅ‡¶™‡¶æ‡¶∞‡¶ø‡¶∂',
            'harvest_timeline': '‡¶´‡¶∏‡¶≤ ‡¶ï‡¶æ‡¶ü‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º‡¶∏‡ßÇ‡¶ö‡ßÄ',
            'market_insights': '‡¶¨‡¶æ‡¶ú‡¶æ‡¶∞ ‡¶Ö‡¶®‡ßç‡¶§‡¶∞‡ßç‡¶¶‡ßÉ‡¶∑‡ßç‡¶ü‡¶ø',
            'current_market_price': '‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶¨‡¶æ‡¶ú‡¶æ‡¶∞ ‡¶Æ‡ßÇ‡¶≤‡ßç‡¶Ø',
            'demand_trend': '‡¶ö‡¶æ‡¶π‡¶ø‡¶¶‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶¨‡¶£‡¶§‡¶æ',
            'click_to_analyze': '‡¶´‡¶∏‡¶≤‡ßá‡¶∞ ‡¶∏‡ßÅ‡¶™‡¶æ‡¶∞‡¶ø‡¶∂ ‡¶™‡ßá‡¶§‡ßá ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶¨‡¶æ‡¶ü‡¶®‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®',
            'ph_level': 'pH ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞‡¶æ',
            'moisture': '‡¶Ü‡¶∞‡ßç‡¶¶‡ßç‡¶∞‡¶§‡¶æ',
            'organic_matter': '‡¶ú‡ßà‡¶¨ ‡¶™‡¶¶‡¶æ‡¶∞‡ßç‡¶•',
            'wind_speed': '‡¶¨‡¶æ‡¶§‡¶æ‡¶∏‡ßá‡¶∞ ‡¶ó‡¶§‡¶ø',
            'created_by': '‚ù§Ô∏è ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶§‡ßà‡¶∞‡¶ø',
            'team_name': '‡¶ü‡¶ø‡¶Æ ‡¶è‡¶ó‡ßç‡¶∞‡ßã‡¶®‡ßã‡¶≠‡¶æ',
            'for_sih': 'SIH 2025 ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø'
        },
        'states': {
            "Punjab": "‡¶™‡¶æ‡¶û‡ßç‡¶ú‡¶æ‡¶¨",
            "Haryana": "‡¶π‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶®‡¶æ",
            "Uttar Pradesh": "‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶™‡ßç‡¶∞‡¶¶‡ßá‡¶∂",
            "Maharashtra": "‡¶Æ‡¶π‡¶æ‡¶∞‡¶æ‡¶∑‡ßç‡¶ü‡ßç‡¶∞",
            "Karnataka": "‡¶ï‡¶∞‡ßç‡¶£‡¶æ‡¶ü‡¶ï",
            "Tamil Nadu": "‡¶§‡¶æ‡¶Æ‡¶ø‡¶≤‡¶®‡¶æ‡¶°‡¶º‡ßÅ",
            "Andhra Pradesh": "‡¶Ö‡¶®‡ßç‡¶ß‡ßç‡¶∞‡¶™‡ßç‡¶∞‡¶¶‡ßá‡¶∂",
            "Gujarat": "‡¶ó‡ßÅ‡¶ú‡¶∞‡¶æ‡¶ü",
            "Odisha": "‡¶ì‡¶°‡¶º‡¶ø‡¶∂‡¶æ",
            "Jharkhand": "‡¶ù‡¶æ‡¶°‡¶º‡¶ñ‡¶£‡ßç‡¶°",
            "West Bengal": "‡¶™‡¶∂‡ßç‡¶ö‡¶ø‡¶Æ‡¶¨‡¶ô‡ßç‡¶ó",
            "Bihar": "‡¶¨‡¶ø‡¶π‡¶æ‡¶∞"
        },
        'crops': {
            'Wheat': '‡¶ó‡¶Æ',
            'Rice': '‡¶ß‡¶æ‡¶®',
            'Maize': '‡¶≠‡ßÅ‡¶ü‡ßç‡¶ü‡¶æ',
            'Cotton': '‡¶§‡ßÅ‡¶≤‡¶æ',
            'Soybean': '‡¶∏‡¶Ø‡¶º‡¶æ‡¶¨‡¶ø‡¶®',
            'Pulses': '‡¶°‡¶æ‡¶≤'
        }
    },
    'or': {
        'name': '‡¨ì‡¨°‡¨ø‡¨Ü',
        'ui': {
            'tagline': '‡¨Ü‡¨ß‡≠Å‡¨®‡¨ø‡¨ï ‡¨∞‡≠Ç‡¨™‡¨æ‡¨®‡≠ç‡¨§‡¨∞‡¨£ ‡¨™‡¨æ‡¨á‡¨Å ‡¨â‡¨§‡≠ç‡¨§‡¨Æ ‡¨®‡¨ø‡¨∞‡≠ç‡¨¶‡≠á‡¨∂‡¨®‡¨æ',
            'farmer_details': '‡¨ï‡≠É‡¨∑‡¨ï‡¨∞ ‡¨¨‡¨ø‡¨¨‡¨∞‡¨£‡≠Ä',
            'full_name': '‡¨™‡≠Ç‡¨∞‡¨æ ‡¨®‡¨æ‡¨Æ',
            'region': '‡¨Ö‡¨û‡≠ç‡¨ö‡¨≥',
            'farm_size': '‡¨ö‡¨æ‡¨∑ ‡¨ú‡¨Æ‡¨ø‡¨∞ ‡¨Ü‡¨ï‡¨æ‡¨∞ (‡¨è‡¨ï‡¨∞)',
            'soil_properties': '‡¨Æ‡≠É‡¨§‡≠ç‡¨§‡¨ø‡¨ï‡¨æ‡¨∞ ‡¨ó‡≠Å‡¨£',
            'soil_type': '‡¨Æ‡≠É‡¨§‡≠ç‡¨§‡¨ø‡¨ï‡¨æ‡¨∞ ‡¨™‡≠ç‡¨∞‡¨ï‡¨æ‡¨∞',
            'soil_ph': '‡¨Æ‡≠É‡¨§‡≠ç‡¨§‡¨ø‡¨ï‡¨æ pH',
            'soil_moisture': '‡¨Æ‡≠É‡¨§‡≠ç‡¨§‡¨ø‡¨ï‡¨æ‡¨∞ ‡¨Ü‡¨∞‡≠ç‡¨¶‡≠ç‡¨∞‡¨§‡¨æ (%)',
            'nitrogen': '‡¨®‡¨æ‡¨á‡¨ü‡≠ç‡¨∞‡≠ã‡¨ú‡≠á‡¨® (kg/ha)',
            'phosphorus': '‡¨´‡¨∏‡¨´‡¨∞‡¨∏ (kg/ha)',
            'potassium': '‡¨™‡≠ã‡¨ü‡¨æ‡¨∏‡¨ø‡¨Ö‡¨Æ (kg/ha)',
            'environmental_factors': '‡¨™‡¨∞‡¨ø‡¨¨‡≠á‡¨∂‡¨ó‡¨§ ‡¨ï‡¨æ‡¨∞‡¨ï',
            'temperature': '‡¨§‡¨æ‡¨™‡¨Æ‡¨æ‡¨§‡≠ç‡¨∞‡¨æ (¬∞C)',
            'rainfall': '‡¨¨‡¨æ‡¨∞‡≠ç‡¨∑‡¨ø‡¨ï ‡¨¨‡¨∞‡≠ç‡¨∑‡¨æ (mm)',
            'humidity': '‡¨Ü‡¨∞‡≠ç‡¨¶‡≠ç‡¨∞‡¨§‡¨æ (%)',
            'analyze_button': '‡¨¨‡¨ø‡¨∂‡≠ç‡¨≥‡≠á‡¨∑‡¨£ ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å ‡¨è‡¨¨‡¨Ç ‡¨∏‡≠Å‡¨™‡¨æ‡¨∞‡¨ø‡¨∂ ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å',
            'dashboard': '‡¨°‡≠ç‡≠ü‡¨æ‡¨∏‡¨¨‡≠ã‡¨∞‡≠ç‡¨°',
            'crop_recommendation': '‡¨´‡¨∏‡¨≤ ‡¨∏‡≠Å‡¨™‡¨æ‡¨∞‡¨ø‡¨∂',
            'soil_analysis': '‡¨Æ‡≠É‡¨§‡≠ç‡¨§‡¨ø‡¨ï‡¨æ ‡¨¨‡¨ø‡¨∂‡≠ç‡¨≥‡≠á‡¨∑‡¨£',
            'weather_forecast': '‡¨™‡¨æ‡¨ó ‡¨™‡≠Ç‡¨∞‡≠ç‡¨¨‡¨æ‡¨®‡≠Å‡¨Æ‡¨æ‡¨®',
            'farm_overview': '‡¨ö‡¨æ‡¨∑ ‡¨ú‡¨Æ‡¨ø ‡¨∏‡¨Æ‡≠Ä‡¨ï‡≠ç‡¨∑‡¨æ',
            'recommended_crop': '‡¨∏‡≠Å‡¨™‡¨æ‡¨∞‡¨ø‡¨∂‡¨ï‡≠É‡¨§ ‡¨´‡¨∏‡¨≤',
            'expected_yield': '‡¨Ö‡¨®‡≠Å‡¨Æ‡¨æ‡¨®‡¨ø‡¨§ ‡¨´‡¨∏‡¨≤',
            'success_probability': '‡¨∏‡¨´‡¨≥‡¨§‡¨æ‡¨∞ ‡¨∏‡¨Æ‡≠ç‡¨≠‡¨æ‡¨¨‡¨®‡¨æ',
            'why_this_crop': '‡¨è‡¨π‡¨ø ‡¨´‡¨∏‡¨≤ ‡¨ï‡¨æ‡¨π‡¨ø‡¨Å‡¨ï‡¨ø?',
            'planting_guide': '‡¨∞‡≠ã‡¨™‡¨£ ‡¨ó‡¨æ‡¨á‡¨°‡≠ç',
            'best_planting_time': '‡¨∏‡¨∞‡≠ç‡¨¨‡≠ã‡¨§‡≠ç‡¨§‡¨Æ ‡¨∞‡≠ã‡¨™‡¨£ ‡¨∏‡¨Æ‡≠ü',
            'water_requirements': '‡¨ú‡¨≥ ‡¨Ü‡¨¨‡¨∂‡≠ç‡≠ü‡¨ï‡¨§‡¨æ',
            'fertilizer_recommendations': '‡¨∏‡¨æ‡¨∞ ‡¨™‡≠ç‡¨∞‡≠ü‡≠ã‡¨ó ‡¨∏‡≠Å‡¨™‡¨æ‡¨∞‡¨ø‡¨∂',
            'harvest_timeline': '‡¨´‡¨∏‡¨≤ ‡¨ï‡¨ü‡¨æ‡¨á ‡¨∏‡¨Æ‡≠ü',
            'market_insights': '‡¨¨‡¨ú‡¨æ‡¨∞‡¨∞ ‡¨Ö‡¨®‡≠ç‡¨§‡¨∞‡≠ç‡¨¶‡≠É‡¨∑‡≠ç‡¨ü‡¨ø',
            'current_market_price': '‡¨¨‡¨∞‡≠ç‡¨§‡≠ç‡¨§‡¨Æ‡¨æ‡¨®‡¨∞ ‡¨¨‡¨ú‡¨æ‡¨∞ ‡¨Æ‡≠Ç‡¨≤‡≠ç‡≠ü',
            'demand_trend': '‡¨ö‡¨æ‡¨π‡¨ø‡¨¶‡¨æ‡¨∞ ‡¨™‡≠ç‡¨∞‡¨¨‡≠É‡¨§‡≠ç‡¨§‡¨ø',
            'click_to_analyze': '‡¨´‡¨∏‡¨≤ ‡¨∏‡≠Å‡¨™‡¨æ‡¨∞‡¨ø‡¨∂ ‡¨™‡¨æ‡¨á‡¨¨‡¨æ ‡¨™‡¨æ‡¨á‡¨Å ‡¨¨‡¨ø‡¨∂‡≠ç‡¨≥‡≠á‡¨∑‡¨£ ‡¨¨‡¨ü‡¨®‡≠ç ‡¨¶‡¨¨‡¨æ‡¨®‡≠ç‡¨§‡≠Å',
            'ph_level': 'pH ‡¨∏‡≠ç‡¨§‡¨∞',
            'moisture': '‡¨Ü‡¨∞‡≠ç‡¨¶‡≠ç‡¨∞‡¨§‡¨æ',
            'organic_matter': '‡¨ú‡≠à‡¨¨‡¨ø‡¨ï ‡¨™‡¨¶‡¨æ‡¨∞‡≠ç‡¨•',
            'wind_speed': '‡¨™‡¨¨‡¨® ‡¨ó‡¨§‡¨ø',
            'created_by': '‚ù§Ô∏è ‡¨∏‡¨π‡¨ø‡¨§ ‡¨∏‡≠É‡¨∑‡≠ç‡¨ü‡¨ø',
            'team_name': '‡¨¶‡¨≥ ‡¨Ü‡¨ó‡≠ç‡¨∞‡≠ã‡¨®‡≠ã‡¨≠‡¨æ',
            'for_sih': 'SIH 2025 ‡¨™‡¨æ‡¨á‡¨Å'
        },
        'states': {
            "Punjab": "‡¨™‡¨û‡≠ç‡¨ú‡¨æ‡¨¨",
            "Haryana": "‡¨π‡¨∞‡¨ø‡≠ü‡¨æ‡¨£‡¨æ",
            "Uttar Pradesh": "‡¨â‡¨§‡≠ç‡¨§‡¨∞ ‡¨™‡≠ç‡¨∞‡¨¶‡≠á‡¨∂",
            "Maharashtra": "‡¨Æ‡¨π‡¨æ‡¨∞‡¨æ‡¨∑‡≠ç‡¨ü‡≠ç‡¨∞",
            "Karnataka": "‡¨ï‡¨∞‡≠ç‡¨£‡¨æ‡¨ü‡¨ï",
            "Tamil Nadu": "‡¨§‡¨æ‡¨Æ‡¨ø‡¨≤‡¨®‡¨æ‡¨°‡≠Å",
            "Andhra Pradesh": "‡¨Ü‡¨®‡≠ç‡¨ß‡≠ç‡¨∞ ‡¨™‡≠ç‡¨∞‡¨¶‡≠á‡¨∂",
            "Gujarat": "‡¨ó‡≠Å‡¨ú‡¨∞‡¨æ‡¨ü",
            "Odisha": "‡¨ì‡¨°‡¨ø‡¨∂‡¨æ",
            "Jharkhand": "‡¨ù‡¨æ‡¨°‡¨º‡¨ñ‡¨£‡≠ç‡¨°",
            "West Bengal": "‡¨™‡¨∂‡≠ç‡¨ö‡¨ø‡¨Æ ‡¨¨‡¨ô‡≠ç‡¨ó",
            "Bihar": "‡¨¨‡¨ø‡¨π‡¨æ‡¨∞"
        },
        'crops': {
            'Wheat': '‡¨ó‡¨π‡¨Æ',
            'Rice': '‡¨ß‡¨æ‡¨®',
            'Maize': '‡¨Æ‡¨ï‡¨æ',
            'Cotton': '‡¨ï‡¨™‡¨æ‡¨π',
            'Soybean': '‡¨∏‡≠ã‡≠ü‡¨æ‡¨¨‡¨ø‡¨®',
            'Pulses': '‡¨°‡¨æ‡¨≤‡¨ø'
        }
    }
}

# Helper functions for language support
def get_available_languages():
    return list(LANGUAGES.keys())

def get_state_name(state_code, lang='en'):
    return LANGUAGES[lang]['states'].get(state_code, state_code)

def get_language_for_state(state_code):
    # Map states to their primary languages
    state_language_map = {
        "Punjab": "en",
        "Haryana": "hi",
        "Uttar Pradesh": "hi",
        "Maharashtra": "en",
        "Karnataka": "en",
        "Tamil Nadu": "en",
        "Andhra Pradesh": "te",
        "Gujarat": "en",
        "Odisha": "or",
        "Jharkhand": "hi",
        "West Bengal": "bn",
        "Bihar": "hi"
    }
    return state_language_map.get(state_code, "en")

# Enhanced CSS with better colors and design
def get_css():
    return """
    <style>
        /* Main styles */
        .main-header {
            font-size: 3.5rem;
            color: #1B5E20;
            text-align: center;
            font-weight: bold;
            margin-bottom: 0;
            font-family: 'Arial', sans-serif;
            text-shadow: 1px 1px 3px rgba(0,0,0,0.1);
        }
        .tagline {
            font-size: 1.2rem;
            color: #388E3C;
            text-align: center;
            margin-top: 0;
            font-style: italic;
            font-family: 'Arial', sans-serif;
        }
        .sub-header {
            font-size: 1.8rem;
            color: #2E7D32;
            border-bottom: 2px solid #4CAF50;
            padding-bottom: 10px;
            font-family: 'Arial', sans-serif;
        }
        
        /* Card styles */
        .card {
            padding: 20px;
            border-radius: 12px;
            box-shadow: 0 4px 8px 0 rgba(0,0,0,0.1);
            margin: 15px 0;
            background-color: #FFFFFF;
            border-left: 5px solid #4CAF50;
            transition: transform 0.2s;
        }
        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 16px 0 rgba(0,0,0,0.15);
        }
        .recommendation-card {
            background: linear-gradient(135deg, #E8F5E9 0%, #C8E6C9 100%);
            padding: 25px;
            border-radius: 15px;
            border-left: 5px solid #4CAF50;
            box-shadow: 0 6px 12px rgba(0,0,0,0.1);
        }
        
        /* Metric styles */
        .metric-label {
            font-size: 14px;
            color: #616161;
            font-weight: 500;
            margin-bottom: 5px;
        }
        .metric-value {
            font-size: 24px;
            color: #1B5E20;
            font-weight: bold;
        }
        
        /* Weather card styles */
        .weather-card {
            background: linear-gradient(135deg, #E3F2FD 0%, #BBDEFB 100%);
            padding: 20px;
            border-radius: 12px;
            text-align: center;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            height: 120px;
            display: flex;
            flex-direction: column;
            justify-content: center;
        }
        
        /* Soil image styles */
        .soil-image {
            border-radius: 12px;
            width: 100%;
            height: 180px;
            object-fit: cover;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        
        /* Footer styles */
        .footer {
            text-align: center;
            margin-top: 30px;
            padding: 20px;
            background-color: #2E7D32;
            color: white;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        .team-name {
            font-weight: bold;
            color: #FFD700;
        }
        
        /* Progress bar */
        .stProgress > div > div > div > div {
            background: linear-gradient(90deg, #4CAF50 0%, #8BC34A 100%);
            border-radius: 4px;
        }
        
        /* Button styles */
        .stButton button {
            background: linear-gradient(135deg, #4CAF50 0%, #2E7D32 100%);
            color: white;
            border: none;
            border-radius: 8px;
            padding: 10px 24px;
            font-weight: 600;
            transition: all 0.3s;
        }
        .stButton button:hover {
            background: linear-gradient(135deg, #43A047 0%, #1B5E20 100%);
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        }
        
        /* Language selector */
        .language-selector {
            background-color: #E8F5E9;
            padding: 8px 12px;
            border-radius: 20px;
            display: inline-block;
            margin-bottom: 10px;
        }
        
        /* Tab styling */
        .stTabs [data-baseweb="tab-list"] {
            gap: 8px;
        }
        .stTabs [data-baseweb="tab"] {
            background-color: #F1F8E9;
            border-radius: 8px 8px 0 0;
            padding: 10px 20px;
            font-weight: 600;
        }
        .stTabs [aria-selected="true"] {
            background-color: #4CAF50;
            color: white;
        }
        
        /* Sidebar styling */
        .css-1d391kg {
            background: linear-gradient(135deg, #F1F8E9 0%, #E8F5E9 100%);
        }
    </style>
    """

# Helper function to get translated text
def t(key, lang=None):
    """Get translated text for the given key"""
    if lang is None:
        lang = st.session_state.language
    
    # Navigate through nested keys (e.g., 'ui.farmer_details')
    keys = key.split('.')
    value = LANGUAGES[lang]
    
    for k in keys:
        if isinstance(value, dict) and k in value:
            value = value[k]
        else:
            # Fallback to English if translation not found
            if lang != 'en':
                return t(key, 'en')
            return key  # Return the key itself as last resort
    
    return value

# Initialize session state for language
if 'language' not in st.session_state:
    st.session_state.language = 'en'
if 'last_state' not in st.session_state:
    st.session_state.last_state = ''

# Apply custom CSS
st.markdown(get_css(), unsafe_allow_html=True)

# Generate soil images if they don't exist
def generate_soil_images():
    soil_colors = {
        "clay": (180, 120, 80),
        "loam": (160, 100, 60),
        "sand": (220, 200, 160),
        "silt": (200, 180, 140)
    }
    
    os.makedirs("assets/soil_types", exist_ok=True)
    
    for soil_type, color in soil_colors.items():
        img_path = f"assets/soil_types/{soil_type}.png"
        if not os.path.exists(img_path):
            img = Image.new('RGB', (400, 300), color=color)
            draw = ImageDraw.Draw(img)
            
            # Add texture
            for _ in range(800):
                x = np.random.randint(0, 400)
                y = np.random.randint(0, 300)
                size = np.random.randint(2, 8)
                draw.ellipse([(x, y), (x+size, y+size)], 
                           fill=tuple(max(0, c-30) for c in color))
            
            img.save(img_path)

# Generate logo if it doesn't exist
def generate_logo():
    if not os.path.exists("assets/logo.png"):
        img = Image.new('RGB', (400, 200), color=(46, 139, 87))
        draw = ImageDraw.Draw(img)
        
        # Draw VARUN text
        draw.text((120, 70), "VARUN", fill=(255, 255, 255))
        draw.text((130, 120), "ai", fill=(255, 215, 0))
        
        # Draw plant icon
        draw.ellipse([(30, 70), (90, 130)], fill=(255, 215, 0))
        img.save("assets/logo.png")

# Generate images
os.makedirs("assets", exist_ok=True)
generate_logo()
generate_soil_images()

# Language selector at top right
with st.container():
    col1, col2, col3 = st.columns([3, 1, 1])
    with col3:
        st.markdown('<div class="language-selector">', unsafe_allow_html=True)
        selected_language = st.selectbox(
            "üåê",
            options=get_available_languages(),
            format_func=lambda x: LANGUAGES[x]['name'],
            key='language_selector',
            index=get_available_languages().index(st.session_state.language),
            label_visibility="collapsed"
        )
        st.markdown('</div>', unsafe_allow_html=True)
        
        # Update language when selector changes
        if selected_language != st.session_state.language:
            st.session_state.language = selected_language
            st.rerun()

# App header
col1, col2, col3 = st.columns([1, 3, 1])
with col2:
    st.markdown(f'<h1 class="main-header">VARUN<span style="color: #FFD700;">ai</span></h1>', unsafe_allow_html=True)
    st.markdown(f'<p class="tagline">{t("ui.tagline")}</p>', unsafe_allow_html=True)

# Sidebar
with st.sidebar:
    st.image("assets/logo.png", width=280)
    st.markdown(f"## {t('ui.farmer_details')}")
    
    farmer_name = st.text_input(t('ui.full_name'))
    
    # Get state names in current language
    state_options = list(LANGUAGES['en']['states'].keys())
    state_display_names = [get_state_name(state, st.session_state.language) for state in state_options]
    
    selected_state_index = st.selectbox(
        t('ui.region'),
        range(len(state_options)),
        format_func=lambda i: state_display_names[i]
    )
    
    farm_location = state_options[selected_state_index]
    
    # Update language based on state selection
    if farm_location and farm_location != st.session_state.last_state:
        state_language = get_language_for_state(farm_location)
        if state_language != st.session_state.language:
            st.session_state.language = state_language
            st.session_state.last_state = farm_location
            st.rerun()
    
    farm_size = st.slider(t('ui.farm_size'), 1, 100, 10)
    
    st.markdown(f"## {t('ui.soil_properties')}")
    soil_type = st.selectbox(t('ui.soil_type'), ["Loam", "Clay", "Sandy", "Silt"])
    soil_ph = st.slider(t('ui.soil_ph'), 4.0, 9.0, 6.5)
    soil_moisture = st.slider(t('ui.soil_moisture'), 0, 100, 50)
    nitrogen = st.slider(t('ui.nitrogen'), 0, 200, 50)
    phosphorus = st.slider(t('ui.phosphorus'), 0, 200, 40)
    potassium = st.slider(t('ui.potassium'), 0, 200, 60)
    
    st.markdown(f"## {t('ui.environmental_factors')}")
    temperature = st.slider(t('ui.temperature'), 0, 45, 25)
    rainfall = st.slider(t('ui.rainfall'), 0, 2000, 800)
    humidity = st.slider(t('ui.humidity'), 0, 100, 60)
    
    analyze_button = st.button(t('ui.analyze_button'), type="primary", use_container_width=True)

# Crop recommendation model
def predict_best_crop(soil_type, ph, nitrogen, phosphorus, potassium, temperature, rainfall, humidity, region):
    # Regional crop preferences
    regional_preferences = {
        "Punjab": ["Wheat", "Rice", "Cotton", "Maize"],
        "Haryana": ["Wheat", "Rice", "Cotton", "Mustard"],
        "Uttar Pradesh": ["Wheat", "Rice", "Sugarcane", "Potato"],
        "Maharashtra": ["Cotton", "Soybean", "Pulses", "Sugarcane"],
        "Karnataka": ["Rice", "Cotton", "Pulses", "Coffee"],
        "Tamil Nadu": ["Rice", "Sugarcane", "Cotton", "Groundnut"],
        "Andhra Pradesh": ["Rice", "Cotton", "Chilli", "Groundnut"],
        "Gujarat": ["Cotton", "Groundnut", "Wheat", "Pulses"],
        "Odisha": ["Rice", "Pulses", "Oilseeds", "Millets"],
        "Jharkhand": ["Rice", "Pulses", "Oilseeds", "Maize"],
        "West Bengal": ["Rice", "Jute", "Tea", "Potato"],
        "Bihar": ["Rice", "Wheat", "Maize", "Pulses"]
    }
    
    # Crop data with optimal conditions
    crops = [
        {
            'name': 'Wheat', 'soil_type': 'Loam', 'ph_min': 6.0, 'ph_max': 7.5,
            'temp_min': 10, 'temp_max': 25, 'rainfall_min': 500, 'rainfall_max': 1000,
            'n_min': 50, 'n_max': 80, 'p_min': 30, 'p_max': 60, 'k_min': 40, 'k_max': 70
        },
        {
            'name': 'Rice', 'soil_type': 'Clay', 'ph_min': 5.0, 'ph_max': 6.5,
            'temp_min': 20, 'temp_max': 35, 'rainfall_min': 1000, 'rainfall_max': 2000,
            'n_min': 60, 'n_max': 90, 'p_min': 40, 'p_max': 70, 'k_min': 50, 'k_max': 80
        },
        {
            'name': 'Maize', 'soil_type': 'Loam', 'ph_min': 5.5, 'ph_max': 7.0,
            'temp_min': 15, 'temp_max': 30, 'rainfall_min': 600, 'rainfall_max': 1200,
            'n_min': 70, 'n_max': 100, 'p_min': 50, 'p_max': 80, 'k_min': 60, 'k_max': 90
        },
        {
            'name': 'Cotton', 'soil_type': 'Sandy', 'ph_min': 5.5, 'ph_max': 7.5,
            'temp_min': 20, 'temp_max': 35, 'rainfall_min': 500, 'rainfall_max': 800,
            'n_min': 40, 'n_max': 70, 'p_min': 30, 'p_max': 60, 'k_min': 50, 'k_max': 80
        },
        {
            'name': 'Soybean', 'soil_type': 'Silt', 'ph_min': 6.0, 'ph_max': 7.0,
            'temp_min': 15, 'temp_max': 30, 'rainfall_min': 600, 'rainfall_max': 1000,
            'n_min': 30, 'n_max': 60, 'p_min': 40, 'p_max': 70, 'k_min': 50, 'k_max': 80
        },
        {
            'name': 'Pulses', 'soil_type': 'Loam', 'ph_min': 6.0, 'ph_max': 7.5,
            'temp_min': 15, 'temp_max': 30, 'rainfall_min': 500, 'rainfall_max': 800,
            'n_min': 20, 'n_max': 50, 'p_min': 30, 'p_max': 60, 'k_min': 40, 'k_max': 70
        }
    ]
    
    # Calculate scores
    scores = []
    for crop in crops:
        score = 0
        
        # Regional preference (higher weight)
        if crop['name'] in regional_preferences.get(region, []):
            score += 30
        
        # Soil type match
        if crop['soil_type'].lower() == soil_type.lower():
            score += 25
        
        # pH suitability
        if crop['ph_min'] <= ph <= crop['ph_max']:
            score += 15
        else:
            score -= 10 * abs(ph - (crop['ph_min'] + crop['ph_max'])/2)
        
        # Temperature suitability
        if crop['temp_min'] <= temperature <= crop['temp_max']:
            score += 10
        else:
            score -= 5 * abs(temperature - (crop['temp_min'] + crop['temp_max'])/2)
        
        # Rainfall suitability
        if crop['rainfall_min'] <= rainfall <= crop['rainfall_max']:
            score += 10
        else:
            score -= 3 * abs(rainfall - (crop['rainfall_min'] + crop['rainfall_max'])/2)
        
        # Nutrient suitability
        n_score = 8 if crop['n_min'] <= nitrogen <= crop['n_max'] else -2 * abs(nitrogen - (crop['n_min'] + crop['n_max'])/2)
        p_score = 8 if crop['p_min'] <= phosphorus <= crop['p_max'] else -2 * abs(phosphorus - (crop['p_min'] + crop['p_max'])/2)
        k_score = 9 if crop['k_min'] <= potassium <= crop['k_max'] else -2 * abs(potassium - (crop['k_min'] + crop['k_max'])/2)
        
        score += n_score + p_score + k_score
        scores.append(score)
    
    # Get best crop
    best_idx = np.argmax(scores)
    best_crop = crops[best_idx]
    
    # Generate recommendation
    planting_times = {
        'Wheat': t('crops.Wheat') + ' - October-November',
        'Rice': t('crops.Rice') + ' - June-July', 
        'Maize': t('crops.Maize') + ' - April-May',
        'Cotton': t('crops.Cotton') + ' - May-June',
        'Soybean': t('crops.Soybean') + ' - June-July',
        'Pulses': t('crops.Pulses') + ' - October-November'
    }
    
    return {
        'crop': t(f'crops.{best_crop["name"]}'),
        'probability': min(95, max(65, int(scores[best_idx]))),
        'yield': f"{np.random.uniform(2.0, 5.0):.1f}",
        'reason': f"{t(f'crops.{best_crop['name']}')} is ideal for {region}'s climate and your soil conditions ({soil_type} soil, pH {ph}).",
        'planting_time': planting_times.get(best_crop['name'], 'Varies by region'),
        'water_req': 'Moderate (600-800 mm)' if best_crop['name'] in ['Wheat', 'Maize'] else 
                     'High (1000-1500 mm)' if best_crop['name'] == 'Rice' else
                     'Low (400-600 mm)' if best_crop['name'] == 'Cotton' else 'Moderate (500-700 mm)',
        'fertilizer': 'N:P:K = 60:40:40 kg/ha' if best_crop['name'] == 'Wheat' else 
                      'N:P:K = 80:40:40 kg/ha' if best_crop['name'] == 'Rice' else
                      'N:P:K = 100:50:50 kg/ha' if best_crop['name'] == 'Maize' else
                      'N:P:K = 50:25:25 kg/ha' if best_crop['name'] == 'Cotton' else 'N:P:K = 40:60:40 kg/ha',
        'harvest_time': 'March-April' if best_crop['name'] == 'Wheat' else 
                        'October-November' if best_crop['name'] == 'Rice' else
                        'August-September' if best_crop['name'] == 'Maize' else
                        'October-December' if best_crop['name'] == 'Cotton' else 'September-October',
        'market_price': f"‚Çπ{np.random.randint(25, 55)}",
        'demand_trend': 'High' if best_crop['name'] in ['Rice', 'Wheat'] else 'Stable'
    }

# Main content
tab1, tab2, tab3, tab4 = st.tabs([
    t('ui.dashboard'), 
    t('ui.crop_recommendation'), 
    t('ui.soil_analysis'), 
    t('ui.weather_forecast')
])

with tab1:
    st.markdown(f'<h2 class="sub-header">{t("ui.farm_overview")}</h2>', unsafe_allow_html=True)
    
    col1, col2, col3 = st.columns(3)
    with col1: 
        st.markdown(f'<div class="card"><div class="metric-label">{t("ui.farm_size")}</div><div class="metric-value">{farm_size} acres</div></div>', unsafe_allow_html=True)
    with col2: 
        st.markdown(f'<div class="card"><div class="metric-label">{t("ui.soil_type")}</div><div class="metric-value">{soil_type}</div></div>', unsafe_allow_html=True)
    with col3: 
        st.markdown(f'<div class="card"><div class="metric-label">{t("ui.region")}</div><div class="metric-value">{get_state_name(farm_location, st.session_state.language)}</div></div>', unsafe_allow_html=True)

with tab2:
    st.markdown(f'<h2 class="sub-header">{t("ui.crop_recommendation")}</h2>', unsafe_allow_html=True)
    
    if analyze_button:
        with st.spinner('Analyzing your farm data and generating recommendations...'):
            progress_bar = st.progress(0)
            for percent_complete in range(100):
                time.sleep(0.01)
                progress_bar.progress(percent_complete + 1)
            
            recommendation = predict_best_crop(soil_type, soil_ph, nitrogen, phosphorus, 
                                             potassium, temperature, rainfall, humidity, farm_location)
            
            st.markdown('<div class="recommendation-card">', unsafe_allow_html=True)
            st.markdown(f"### üå± {t('ui.recommended_crop')}: **{recommendation['crop']}**")
            st.markdown(f"**{t('ui.expected_yield')}:** {recommendation['yield']} tons/acre")
            st.markdown(f"**{t('ui.success_probability')}:** {recommendation['probability']}%")
            st.markdown('</div>', unsafe_allow_html=True)
            
            st.markdown(f"#### {t('ui.why_this_crop')}")
            st.info(recommendation['reason'])
            
            st.markdown(f"#### {t('ui.planting_guide')}")
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown(f"**{t('ui.best_planting_time')}**")
                st.write(recommendation['planting_time'])
                
                st.markdown(f"**{t('ui.water_requirements')}**")
                st.write(recommendation['water_req'])
            
            with col2:
                st.markdown(f"**{t('ui.fertilizer_recommendations')}**")
                st.write(recommendation['fertilizer'])
                
                st.markdown(f"**{t('ui.harvest_timeline')}**")
                st.write(recommendation['harvest_time'])
            
            st.markdown(f"#### {t('ui.market_insights')}")
            st.success(f"{t('ui.current_market_price')}: {recommendation['market_price']} per kg")
            st.write(f"{t('ui.demand_trend')}: {recommendation['demand_trend']}")
    
    else:
        st.info(t('ui.click_to_analyze'))

with tab3:
    st.markdown(f'<h2 class="sub-header">{t("ui.soil_analysis")}</h2>', unsafe_allow_html=True)
    
    # Load soil image with error handling
    try:
        soil_img = Image.open(f"assets/soil_types/{soil_type.lower()}.png")
        st.image(soil_img, caption=f"{soil_type} {t('ui.soil_type')}", use_container_width=True)
    except FileNotFoundError:
        st.warning("Soil image not found. Please run generate_images.py to create soil images.")
        # Create a simple colored placeholder
        soil_colors = {
            "clay": (180, 120, 80),
            "loam": (160, 100, 60),
            "sand": (220, 200, 160),
            "silt": (200, 180, 140)
        }
        color = soil_colors.get(soil_type.lower(), (200, 200, 200))
        placeholder = Image.new('RGB', (400, 300), color=color)
        draw = ImageDraw.Draw(placeholder)
        draw.text((150, 140), soil_type.upper(), fill=(255, 255, 255))
        st.image(placeholder, caption=f"{soil_type} {t('ui.soil_type')} (Placeholder)", use_container_width=True)
    
    col1, col2, col3 = st.columns(3)
    with col1: 
        st.markdown(f'<div class="weather-card"><div class="metric-label">{t("ui.ph_level")}</div><div class="metric-value">{soil_ph}</div></div>', unsafe_allow_html=True)
    with col2: 
        st.markdown(f'<div class="weather-card"><div class="metric-label">{t("ui.moisture")}</div><div class="metric-value">{soil_moisture}%</div></div>', unsafe_allow_html=True)
    with col3: 
        st.markdown(f'<div class="weather-card"><div class="metric-label">{t("ui.organic_matter")}</div><div class="metric-value">3.2%</div></div>', unsafe_allow_html=True)

with tab4:
    st.markdown(f'<h2 class="sub-header">{t("ui.weather_forecast")}</h2>', unsafe_allow_html=True)
    
    col1, col2, col3, col4 = st.columns(4)
    with col1: 
        st.markdown(f'<div class="weather-card"><div class="metric-label">{t("ui.temperature")}</div><div class="metric-value">{temperature}¬∞C</div></div>', unsafe_allow_html=True)
    with col2: 
        st.markdown(f'<div class="weather-card"><div class="metric-label">{t("ui.humidity")}</div><div class="metric-value">{humidity}%</div></div>', unsafe_allow_html=True)
    with col3: 
        st.markdown(f'<div class="weather-card"><div class="metric-label">{t("ui.rainfall")}</div><div class="metric-value">{rainfall} mm</div></div>', unsafe_allow_html=True)
    with col4: 
        st.markdown(f'<div class="weather-card"><div class="metric-label">{t("ui.wind_speed")}</div><div class="metric-value">12 km/h</div></div>', unsafe_allow_html=True)

# Footer
st.markdown(f"""
<div class="footer">
    <p>{t('ui.created_by')} <span class="team-name">{t('ui.team_name')}</span> {t('ui.for_sih')}</p>
    <p>VARUN AI - {t('ui.tagline')}</p>
</div>
""", unsafe_allow_html=True)
